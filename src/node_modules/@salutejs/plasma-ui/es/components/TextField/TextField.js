var _excluded = ["id", "size", "disabled", "status", "label", "placeholder", "contentLeft", "contentRight", "helperText", "style", "className", "onChange", "onSearch"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useCallback } from 'react';
import styled from 'styled-components';
import { FieldRoot, FieldPlaceholder, FieldContent, Input, secondary } from '@salutejs/plasma-core';
import { FieldHelper, applyInputStyles } from '../Field';
import { spatnavClassNameAttrs } from '../../utils';
var StyledInput = /*#__PURE__*/styled(Input).attrs(spatnavClassNameAttrs).withConfig({
  componentId: "plasma-ui__sc-1o5gwii-0"
})(["", ";border-radius:1rem;&::placeholder{opacity:0;}&:placeholder-shown + ", "{color:", ";}"], applyInputStyles, FieldPlaceholder, function (_ref) {
  var status = _ref.status;
  return status ? null : secondary;
});
/**
 * Поле ввода текста.
 */
// eslint-disable-next-line prefer-arrow-callback

export var TextField = /*#__PURE__*/forwardRef(function TextField(_ref2, ref) {
  var id = _ref2.id,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? 'l' : _ref2$size,
      disabled = _ref2.disabled,
      status = _ref2.status,
      label = _ref2.label,
      placeholder = _ref2.placeholder,
      contentLeft = _ref2.contentLeft,
      contentRight = _ref2.contentRight,
      helperText = _ref2.helperText,
      style = _ref2.style,
      className = _ref2.className,
      onChange = _ref2.onChange,
      onSearch = _ref2.onSearch,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var placeLabel = label || placeholder;
  var handleChange = useCallback(function (event) {
    var _event$target = event.target,
        maxLength = _event$target.maxLength,
        value = _event$target.value;

    if (!onChange || maxLength !== -1 && value.length > maxLength) {
      return;
    }

    onChange(event);
  }, [onChange]);
  var handleSearch = useCallback(function (event) {
    if (event.keyCode === 13 && onSearch) {
      onSearch(event.target.value, event);
    }
  }, [onSearch]);
  return /*#__PURE__*/React.createElement(FieldRoot, {
    $size: size,
    $disabled: disabled,
    $isContentLeft: Boolean(contentLeft),
    $isContentRight: Boolean(contentRight),
    $isHelper: Boolean(helperText),
    status: status,
    style: style,
    className: className
  }, contentLeft && /*#__PURE__*/React.createElement(FieldContent, {
    pos: "left"
  }, contentLeft), /*#__PURE__*/React.createElement(StyledInput, _extends({
    $size: size,
    ref: ref,
    id: id,
    placeholder: placeLabel,
    disabled: disabled,
    status: status,
    "aria-describedby": id ? "".concat(id, "-helpertext") : undefined,
    onChange: handleChange,
    onKeyUp: onSearch && handleSearch
  }, rest)), placeLabel && size === 'l' && /*#__PURE__*/React.createElement(FieldPlaceholder, {
    htmlFor: id
  }, placeLabel), contentRight && /*#__PURE__*/React.createElement(FieldContent, {
    pos: "right"
  }, contentRight), helperText && /*#__PURE__*/React.createElement(FieldHelper, {
    id: id ? "".concat(id, "-helpertext") : undefined
  }, helperText));
});