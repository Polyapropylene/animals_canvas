import React from 'react';
import styled, { css } from 'styled-components';
import { surfaceLiquid03, buttonAccent, scalingPixelBasis, sberPortalScale } from '@salutejs/plasma-tokens';
import { useIsomorphicLayoutEffect } from '@salutejs/plasma-core';
import { useThemeContext } from '../../hooks';
export var handleDiameter = 1.5;
export var handleBorderWidth = 0.0625;
export var railHeight = 0.25;
export var railBorderRadius = railHeight / 2;
export var indentation = handleDiameter / 2 + handleBorderWidth;
var Slider = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-15v58pc-0"
})(["position:relative;height:1.625rem;user-select:none;", ""], function (_ref) {
  var disabled = _ref.disabled;
  return disabled && css(["opacity:0.4;"]);
});
var Rail = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-15v58pc-1"
})(["position:relative;height:", "rem;border-radius:", "rem;background-color:", ";overflow:hidden;top:50%;margin-left:", "rem;margin-right:", "rem;transform:translateY(-50%);"], railHeight, railBorderRadius, surfaceLiquid03, indentation, indentation);
var Fill = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-15v58pc-2"
})(["position:absolute;height:100%;top:0;left:0;background-color:", ";width:0;"], buttonAccent);
export var SliderBase = function SliderBase(_ref2) {
  var max = _ref2.max,
      min = _ref2.min,
      setStepSize = _ref2.setStepSize,
      railFillWidth = _ref2.railFillWidth,
      children = _ref2.children,
      _ref2$railFillXPositi = _ref2.railFillXPosition,
      railFillXPosition = _ref2$railFillXPositi === void 0 ? 0 : _ref2$railFillXPositi,
      disabled = _ref2.disabled;
  var ref = React.useRef(null);
  var theme = useThemeContext();
  useIsomorphicLayoutEffect(function () {
    var resizeHandler = function resizeHandler() {
      if (ref.current) {
        var _theme$deviceScale;

        var rootElementFontSize = ((_theme$deviceScale = theme === null || theme === void 0 ? void 0 : theme.deviceScale) !== null && _theme$deviceScale !== void 0 ? _theme$deviceScale : sberPortalScale) * scalingPixelBasis;
        var railSize = ref.current.offsetWidth - indentation * rootElementFontSize * 2;
        var totalSteps = max - min;
        setStepSize(railSize / totalSteps);
      }
    };

    resizeHandler();
    window.addEventListener('resize', resizeHandler);
    return function () {
      return window.removeEventListener('resize', resizeHandler);
    };
  }, [min, max, setStepSize, ref.current]);
  return /*#__PURE__*/React.createElement(Slider, {
    disabled: disabled,
    ref: ref
  }, /*#__PURE__*/React.createElement(Rail, null, /*#__PURE__*/React.createElement(Fill, {
    style: {
      left: "".concat(railFillXPosition, "px"),
      width: "".concat(railFillWidth, "px")
    }
  })), children);
};