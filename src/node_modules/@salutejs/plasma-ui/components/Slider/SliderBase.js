"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliderBase = exports.indentation = exports.railBorderRadius = exports.railHeight = exports.handleBorderWidth = exports.handleDiameter = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _plasmaTokens = /*#__PURE__*/require("@salutejs/plasma-tokens");

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _hooks = /*#__PURE__*/require("../../hooks");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var handleDiameter = 1.5;
exports.handleDiameter = handleDiameter;
var handleBorderWidth = 0.0625;
exports.handleBorderWidth = handleBorderWidth;
var railHeight = 0.25;
exports.railHeight = railHeight;
var railBorderRadius = railHeight / 2;
exports.railBorderRadius = railBorderRadius;
var indentation = handleDiameter / 2 + handleBorderWidth;
exports.indentation = indentation;

var Slider = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-ui__sc-15v58pc-0"
})(["position:relative;height:1.625rem;user-select:none;", ""], function (_ref) {
  var disabled = _ref.disabled;
  return disabled && (0, _styledComponents.css)(["opacity:0.4;"]);
});

var Rail = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-ui__sc-15v58pc-1"
})(["position:relative;height:", "rem;border-radius:", "rem;background-color:", ";overflow:hidden;top:50%;margin-left:", "rem;margin-right:", "rem;transform:translateY(-50%);"], railHeight, railBorderRadius, _plasmaTokens.surfaceLiquid03, indentation, indentation);

var Fill = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-ui__sc-15v58pc-2"
})(["position:absolute;height:100%;top:0;left:0;background-color:", ";width:0;"], _plasmaTokens.buttonAccent);

var SliderBase = function SliderBase(_ref2) {
  var max = _ref2.max,
      min = _ref2.min,
      setStepSize = _ref2.setStepSize,
      railFillWidth = _ref2.railFillWidth,
      children = _ref2.children,
      _ref2$railFillXPositi = _ref2.railFillXPosition,
      railFillXPosition = _ref2$railFillXPositi === void 0 ? 0 : _ref2$railFillXPositi,
      disabled = _ref2.disabled;

  var ref = _react["default"].useRef(null);

  var theme = (0, _hooks.useThemeContext)();
  (0, _plasmaCore.useIsomorphicLayoutEffect)(function () {
    var resizeHandler = function resizeHandler() {
      if (ref.current) {
        var _theme$deviceScale;

        var rootElementFontSize = ((_theme$deviceScale = theme === null || theme === void 0 ? void 0 : theme.deviceScale) !== null && _theme$deviceScale !== void 0 ? _theme$deviceScale : _plasmaTokens.sberPortalScale) * _plasmaTokens.scalingPixelBasis;
        var railSize = ref.current.offsetWidth - indentation * rootElementFontSize * 2;
        var totalSteps = max - min;
        setStepSize(railSize / totalSteps);
      }
    };

    resizeHandler();
    window.addEventListener('resize', resizeHandler);
    return function () {
      return window.removeEventListener('resize', resizeHandler);
    };
  }, [min, max, setStepSize, ref.current]);
  return /*#__PURE__*/_react["default"].createElement(Slider, {
    disabled: disabled,
    ref: ref
  }, /*#__PURE__*/_react["default"].createElement(Rail, null, /*#__PURE__*/_react["default"].createElement(Fill, {
    style: {
      left: "".concat(railFillXPosition, "px"),
      width: "".concat(railFillWidth, "px")
    }
  })), children);
};

exports.SliderBase = SliderBase;