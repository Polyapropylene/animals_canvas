{"ast":null,"code":"import { M as MessageNames, d as __awaiter, e as __generator, p as proto, b as __assign, c as createNanoEvents, a as __rest, _ as __spreadArrays, f as createCommonjsModule, h as commonjsRequire, m as minimal, g as commonjsGlobal } from './typings-56926c74.js';\nfunction convertFieldValuesToString(object) {\n  return Object.keys(object).reduce(function (acc, key) {\n    acc[key] = JSON.stringify(object[key]);\n    return acc;\n  }, {});\n}\nvar createClient = function createClient(protocol, provideMeta) {\n  if (provideMeta === void 0) {\n    provideMeta = undefined;\n  }\n  var _a = createNanoEvents(),\n    on = _a.on,\n    emit = _a.emit;\n  /** ждет ответ бека и возвращает данные из этого ответа */\n  var waitForAnswer = function waitForAnswer(messageId) {\n    return new Promise(function (resolve) {\n      var off = on('systemMessage', function (systemMessageData, originalMessage) {\n        if (originalMessage.messageId === messageId && (originalMessage.messageName === MessageNames.ANSWER_TO_USER || originalMessage.messageName === MessageNames.DO_NOTHING)) {\n          off();\n          resolve(systemMessageData);\n        }\n      });\n    });\n  };\n  /** отправляет произвольный systemMessage, не подкладывает мету */\n  var sendData = function sendData(data, messageName, meta) {\n    if (messageName === void 0) {\n      messageName = '';\n    }\n    var messageId = protocol.getMessageId();\n    protocol.sendSystemMessage({\n      data: data,\n      messageName: messageName\n    }, true, messageId, {\n      meta: convertFieldValuesToString(meta || {})\n    });\n    return messageId;\n  };\n  /** отправляет cancel на сообщение */\n  var sendCancel = function sendCancel(messageId) {\n    protocol.sendCancel({}, true, messageId);\n  };\n  /** отправляет приветствие */\n  var sendOpenAssistant = function sendOpenAssistant(_a) {\n    var isFirstSession = (_a === void 0 ? {\n      isFirstSession: false\n    } : _a).isFirstSession;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var data, meta, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            data = isFirstSession ? {\n              is_first_session: true\n            } : {};\n            if (!provideMeta) return [3 /*break*/, 2];\n            return [4 /*yield*/, provideMeta()];\n          case 1:\n            _b = _c.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _b = undefined;\n            _c.label = 3;\n          case 3:\n            meta = _b;\n            return [2 /*return*/, waitForAnswer(sendData(data, 'OPEN_ASSISTANT', meta))];\n        }\n      });\n    });\n  };\n  /** вызывает sendSystemMessage, куда подкладывает мету */\n  var sendMeta = function sendMeta(sendSystemMessage) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var meta, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!provideMeta) return [3 /*break*/, 2];\n            return [4 /*yield*/, provideMeta()];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = undefined;\n            _b.label = 3;\n          case 3:\n            meta = _a;\n            if (typeof meta !== 'undefined') {\n              sendSystemMessage({\n                data: {},\n                messageName: ''\n              }, false, {\n                meta: convertFieldValuesToString(meta || {})\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /** отправляет server_action и мету */\n  var sendServerAction = function sendServerAction(serverAction, appInfo, messageName) {\n    if (messageName === void 0) {\n      messageName = 'SERVER_ACTION';\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var messageId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            messageId = protocol.getMessageId();\n            // мету и server_action отправляем в одном systemMessage\n            return [4 /*yield*/, sendMeta(function (data, _, _a) {\n              var meta = (_a === void 0 ? {} : _a).meta;\n              var systemData = __rest(data, []);\n              protocol.sendSystemMessage({\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                data: __assign(__assign({}, systemData), {\n                  app_info: appInfo,\n                  server_action: serverAction\n                }),\n                messageName: messageName || 'SERVER_ACTION'\n              }, true, messageId, {\n                meta: meta\n              });\n            })];\n          case 1:\n            // мету и server_action отправляем в одном systemMessage\n            _a.sent();\n            return [2 /*return*/, messageId];\n        }\n      });\n    });\n  };\n  /** отправляет текст и текущую мету */\n  var sendText = function sendText(text, isSsml, shouldSendDisableDubbing) {\n    if (isSsml === void 0) {\n      isSsml = false;\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (text.trim() === '') {\n          return [2 /*return*/, undefined];\n        }\n        return [2 /*return*/, protocol.batch(function (_a) {\n          var sendSystemMessage = _a.sendSystemMessage,\n            clientSendText = _a.sendText,\n            sendSettings = _a.sendSettings,\n            messageId = _a.messageId;\n          return __awaiter(void 0, void 0, void 0, function () {\n            var prevDubbing, sendDisableDubbing, isStillNeedReturnDubbing;\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  return [4 /*yield*/, sendMeta(sendSystemMessage)];\n                case 1:\n                  _b.sent();\n                  prevDubbing = protocol.configuration.settings.dubbing;\n                  sendDisableDubbing = prevDubbing !== -1 && shouldSendDisableDubbing;\n                  if (!sendDisableDubbing) return [3 /*break*/, 3];\n                  return [4 /*yield*/, sendSettings({\n                    dubbing: -1\n                  }, false)];\n                case 2:\n                  _b.sent();\n                  _b.label = 3;\n                case 3:\n                  isSsml ? clientSendText(text, {}, 'application/ssml') : clientSendText(text, {});\n                  isStillNeedReturnDubbing = prevDubbing === protocol.configuration.settings.dubbing;\n                  if (sendDisableDubbing && isStillNeedReturnDubbing) {\n                    sendSettings({\n                      dubbing: prevDubbing\n                    });\n                  }\n                  return [2 /*return*/, messageId];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  /** инициализирует исходящий голосовой поток, факт. передает в callback параметры для отправки голоса,\n   * отправляет мету */\n  var createVoiceStream = function createVoiceStream(callback) {\n    return protocol.batch(function (_a) {\n      var sendSystemMessage = _a.sendSystemMessage,\n        sendVoice = _a.sendVoice,\n        messageId = _a.messageId;\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4 /*yield*/, sendMeta(sendSystemMessage)];\n            case 1:\n              _b.sent();\n              return [4 /*yield*/, callback({\n                sendVoice: sendVoice,\n                messageId: messageId,\n                onMessage: function onMessage(cb) {\n                  return protocol.on('incoming', cb);\n                }\n              })];\n            case 2:\n              _b.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  var off = protocol.on('incoming', function (message) {\n    var _a, _b, _c;\n    if (message.voice) {\n      emit('voice', message.voice.data || new Uint8Array(), message);\n    }\n    if ((_a = message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n      emit('systemMessage', JSON.parse(message.systemMessage.data), message);\n    }\n    if (message.status) {\n      emit('status', message.status, message);\n    }\n    if (message.messageName === 'TAKE_HISTORY' && ((_b = message.bytes) === null || _b === void 0 ? void 0 : _b.data)) {\n      var history_1 = proto.GetHistoryResponse.decode((_c = message.bytes) === null || _c === void 0 ? void 0 : _c.data).historyMessages;\n      var parsedHistory = history_1.map(function (historyMessage) {\n        return __assign(__assign({}, historyMessage), {\n          content: JSON.parse(historyMessage.content || '')\n        });\n      });\n      emit('history', parsedHistory, message);\n    }\n  });\n  return {\n    destroy: function destroy() {\n      off();\n    },\n    init: protocol.init,\n    createVoiceStream: createVoiceStream,\n    sendData: sendData,\n    sendMeta: sendMeta,\n    sendOpenAssistant: sendOpenAssistant,\n    sendServerAction: sendServerAction,\n    sendText: sendText,\n    sendCancel: sendCancel,\n    on: on,\n    waitForAnswer: waitForAnswer\n  };\n};\nvar createClientMethods = function createClientMethods(_a) {\n  var getMessageId = _a.getMessageId,\n    sendMessage = _a.sendMessage;\n  var send = function send(_a) {\n    var payload = _a.payload,\n      messageId = _a.messageId,\n      other = __rest(_a, [\"payload\", \"messageId\"]);\n    sendMessage(__assign(__assign(__assign({\n      messageName: ''\n    }, payload), {\n      messageId: messageId\n    }), other));\n  };\n  var sendDevice = function sendDevice(data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        device: proto.Device.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendInitialSettings = function sendInitialSettings(data, last, messageId, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        initialSettings: proto.InitialSettings.create(data),\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var getHistoryRequest = function getHistoryRequest(data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var uuid = data.uuid,\n      device = data.device,\n      historyClient = data.history;\n    var historyProto = {\n      messageTypes: historyClient === null || historyClient === void 0 ? void 0 : historyClient.messageTypes\n    };\n    // Мапим объект настроек от пользователя в формат объекта протобафа\n    if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.app) {\n      historyProto.app = Object.entries(historyClient.app).reduce(function (acc, _a) {\n        var _b;\n        var key = _a[0],\n          value = _a[1];\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = {\n          value: value\n        }, _b));\n      }, {});\n    }\n    if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.offset) {\n      historyProto.offset = Object.entries(historyClient.offset).reduce(function (acc, _a) {\n        var _b;\n        var key = _a[0],\n          value = _a[1];\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = {\n          value: value.toString()\n        }, _b));\n      }, {});\n    }\n    return send({\n      payload: __assign(__assign({}, proto.ChatHistoryRequest.create({\n        uuid: uuid,\n        device: device,\n        getHistoryRequest: historyProto\n      })), {\n        messageName: 'GET_HISTORY',\n        last: last ? 1 : -1\n      }),\n      messageId: messageId\n    });\n  };\n  var sendCancel = function sendCancel(data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        cancel: proto.Cancel.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendLegacyDevice = function sendLegacyDevice(data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        legacyDevice: proto.LegacyDevice.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendSettings = function sendSettings(data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        settings: proto.Settings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendText = function sendText(data, params, type, messageId) {\n    var _a;\n    if (params === void 0) {\n      params = {};\n    }\n    if (type === void 0) {\n      type = '';\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var text = type ? {\n      data: data,\n      type: type\n    } : {\n      data: data\n    };\n    send(__assign({\n      payload: {\n        text: proto.Text.create(text),\n        last: (_a = params.last) !== null && _a !== void 0 ? _a : 1\n      },\n      messageId: messageId\n    }, params));\n  };\n  var sendSystemMessage = function sendSystemMessage(_a, last, messageId, params) {\n    var data = _a.data,\n      _b = _a.messageName,\n      mesName = _b === void 0 ? '' : _b;\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    send({\n      payload: __assign({\n        systemMessage: proto.SystemMessage.create({\n          data: JSON.stringify(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var sendVoice = function sendVoice(data, last, messageId, mesName, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        voice: proto.Voice.create({\n          data: new Uint8Array(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var batch = function batch(cb) {\n    var batchingMessageId = getMessageId();\n    var lastMessageSent = false;\n    var checkLastMessageStatus = function checkLastMessageStatus(last) {\n      if (lastMessageSent) {\n        if (last) {\n          throw new Error(\"Can't send two last items in batch\");\n        } else {\n          throw new Error(\"Can't send messages in batch after last message have been sent\");\n        }\n      } else if (last) {\n        lastMessageSent = true;\n      }\n    };\n    var upgradedSendText = function upgradedSendText() {\n      var _a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        _a[_i] = arguments[_i];\n      }\n      var data = _a[0],\n        params = _a[1],\n        type = _a[2];\n      checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n      return sendText(data, params, type, batchingMessageId);\n    };\n    var upgradedSendSystemMessage = function upgradedSendSystemMessage(data, last, params) {\n      checkLastMessageStatus(last);\n      return sendSystemMessage(data, last, batchingMessageId, params);\n    };\n    var upgradedSendVoice = function upgradedSendVoice(data, last, mesName, params) {\n      checkLastMessageStatus(last);\n      return sendVoice(data, last, batchingMessageId, mesName, params);\n    };\n    var upgradedSendSettings = function upgradedSendSettings(data, last, messageId) {\n      checkLastMessageStatus(last);\n      return sendSettings(data, last, messageId);\n    };\n    return cb({\n      sendText: upgradedSendText,\n      sendSystemMessage: upgradedSendSystemMessage,\n      sendVoice: upgradedSendVoice,\n      sendSettings: upgradedSendSettings,\n      messageId: batchingMessageId\n    });\n  };\n  return {\n    sendDevice: sendDevice,\n    sendInitialSettings: sendInitialSettings,\n    getHistoryRequest: getHistoryRequest,\n    sendCancel: sendCancel,\n    sendLegacyDevice: sendLegacyDevice,\n    sendSettings: sendSettings,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    batch: batch\n  };\n};\nvar safeJSONParse = function safeJSONParse(str, defaultValue) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return defaultValue;\n  }\n};\nvar compileBasePayload = function compileBasePayload(_a) {\n  var userId = _a.userId,\n    token = _a.token,\n    userChannel = _a.userChannel,\n    version = _a.version,\n    messageName = _a.messageName,\n    vpsToken = _a.vpsToken;\n  if (version < 3) {\n    return {\n      userId: userId,\n      token: token,\n      userChannel: userChannel,\n      messageName: messageName,\n      vpsToken: vpsToken,\n      version: version\n    };\n  }\n  return {\n    token: token,\n    messageName: messageName,\n    version: version\n  };\n};\nvar appendHeader = function appendHeader(uint8Array) {\n  // Добавляем 4 байта в начало с длинной сообщения\n  var arrayBuffer = new ArrayBuffer(4);\n  var dataView = new DataView(arrayBuffer, 0);\n  dataView.setInt32(0, uint8Array.length, true);\n  var newUint8Array = new Uint8Array(4 + uint8Array.length);\n  newUint8Array.set(new Uint8Array(arrayBuffer));\n  newUint8Array.set(uint8Array, 4);\n  return newUint8Array;\n};\nvar removeHeader = function removeHeader(uint8Array) {\n  // Убираем 4 байта в начале с длинной сообщения\n  var newUint8Array = new Uint8Array(uint8Array).slice(4);\n  return newUint8Array;\n};\nvar createProtocol = function createProtocol(transport, _a) {\n  var logger = _a.logger,\n    getToken = _a.getToken,\n    params = __rest(_a, [\"logger\", \"getToken\"]);\n  var configuration = __assign(__assign({}, params), {\n    token: ''\n  });\n  var url = configuration.url,\n    userId = configuration.userId,\n    userChannel = configuration.userChannel,\n    locale = configuration.locale,\n    device = configuration.device,\n    settings = configuration.settings,\n    legacyDevice = configuration.legacyDevice,\n    version = configuration.version,\n    messageName = configuration.messageName,\n    vpsToken = configuration.vpsToken,\n    meta = configuration.meta;\n  var basePayload = compileBasePayload({\n    userId: userId,\n    token: '',\n    messageName: messageName,\n    vpsToken: vpsToken,\n    userChannel: userChannel,\n    version: version\n  });\n  var _b = createNanoEvents(),\n    on = _b.on,\n    emit = _b.emit;\n  var subscriptions = [];\n  var messageQueue = [];\n  var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n  var currentSettings = {\n    device: device,\n    legacyDevice: legacyDevice,\n    settings: settings,\n    locale: locale\n  };\n  var currentMessageId = Date.now();\n  var status = 'closed';\n  var destroyed = false;\n  var clearReadyTimer; // ид таймера установки состояния ready\n  var cancelUpdatingSettingsWhenSocketReady = function cancelUpdatingSettingsWhenSocketReady() {}; // отменяет обновление настроек VPS при готовности сокета\n  var getMessageId = function getMessageId() {\n    return currentMessageId++;\n  };\n  var send = function send(message) {\n    var createdMessage = proto.Message.create(__assign(__assign({}, basePayload), message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'outcoming',\n      message: createdMessage\n    });\n    var encodedMessage = proto.Message.encode(createdMessage).finish();\n    var encodedMessageWithHeader = appendHeader(encodedMessage);\n    transport.send(encodedMessageWithHeader);\n    emit('outcoming', createdMessage);\n  };\n  var sendMessage = function sendMessage(message) {\n    // отправляем инициализационные сообщения или все, когда сессия = ready\n    if (status === 'ready' || typeof initMessageId !== undefined && message.messageId === initMessageId) {\n      send(message);\n      return;\n    }\n    // накапливаем сообщения, отправим после успешного коннекта\n    messageQueue.push(message);\n    if (status === 'closed' && !destroyed) {\n      transport.open(url);\n    }\n  };\n  var _c = createClientMethods({\n      getMessageId: getMessageId,\n      sendMessage: sendMessage\n    }),\n    sendDeviceOriginal = _c.sendDevice,\n    sendInitialSettingsOriginal = _c.sendInitialSettings,\n    getHistoryRequestOriginal = _c.getHistoryRequest,\n    sendCancel = _c.sendCancel,\n    sendLegacyDeviceOriginal = _c.sendLegacyDevice,\n    sendSettingsOriginal = _c.sendSettings,\n    sendText = _c.sendText,\n    sendSystemMessage = _c.sendSystemMessage,\n    sendVoice = _c.sendVoice,\n    batch = _c.batch;\n  var sendDevice = function sendDevice(data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      device: data\n    });\n    return sendDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n  var sendInitialSettings = function sendInitialSettings(data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (data.device && data.settings) {\n      currentSettings = __assign(__assign({}, currentSettings), {\n        device: data.device,\n        settings: data.settings,\n        locale: data.locale || undefined\n      });\n    }\n    return sendInitialSettingsOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n  var getHistoryRequest = function getHistoryRequest(data) {\n    var _a, _b;\n    return getHistoryRequestOriginal({\n      device: currentSettings.device || null,\n      uuid: {\n        userId: ((_a = data.uuid) === null || _a === void 0 ? void 0 : _a.userId) || userId,\n        userChannel: ((_b = data.uuid) === null || _b === void 0 ? void 0 : _b.userChannel) || userChannel\n      },\n      history: __assign({}, data.history || {})\n    });\n  };\n  var sendLegacyDevice = function sendLegacyDevice(data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      legacyDevice: data\n    });\n    return sendLegacyDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n  var updateDefaults = function updateDefaults(obj) {\n    Object.assign(basePayload, obj);\n    Object.assign(configuration, obj);\n  };\n  var updateDevice = function updateDevice(obj) {\n    var _a, _b;\n    if (obj) {\n      var additionalInfo = obj.additionalInfo,\n        deviceOptions = __rest(obj, [\"additionalInfo\"]);\n      var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {}) : {};\n      var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n      currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), {\n        additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo))\n      });\n    }\n  };\n  var updateSettings = function updateSettings(obj) {\n    var isSocketReady = status === 'connected' || status === 'ready';\n    cancelUpdatingSettingsWhenSocketReady();\n    Object.assign(currentSettings.settings, obj);\n    if (!isSocketReady) {\n      cancelUpdatingSettingsWhenSocketReady = on('ready', function () {\n        return updateSettings(obj);\n      });\n      return;\n    }\n    sendSettingsOriginal(obj);\n  };\n  subscriptions.push(transport.on('connecting', function () {\n    status = 'connecting';\n  }));\n  subscriptions.push(transport.on('close', function () {\n    status = 'closed';\n  }));\n  subscriptions.push(transport.on('open', function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a, _b, _c, _d, e_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 2,, 3]);\n            _b = (_a = Object).assign;\n            _c = [basePayload];\n            _d = {};\n            return [4 /*yield*/, getToken()];\n          case 1:\n            _b.apply(_a, _c.concat([(_d.token = _e.sent(), _d)]));\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _e.sent();\n            emit('error', {\n              type: 'GET_TOKEN_ERROR',\n              message: e_1 === null || e_1 === void 0 ? void 0 : e_1.message\n            });\n            return [2 /*return*/];\n          case 3:\n            Object.assign(configuration, {\n              token: basePayload.token\n            });\n            initMessageId = getMessageId();\n            if (version < 3) {\n              if (version === 1 && currentSettings.legacyDevice) {\n                sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n              } else if (version === 2 && currentSettings.device) {\n                sendDevice(currentSettings.device, false, initMessageId);\n              }\n              sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n            } else {\n              sendInitialSettings({\n                userId: userId,\n                userChannel: userChannel,\n                device: currentSettings.device,\n                settings: currentSettings.settings,\n                locale: version > 3 ? currentSettings.locale : undefined\n              }, true, initMessageId, meta);\n            }\n            status = 'connected';\n            clearTimeout(clearReadyTimer);\n            /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n            /// т.к бек может разрывать сокет, если с settings что-то не так\n            clearReadyTimer = window.setTimeout(function () {\n              if (status !== 'connected') {\n                return;\n              }\n              while (messageQueue.length > 0) {\n                var message = messageQueue.shift();\n                if (message) {\n                  send(message);\n                }\n              }\n              status = 'ready';\n              emit('ready');\n            }, 500);\n            logger === null || logger === void 0 ? void 0 : logger({\n              type: 'init',\n              params: __assign(__assign({}, configuration), currentSettings)\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  }));\n\n  subscriptions.push(transport.on('message', function (message) {\n    var decodedMessage = proto.Message.decode(removeHeader(message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'incoming',\n      message: decodedMessage\n    });\n    emit('incoming', decodedMessage);\n    if (decodedMessage.status) {\n      transport.close();\n    }\n  }));\n  return {\n    clearQueue: function clearQueue() {\n      messageQueue.splice(0, messageQueue.length);\n    },\n    destroy: function destroy() {\n      destroyed = true;\n      transport.close();\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    on: on,\n    getHistoryRequest: getHistoryRequest,\n    getMessageId: getMessageId,\n    sendCancel: sendCancel,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    send: sendMessage,\n    batch: batch,\n    changeConfiguration: updateDefaults,\n    changeDevice: updateDevice,\n    changeSettings: updateSettings,\n    reconnect: function reconnect() {\n      if (status !== 'closed') {\n        transport.reconnect(url); // даем время случиться close\n      } else {\n        transport.open(url);\n      }\n    },\n    init: function init() {\n      // в отличии от reconnect не обрывает коннект если он в порядке\n      if (status === 'ready' && window.navigator.onLine) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        var subs = [];\n        subs.push(transport.on('open', function () {\n          subs.map(function (sub) {\n            return sub();\n          });\n          resolve();\n        }));\n        subs.push(transport.on('error', function () {\n          subs.map(function (sub) {\n            return sub();\n          });\n          reject(new Error('Network error'));\n        }));\n        transport.reconnect(url);\n      });\n    },\n    get currentMessageId() {\n      return currentMessageId;\n    },\n    get configuration() {\n      return configuration;\n    }\n  };\n};\nvar RETRY_INTERVAL = 300; // ms\nvar defaultWSCreator = function defaultWSCreator(url) {\n  return new WebSocket(url);\n};\nvar createTransport = function createTransport(createWS) {\n  if (createWS === void 0) {\n    createWS = defaultWSCreator;\n  }\n  var _a = createNanoEvents(),\n    on = _a.on,\n    emit = _a.emit;\n  var retryTimeoutId = -1;\n  var retries = 0;\n  var status = 'closed';\n  var webSocket;\n  var stopped = true;\n  var close = function close() {\n    stopped = true;\n    if (status === 'closing' || status === 'closed') {\n      return;\n    }\n    status = 'closing';\n    webSocket === null || webSocket === void 0 ? void 0 : webSocket.close();\n  };\n  var connect = function connect(url) {\n    status = 'connecting';\n    emit('connecting');\n    webSocket = createWS(url);\n    webSocket.binaryType = 'arraybuffer';\n    webSocket.addEventListener('open', function () {\n      if (webSocket.readyState !== 1) {\n        return;\n      }\n      clearTimeout(retryTimeoutId);\n      retries = 0;\n      status = 'open';\n      emit('open');\n    });\n    webSocket.addEventListener('close', function () {\n      status = 'closed';\n      emit('close');\n    });\n    webSocket.addEventListener('error', function (e) {\n      if (status !== 'connecting') {\n        throw e;\n      }\n      // пробуем переподключаться, если возникла ошибка при коннекте\n      if (!webSocket || webSocket.readyState === 3 && !stopped) {\n        clearTimeout(retryTimeoutId);\n        if (retries < 2) {\n          retryTimeoutId = window.setTimeout(function () {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            open(url);\n            retries++;\n          }, RETRY_INTERVAL * retries);\n        } else {\n          retries = 0;\n          emit('error', e);\n        }\n      }\n    });\n    webSocket.addEventListener('message', function (_a) {\n      var data = _a.data;\n      emit('message', data);\n    });\n  };\n  var open = function open(url) {\n    if (status === 'connecting' || status === 'open') {\n      return;\n    }\n    stopped = false;\n    connect(url);\n  };\n  var reconnect = function reconnect(url) {\n    if (status === 'closed') {\n      open(url);\n      return;\n    }\n    setTimeout(function () {\n      return reconnect(url);\n    });\n    close();\n  };\n  var send = function send(data) {\n    webSocket.send(data);\n  };\n  return {\n    close: close,\n    get isOnline() {\n      return window.navigator.onLine;\n    },\n    on: on,\n    open: open,\n    reconnect: reconnect,\n    send: send\n  };\n};\nvar convertToMetaPermissions = function convertToMetaPermissions(permission) {\n  return Object.keys(permission).map(function (key) {\n    return {\n      type: key,\n      status: permission[key]\n    };\n  });\n};\nvar getLocation = function getLocation() {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(function (_a) {\n          var coords = _a.coords,\n            timestamp = _a.timestamp;\n          resolve({\n            lat: coords.latitude,\n            lon: coords.longitude,\n            accuracy: coords.accuracy,\n            timestamp: timestamp\n          });\n        }, reject, {\n          timeout: 5000\n        });\n      })];\n    });\n  });\n};\nvar getTime = function getTime() {\n  return {\n    // Здесь нужен полифилл, т.к. `Intl.DateTimeFormat().resolvedOptions().timeZone` - возвращает пустую строку\n    timezone_id: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    timezone_offset_sec: -new Date().getTimezoneOffset() * 60,\n    timestamp: Date.now()\n  };\n};\nvar getAnswerForRequestPermissions = function getAnswerForRequestPermissions(requestMessageId, appInfo, items) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var permissions, response;\n    return __generator(this, function (_a) {\n      permissions = {\n        record_audio: 'denied_once',\n        geo: 'denied_once',\n        read_contacts: 'denied_permanently',\n        push: 'denied_once'\n      };\n      response = {\n        app_info: appInfo,\n        meta: {\n          time: getTime(),\n          permissions: []\n        },\n        server_action: {\n          action_id: 'command_response',\n          request_message_id: requestMessageId,\n          command_response: {\n            request_permissions: {\n              permissions: []\n            }\n          }\n        }\n      };\n      return [2 /*return*/, Promise.all(items.map(function (permission) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var _a, location_1, _b;\n          var _c, _d, _e;\n          return __generator(this, function (_f) {\n            switch (_f.label) {\n              case 0:\n                _a = permission;\n                switch (_a) {\n                  case 'geo':\n                    return [3 /*break*/, 1];\n                }\n                return [3 /*break*/, 5];\n              case 1:\n                _f.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, getLocation()];\n              case 2:\n                location_1 = _f.sent();\n                permissions.geo = 'granted';\n                response.meta.location = location_1;\n                (_c = response.server_action.command_response.request_permissions) === null || _c === void 0 ? void 0 : _c.permissions.push({\n                  type: 'geo',\n                  status: 'granted'\n                });\n                return [3 /*break*/, 4];\n              case 3:\n                _b = _f.sent();\n                permissions.geo = 'denied_permanently';\n                (_d = response.server_action.command_response.request_permissions) === null || _d === void 0 ? void 0 : _d.permissions.push({\n                  type: 'geo',\n                  status: 'denied_permanently'\n                });\n                return [3 /*break*/, 4];\n              case 4:\n                return [3 /*break*/, 6];\n              case 5:\n                // остальные доступы не поддерживаем\n                (_e = response.server_action.command_response.request_permissions) === null || _e === void 0 ? void 0 : _e.permissions.push({\n                  type: permission,\n                  status: 'denied_permanently'\n                });\n                return [3 /*break*/, 6];\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      })).then(function () {\n        response.meta.permissions = convertToMetaPermissions(permissions);\n        return response;\n      })];\n    });\n  });\n};\nvar mtt = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Music2TrackProtocol = function () {\n      /**\n       * Namespace Music2TrackProtocol.\n       * @exports Music2TrackProtocol\n       * @namespace\n       */\n      var Music2TrackProtocol = {};\n      Music2TrackProtocol.DecoderResult = function () {\n        /**\n         * Properties of a DecoderResult.\n         * @memberof Music2TrackProtocol\n         * @interface IDecoderResult\n         * @property {string|null} [result] DecoderResult result\n         * @property {boolean|null} [isMusicFound] DecoderResult isMusicFound\n         * @property {boolean|null} [isFinal] DecoderResult isFinal\n         */\n\n        /**\n         * Constructs a new DecoderResult.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents a DecoderResult.\n         * @implements IDecoderResult\n         * @constructor\n         * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n         */\n        function DecoderResult(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DecoderResult result.\n         * @member {string} result\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.result = \"\";\n\n        /**\n         * DecoderResult isMusicFound.\n         * @member {boolean} isMusicFound\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isMusicFound = false;\n\n        /**\n         * DecoderResult isFinal.\n         * @member {boolean} isFinal\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isFinal = false;\n\n        /**\n         * Creates a new DecoderResult instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult instance\n         */\n        DecoderResult.create = function create(properties) {\n          return new DecoderResult(properties);\n        };\n\n        /**\n         * Encodes the specified DecoderResult message. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.result != null && Object.hasOwnProperty.call(message, \"result\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.result);\n          if (message.isMusicFound != null && Object.hasOwnProperty.call(message, \"isMusicFound\")) writer.uint32( /* id 2, wireType 0 =*/16).bool(message.isMusicFound);\n          if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\")) writer.uint32( /* id 3, wireType 0 =*/24).bool(message.isFinal);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Music2TrackProtocol.DecoderResult();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.result = reader.string();\n                break;\n              case 2:\n                message.isMusicFound = reader.bool();\n                break;\n              case 3:\n                message.isFinal = reader.bool();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DecoderResult message.\n         * @function verify\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecoderResult.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.result != null && message.hasOwnProperty(\"result\")) if (!$util.isString(message.result)) return \"result: string expected\";\n          if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\")) if (typeof message.isMusicFound !== \"boolean\") return \"isMusicFound: boolean expected\";\n          if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) if (typeof message.isFinal !== \"boolean\") return \"isFinal: boolean expected\";\n          return null;\n        };\n\n        /**\n         * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         */\n        DecoderResult.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.DecoderResult) return object;\n          var message = new $root.Music2TrackProtocol.DecoderResult();\n          if (object.result != null) message.result = String(object.result);\n          if (object.isMusicFound != null) message.isMusicFound = Boolean(object.isMusicFound);\n          if (object.isFinal != null) message.isFinal = Boolean(object.isFinal);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.DecoderResult} message DecoderResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecoderResult.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.result = \"\";\n            object.isMusicFound = false;\n            object.isFinal = false;\n          }\n          if (message.result != null && message.hasOwnProperty(\"result\")) object.result = message.result;\n          if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\")) object.isMusicFound = message.isMusicFound;\n          if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) object.isFinal = message.isFinal;\n          return object;\n        };\n\n        /**\n         * Converts this DecoderResult to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecoderResult.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return DecoderResult;\n      }();\n      Music2TrackProtocol.ErrorResponse = function () {\n        /**\n         * Properties of an ErrorResponse.\n         * @memberof Music2TrackProtocol\n         * @interface IErrorResponse\n         * @property {string|null} [errorMessage] ErrorResponse errorMessage\n         * @property {number|null} [errorCode] ErrorResponse errorCode\n         */\n\n        /**\n         * Constructs a new ErrorResponse.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ErrorResponse errorMessage.\n         * @member {string} errorMessage\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorMessage = \"\";\n\n        /**\n         * ErrorResponse errorCode.\n         * @member {number} errorCode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorCode = 0;\n\n        /**\n         * Creates a new ErrorResponse instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse instance\n         */\n        ErrorResponse.create = function create(properties) {\n          return new ErrorResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ErrorResponse message. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.errorMessage);\n          if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.errorCode);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Music2TrackProtocol.ErrorResponse();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.errorMessage = reader.string();\n                break;\n              case 2:\n                message.errorCode = reader.int32();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ErrorResponse message.\n         * @function verify\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ErrorResponse.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) if (!$util.isString(message.errorMessage)) return \"errorMessage: string expected\";\n          if (message.errorCode != null && message.hasOwnProperty(\"errorCode\")) if (!$util.isInteger(message.errorCode)) return \"errorCode: integer expected\";\n          return null;\n        };\n\n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         */\n        ErrorResponse.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.ErrorResponse) return object;\n          var message = new $root.Music2TrackProtocol.ErrorResponse();\n          if (object.errorMessage != null) message.errorMessage = String(object.errorMessage);\n          if (object.errorCode != null) message.errorCode = object.errorCode | 0;\n          return message;\n        };\n\n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrorResponse.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.errorMessage = \"\";\n            object.errorCode = 0;\n          }\n          if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) object.errorMessage = message.errorMessage;\n          if (message.errorCode != null && message.hasOwnProperty(\"errorCode\")) object.errorCode = message.errorCode;\n          return object;\n        };\n\n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrorResponse.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return ErrorResponse;\n      }();\n      Music2TrackProtocol.MttResponse = function () {\n        /**\n         * Properties of a MttResponse.\n         * @memberof Music2TrackProtocol\n         * @interface IMttResponse\n         * @property {Music2TrackProtocol.IDecoderResult|null} [decoderResultField] MttResponse decoderResultField\n         * @property {Music2TrackProtocol.IErrorResponse|null} [errorResponse] MttResponse errorResponse\n         */\n\n        /**\n         * Constructs a new MttResponse.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents a MttResponse.\n         * @implements IMttResponse\n         * @constructor\n         * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n         */\n        function MttResponse(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * MttResponse decoderResultField.\n         * @member {Music2TrackProtocol.IDecoderResult|null|undefined} decoderResultField\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n        MttResponse.prototype.decoderResultField = null;\n\n        /**\n         * MttResponse errorResponse.\n         * @member {Music2TrackProtocol.IErrorResponse|null|undefined} errorResponse\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n        MttResponse.prototype.errorResponse = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * MttResponse MessageType.\n         * @member {\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n        Object.defineProperty(MttResponse.prototype, \"MessageType\", {\n          get: $util.oneOfGetter($oneOfFields = [\"decoderResultField\", \"errorResponse\"]),\n          set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new MttResponse instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse instance\n         */\n        MttResponse.create = function create(properties) {\n          return new MttResponse(properties);\n        };\n\n        /**\n         * Encodes the specified MttResponse message. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MttResponse.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\")) $root.Music2TrackProtocol.DecoderResult.encode(message.decoderResultField, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\")) $root.Music2TrackProtocol.ErrorResponse.encode(message.errorResponse, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified MttResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MttResponse.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a MttResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MttResponse.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Music2TrackProtocol.MttResponse();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.decode(reader, reader.uint32());\n                break;\n              case 2:\n                message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.decode(reader, reader.uint32());\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a MttResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MttResponse.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a MttResponse message.\n         * @function verify\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        MttResponse.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          var properties = {};\n          if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n            properties.MessageType = 1;\n            {\n              var error = $root.Music2TrackProtocol.DecoderResult.verify(message.decoderResultField);\n              if (error) return \"decoderResultField.\" + error;\n            }\n          }\n          if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n            if (properties.MessageType === 1) return \"MessageType: multiple values\";\n            properties.MessageType = 1;\n            {\n              var error = $root.Music2TrackProtocol.ErrorResponse.verify(message.errorResponse);\n              if (error) return \"errorResponse.\" + error;\n            }\n          }\n          return null;\n        };\n\n        /**\n         * Creates a MttResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         */\n        MttResponse.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.MttResponse) return object;\n          var message = new $root.Music2TrackProtocol.MttResponse();\n          if (object.decoderResultField != null) {\n            if (typeof object.decoderResultField !== \"object\") throw TypeError(\".Music2TrackProtocol.MttResponse.decoderResultField: object expected\");\n            message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.fromObject(object.decoderResultField);\n          }\n          if (object.errorResponse != null) {\n            if (typeof object.errorResponse !== \"object\") throw TypeError(\".Music2TrackProtocol.MttResponse.errorResponse: object expected\");\n            message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.fromObject(object.errorResponse);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a MttResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.MttResponse} message MttResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MttResponse.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n            object.decoderResultField = $root.Music2TrackProtocol.DecoderResult.toObject(message.decoderResultField, options);\n            if (options.oneofs) object.MessageType = \"decoderResultField\";\n          }\n          if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n            object.errorResponse = $root.Music2TrackProtocol.ErrorResponse.toObject(message.errorResponse, options);\n            if (options.oneofs) object.MessageType = \"errorResponse\";\n          }\n          return object;\n        };\n\n        /**\n         * Converts this MttResponse to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MttResponse.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return MttResponse;\n      }();\n      return Music2TrackProtocol;\n    }();\n    return $root;\n  });\n});\nvar createMusicRecognizer = function createMusicRecognizer(voiceListener) {\n  var off;\n  var status = 'inactive';\n  var currentMessageId;\n  var stop = function stop() {\n    if (voiceListener.status !== 'stopped') {\n      status = 'inactive';\n      voiceListener.stop();\n    }\n  };\n  var start = function start(_a) {\n    var sendVoice = _a.sendVoice,\n      messageId = _a.messageId,\n      onMessage = _a.onMessage;\n    return voiceListener.listen(function (data, last) {\n      return !last && sendVoice(data, last, MessageNames.MUSIC_RECOGNITION);\n    }).then(function () {\n      status = 'active';\n      currentMessageId = messageId;\n      off = onMessage(function (message) {\n        var _a, _b;\n        if (message.status && message.status.code != null && message.status.code < 0) {\n          off();\n          stop();\n        }\n        if (message.messageId === messageId && message.messageName.toUpperCase() === MessageNames.MUSIC_RECOGNITION) {\n          if (!((_b = (_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {\n            return;\n          }\n          var _c = mtt.Music2TrackProtocol.MttResponse.decode(message.bytes.data),\n            decoderResultField = _c.decoderResultField,\n            errorResponse = _c.errorResponse;\n          if ((decoderResultField === null || decoderResultField === void 0 ? void 0 : decoderResultField.isFinal) || errorResponse) {\n            off();\n            stop();\n          }\n        }\n      });\n    });\n  };\n  return {\n    start: start,\n    stop: stop,\n    get status() {\n      return status;\n    },\n    get messageId() {\n      return currentMessageId;\n    }\n  };\n};\nvar asr = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Variables = function () {\n      /**\n       * Properties of a Variables.\n       * @exports IVariables\n       * @interface IVariables\n       * @property {Object.<string,string>|null} [variables] Variables variables\n       */\n\n      /**\n       * Constructs a new Variables.\n       * @exports Variables\n       * @classdesc Represents a Variables.\n       * @implements IVariables\n       * @constructor\n       * @param {IVariables=} [properties] Properties to set\n       */\n      function Variables(properties) {\n        this.variables = {};\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Variables variables.\n       * @member {Object.<string,string>} variables\n       * @memberof Variables\n       * @instance\n       */\n      Variables.prototype.variables = $util.emptyObject;\n\n      /**\n       * Creates a new Variables instance using the specified properties.\n       * @function create\n       * @memberof Variables\n       * @static\n       * @param {IVariables=} [properties] Properties to set\n       * @returns {Variables} Variables instance\n       */\n      Variables.create = function create(properties) {\n        return new Variables(properties);\n      };\n\n      /**\n       * Encodes the specified Variables message. Does not implicitly {@link Variables.verify|verify} messages.\n       * @function encode\n       * @memberof Variables\n       * @static\n       * @param {IVariables} message Variables message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Variables.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Variables message, length delimited. Does not implicitly {@link Variables.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Variables\n       * @static\n       * @param {IVariables} message Variables message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Variables.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Variables message from the specified reader or buffer.\n       * @function decode\n       * @memberof Variables\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Variables} Variables\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Variables.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Variables(),\n          key,\n          value;\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (message.variables === $util.emptyObject) message.variables = {};\n              var end2 = reader.uint32() + reader.pos;\n              key = \"\";\n              value = \"\";\n              while (reader.pos < end2) {\n                var tag2 = reader.uint32();\n                switch (tag2 >>> 3) {\n                  case 1:\n                    key = reader.string();\n                    break;\n                  case 2:\n                    value = reader.string();\n                    break;\n                  default:\n                    reader.skipType(tag2 & 7);\n                    break;\n                }\n              }\n              message.variables[key] = value;\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Variables message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Variables\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Variables} Variables\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Variables.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Variables message.\n       * @function verify\n       * @memberof Variables\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Variables.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n          if (!$util.isObject(message.variables)) return \"variables: object expected\";\n          var key = Object.keys(message.variables);\n          for (var i = 0; i < key.length; ++i) if (!$util.isString(message.variables[key[i]])) return \"variables: string{k:string} expected\";\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Variables message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Variables\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Variables} Variables\n       */\n      Variables.fromObject = function fromObject(object) {\n        if (object instanceof $root.Variables) return object;\n        var message = new $root.Variables();\n        if (object.variables) {\n          if (typeof object.variables !== \"object\") throw TypeError(\".Variables.variables: object expected\");\n          message.variables = {};\n          for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i) message.variables[keys[i]] = String(object.variables[keys[i]]);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Variables message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Variables\n       * @static\n       * @param {Variables} message Variables\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Variables.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.objects || options.defaults) object.variables = {};\n        var keys2;\n        if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n          object.variables = {};\n          for (var j = 0; j < keys2.length; ++j) object.variables[keys2[j]] = message.variables[keys2[j]];\n        }\n        return object;\n      };\n\n      /**\n       * Converts this Variables to JSON.\n       * @function toJSON\n       * @memberof Variables\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Variables.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Variables;\n    }();\n    $root.UndecodedSeconds = function () {\n      /**\n       * Properties of an UndecodedSeconds.\n       * @exports IUndecodedSeconds\n       * @interface IUndecodedSeconds\n       * @property {number|null} [undecodedSeconds] UndecodedSeconds undecodedSeconds\n       */\n\n      /**\n       * Constructs a new UndecodedSeconds.\n       * @exports UndecodedSeconds\n       * @classdesc Represents an UndecodedSeconds.\n       * @implements IUndecodedSeconds\n       * @constructor\n       * @param {IUndecodedSeconds=} [properties] Properties to set\n       */\n      function UndecodedSeconds(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * UndecodedSeconds undecodedSeconds.\n       * @member {number} undecodedSeconds\n       * @memberof UndecodedSeconds\n       * @instance\n       */\n      UndecodedSeconds.prototype.undecodedSeconds = 0;\n\n      /**\n       * Creates a new UndecodedSeconds instance using the specified properties.\n       * @function create\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds=} [properties] Properties to set\n       * @returns {UndecodedSeconds} UndecodedSeconds instance\n       */\n      UndecodedSeconds.create = function create(properties) {\n        return new UndecodedSeconds(properties);\n      };\n\n      /**\n       * Encodes the specified UndecodedSeconds message. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n       * @function encode\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      UndecodedSeconds.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.undecodedSeconds != null && Object.hasOwnProperty.call(message, \"undecodedSeconds\")) writer.uint32( /* id 1, wireType 5 =*/13).float(message.undecodedSeconds);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified UndecodedSeconds message, length delimited. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      UndecodedSeconds.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an UndecodedSeconds message from the specified reader or buffer.\n       * @function decode\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      UndecodedSeconds.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.UndecodedSeconds();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.undecodedSeconds = reader.float();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an UndecodedSeconds message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      UndecodedSeconds.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an UndecodedSeconds message.\n       * @function verify\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      UndecodedSeconds.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\")) if (typeof message.undecodedSeconds !== \"number\") return \"undecodedSeconds: number expected\";\n        return null;\n      };\n\n      /**\n       * Creates an UndecodedSeconds message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       */\n      UndecodedSeconds.fromObject = function fromObject(object) {\n        if (object instanceof $root.UndecodedSeconds) return object;\n        var message = new $root.UndecodedSeconds();\n        if (object.undecodedSeconds != null) message.undecodedSeconds = Number(object.undecodedSeconds);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an UndecodedSeconds message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {UndecodedSeconds} message UndecodedSeconds\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      UndecodedSeconds.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.undecodedSeconds = 0;\n        if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\")) object.undecodedSeconds = options.json && !isFinite(message.undecodedSeconds) ? String(message.undecodedSeconds) : message.undecodedSeconds;\n        return object;\n      };\n\n      /**\n       * Converts this UndecodedSeconds to JSON.\n       * @function toJSON\n       * @memberof UndecodedSeconds\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      UndecodedSeconds.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return UndecodedSeconds;\n    }();\n    $root.FullyFinalized = function () {\n      /**\n       * Properties of a FullyFinalized.\n       * @exports IFullyFinalized\n       * @interface IFullyFinalized\n       */\n\n      /**\n       * Constructs a new FullyFinalized.\n       * @exports FullyFinalized\n       * @classdesc Represents a FullyFinalized.\n       * @implements IFullyFinalized\n       * @constructor\n       * @param {IFullyFinalized=} [properties] Properties to set\n       */\n      function FullyFinalized(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new FullyFinalized instance using the specified properties.\n       * @function create\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized=} [properties] Properties to set\n       * @returns {FullyFinalized} FullyFinalized instance\n       */\n      FullyFinalized.create = function create(properties) {\n        return new FullyFinalized(properties);\n      };\n\n      /**\n       * Encodes the specified FullyFinalized message. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n       * @function encode\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FullyFinalized.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified FullyFinalized message, length delimited. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FullyFinalized.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a FullyFinalized message from the specified reader or buffer.\n       * @function decode\n       * @memberof FullyFinalized\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {FullyFinalized} FullyFinalized\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FullyFinalized.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.FullyFinalized();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a FullyFinalized message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof FullyFinalized\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {FullyFinalized} FullyFinalized\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FullyFinalized.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a FullyFinalized message.\n       * @function verify\n       * @memberof FullyFinalized\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      FullyFinalized.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        return null;\n      };\n\n      /**\n       * Creates a FullyFinalized message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof FullyFinalized\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {FullyFinalized} FullyFinalized\n       */\n      FullyFinalized.fromObject = function fromObject(object) {\n        if (object instanceof $root.FullyFinalized) return object;\n        return new $root.FullyFinalized();\n      };\n\n      /**\n       * Creates a plain object from a FullyFinalized message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof FullyFinalized\n       * @static\n       * @param {FullyFinalized} message FullyFinalized\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      FullyFinalized.toObject = function toObject() {\n        return {};\n      };\n\n      /**\n       * Converts this FullyFinalized to JSON.\n       * @function toJSON\n       * @memberof FullyFinalized\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      FullyFinalized.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return FullyFinalized;\n    }();\n    $root.EmotionResult = function () {\n      /**\n       * Properties of an EmotionResult.\n       * @exports IEmotionResult\n       * @interface IEmotionResult\n       * @property {string|null} [name] EmotionResult name\n       * @property {number|null} [confidence] EmotionResult confidence\n       */\n\n      /**\n       * Constructs a new EmotionResult.\n       * @exports EmotionResult\n       * @classdesc Represents an EmotionResult.\n       * @implements IEmotionResult\n       * @constructor\n       * @param {IEmotionResult=} [properties] Properties to set\n       */\n      function EmotionResult(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * EmotionResult name.\n       * @member {string} name\n       * @memberof EmotionResult\n       * @instance\n       */\n      EmotionResult.prototype.name = \"\";\n\n      /**\n       * EmotionResult confidence.\n       * @member {number} confidence\n       * @memberof EmotionResult\n       * @instance\n       */\n      EmotionResult.prototype.confidence = 0;\n\n      /**\n       * Creates a new EmotionResult instance using the specified properties.\n       * @function create\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult=} [properties] Properties to set\n       * @returns {EmotionResult} EmotionResult instance\n       */\n      EmotionResult.create = function create(properties) {\n        return new EmotionResult(properties);\n      };\n\n      /**\n       * Encodes the specified EmotionResult message. Does not implicitly {@link EmotionResult.verify|verify} messages.\n       * @function encode\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult} message EmotionResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      EmotionResult.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n        if (message.confidence != null && Object.hasOwnProperty.call(message, \"confidence\")) writer.uint32( /* id 2, wireType 5 =*/21).float(message.confidence);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified EmotionResult message, length delimited. Does not implicitly {@link EmotionResult.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult} message EmotionResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      EmotionResult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an EmotionResult message from the specified reader or buffer.\n       * @function decode\n       * @memberof EmotionResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {EmotionResult} EmotionResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      EmotionResult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.EmotionResult();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.name = reader.string();\n              break;\n            case 2:\n              message.confidence = reader.float();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an EmotionResult message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof EmotionResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {EmotionResult} EmotionResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      EmotionResult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an EmotionResult message.\n       * @function verify\n       * @memberof EmotionResult\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      EmotionResult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n        if (message.confidence != null && message.hasOwnProperty(\"confidence\")) if (typeof message.confidence !== \"number\") return \"confidence: number expected\";\n        return null;\n      };\n\n      /**\n       * Creates an EmotionResult message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof EmotionResult\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {EmotionResult} EmotionResult\n       */\n      EmotionResult.fromObject = function fromObject(object) {\n        if (object instanceof $root.EmotionResult) return object;\n        var message = new $root.EmotionResult();\n        if (object.name != null) message.name = String(object.name);\n        if (object.confidence != null) message.confidence = Number(object.confidence);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an EmotionResult message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof EmotionResult\n       * @static\n       * @param {EmotionResult} message EmotionResult\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      EmotionResult.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.name = \"\";\n          object.confidence = 0;\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n        if (message.confidence != null && message.hasOwnProperty(\"confidence\")) object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;\n        return object;\n      };\n\n      /**\n       * Converts this EmotionResult to JSON.\n       * @function toJSON\n       * @memberof EmotionResult\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      EmotionResult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return EmotionResult;\n    }();\n    $root.Hypothesis = function () {\n      /**\n       * Properties of a Hypothesis.\n       * @exports IHypothesis\n       * @interface IHypothesis\n       * @property {string|null} [words] Hypothesis words\n       * @property {number|null} [acousticCost] Hypothesis acousticCost\n       * @property {number|null} [linguisticCost] Hypothesis linguisticCost\n       * @property {number|null} [finalCost] Hypothesis finalCost\n       * @property {number|null} [phraseStart] Hypothesis phraseStart\n       * @property {number|null} [phraseEnd] Hypothesis phraseEnd\n       * @property {string|null} [normalizedText] Hypothesis normalizedText\n       */\n\n      /**\n       * Constructs a new Hypothesis.\n       * @exports Hypothesis\n       * @classdesc Represents a Hypothesis.\n       * @implements IHypothesis\n       * @constructor\n       * @param {IHypothesis=} [properties] Properties to set\n       */\n      function Hypothesis(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Hypothesis words.\n       * @member {string} words\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.words = \"\";\n\n      /**\n       * Hypothesis acousticCost.\n       * @member {number} acousticCost\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.acousticCost = 0;\n\n      /**\n       * Hypothesis linguisticCost.\n       * @member {number} linguisticCost\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.linguisticCost = 0;\n\n      /**\n       * Hypothesis finalCost.\n       * @member {number} finalCost\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.finalCost = 0;\n\n      /**\n       * Hypothesis phraseStart.\n       * @member {number} phraseStart\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.phraseStart = 0;\n\n      /**\n       * Hypothesis phraseEnd.\n       * @member {number} phraseEnd\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.phraseEnd = 0;\n\n      /**\n       * Hypothesis normalizedText.\n       * @member {string} normalizedText\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.normalizedText = \"\";\n\n      /**\n       * Creates a new Hypothesis instance using the specified properties.\n       * @function create\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis=} [properties] Properties to set\n       * @returns {Hypothesis} Hypothesis instance\n       */\n      Hypothesis.create = function create(properties) {\n        return new Hypothesis(properties);\n      };\n\n      /**\n       * Encodes the specified Hypothesis message. Does not implicitly {@link Hypothesis.verify|verify} messages.\n       * @function encode\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis} message Hypothesis message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Hypothesis.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.words != null && Object.hasOwnProperty.call(message, \"words\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.words);\n        if (message.acousticCost != null && Object.hasOwnProperty.call(message, \"acousticCost\")) writer.uint32( /* id 2, wireType 5 =*/21).float(message.acousticCost);\n        if (message.linguisticCost != null && Object.hasOwnProperty.call(message, \"linguisticCost\")) writer.uint32( /* id 3, wireType 5 =*/29).float(message.linguisticCost);\n        if (message.finalCost != null && Object.hasOwnProperty.call(message, \"finalCost\")) writer.uint32( /* id 4, wireType 5 =*/37).float(message.finalCost);\n        if (message.phraseStart != null && Object.hasOwnProperty.call(message, \"phraseStart\")) writer.uint32( /* id 5, wireType 5 =*/45).float(message.phraseStart);\n        if (message.phraseEnd != null && Object.hasOwnProperty.call(message, \"phraseEnd\")) writer.uint32( /* id 6, wireType 5 =*/53).float(message.phraseEnd);\n        if (message.normalizedText != null && Object.hasOwnProperty.call(message, \"normalizedText\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.normalizedText);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Hypothesis message, length delimited. Does not implicitly {@link Hypothesis.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis} message Hypothesis message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Hypothesis.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Hypothesis message from the specified reader or buffer.\n       * @function decode\n       * @memberof Hypothesis\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Hypothesis} Hypothesis\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Hypothesis.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Hypothesis();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.words = reader.string();\n              break;\n            case 2:\n              message.acousticCost = reader.float();\n              break;\n            case 3:\n              message.linguisticCost = reader.float();\n              break;\n            case 4:\n              message.finalCost = reader.float();\n              break;\n            case 5:\n              message.phraseStart = reader.float();\n              break;\n            case 6:\n              message.phraseEnd = reader.float();\n              break;\n            case 7:\n              message.normalizedText = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Hypothesis message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Hypothesis\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Hypothesis} Hypothesis\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Hypothesis.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Hypothesis message.\n       * @function verify\n       * @memberof Hypothesis\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Hypothesis.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.words != null && message.hasOwnProperty(\"words\")) if (!$util.isString(message.words)) return \"words: string expected\";\n        if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\")) if (typeof message.acousticCost !== \"number\") return \"acousticCost: number expected\";\n        if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\")) if (typeof message.linguisticCost !== \"number\") return \"linguisticCost: number expected\";\n        if (message.finalCost != null && message.hasOwnProperty(\"finalCost\")) if (typeof message.finalCost !== \"number\") return \"finalCost: number expected\";\n        if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\")) if (typeof message.phraseStart !== \"number\") return \"phraseStart: number expected\";\n        if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\")) if (typeof message.phraseEnd !== \"number\") return \"phraseEnd: number expected\";\n        if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\")) if (!$util.isString(message.normalizedText)) return \"normalizedText: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Hypothesis message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Hypothesis\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Hypothesis} Hypothesis\n       */\n      Hypothesis.fromObject = function fromObject(object) {\n        if (object instanceof $root.Hypothesis) return object;\n        var message = new $root.Hypothesis();\n        if (object.words != null) message.words = String(object.words);\n        if (object.acousticCost != null) message.acousticCost = Number(object.acousticCost);\n        if (object.linguisticCost != null) message.linguisticCost = Number(object.linguisticCost);\n        if (object.finalCost != null) message.finalCost = Number(object.finalCost);\n        if (object.phraseStart != null) message.phraseStart = Number(object.phraseStart);\n        if (object.phraseEnd != null) message.phraseEnd = Number(object.phraseEnd);\n        if (object.normalizedText != null) message.normalizedText = String(object.normalizedText);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Hypothesis message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Hypothesis\n       * @static\n       * @param {Hypothesis} message Hypothesis\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Hypothesis.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.words = \"\";\n          object.acousticCost = 0;\n          object.linguisticCost = 0;\n          object.finalCost = 0;\n          object.phraseStart = 0;\n          object.phraseEnd = 0;\n          object.normalizedText = \"\";\n        }\n        if (message.words != null && message.hasOwnProperty(\"words\")) object.words = message.words;\n        if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\")) object.acousticCost = options.json && !isFinite(message.acousticCost) ? String(message.acousticCost) : message.acousticCost;\n        if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\")) object.linguisticCost = options.json && !isFinite(message.linguisticCost) ? String(message.linguisticCost) : message.linguisticCost;\n        if (message.finalCost != null && message.hasOwnProperty(\"finalCost\")) object.finalCost = options.json && !isFinite(message.finalCost) ? String(message.finalCost) : message.finalCost;\n        if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\")) object.phraseStart = options.json && !isFinite(message.phraseStart) ? String(message.phraseStart) : message.phraseStart;\n        if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\")) object.phraseEnd = options.json && !isFinite(message.phraseEnd) ? String(message.phraseEnd) : message.phraseEnd;\n        if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\")) object.normalizedText = message.normalizedText;\n        return object;\n      };\n\n      /**\n       * Converts this Hypothesis to JSON.\n       * @function toJSON\n       * @memberof Hypothesis\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Hypothesis.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Hypothesis;\n    }();\n    $root.DecoderResult = function () {\n      /**\n       * Properties of a DecoderResult.\n       * @exports IDecoderResult\n       * @interface IDecoderResult\n       * @property {Array.<IHypothesis>|null} [hypothesis] DecoderResult hypothesis\n       * @property {number|null} [chunkStart] DecoderResult chunkStart\n       * @property {number|null} [chunkEnd] DecoderResult chunkEnd\n       * @property {number|null} [timeEndpointDetectionMs] DecoderResult timeEndpointDetectionMs\n       * @property {number|null} [timeDecodingMs] DecoderResult timeDecodingMs\n       * @property {IVariables|null} [variables] DecoderResult variables\n       * @property {boolean|null} [isFinal] DecoderResult isFinal\n       * @property {Array.<IEmotionResult>|null} [emotionResult] DecoderResult emotionResult\n       * @property {Array.<DecoderResult.IContextAnswer>|null} [contextAnswer] DecoderResult contextAnswer\n       */\n\n      /**\n       * Constructs a new DecoderResult.\n       * @exports DecoderResult\n       * @classdesc Represents a DecoderResult.\n       * @implements IDecoderResult\n       * @constructor\n       * @param {IDecoderResult=} [properties] Properties to set\n       */\n      function DecoderResult(properties) {\n        this.hypothesis = [];\n        this.emotionResult = [];\n        this.contextAnswer = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * DecoderResult hypothesis.\n       * @member {Array.<IHypothesis>} hypothesis\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.hypothesis = $util.emptyArray;\n\n      /**\n       * DecoderResult chunkStart.\n       * @member {number} chunkStart\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.chunkStart = 0;\n\n      /**\n       * DecoderResult chunkEnd.\n       * @member {number} chunkEnd\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.chunkEnd = 0;\n\n      /**\n       * DecoderResult timeEndpointDetectionMs.\n       * @member {number} timeEndpointDetectionMs\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.timeEndpointDetectionMs = 0;\n\n      /**\n       * DecoderResult timeDecodingMs.\n       * @member {number} timeDecodingMs\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.timeDecodingMs = 0;\n\n      /**\n       * DecoderResult variables.\n       * @member {IVariables|null|undefined} variables\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.variables = null;\n\n      /**\n       * DecoderResult isFinal.\n       * @member {boolean} isFinal\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.isFinal = false;\n\n      /**\n       * DecoderResult emotionResult.\n       * @member {Array.<IEmotionResult>} emotionResult\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.emotionResult = $util.emptyArray;\n\n      /**\n       * DecoderResult contextAnswer.\n       * @member {Array.<DecoderResult.IContextAnswer>} contextAnswer\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.contextAnswer = $util.emptyArray;\n\n      /**\n       * Creates a new DecoderResult instance using the specified properties.\n       * @function create\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult=} [properties] Properties to set\n       * @returns {DecoderResult} DecoderResult instance\n       */\n      DecoderResult.create = function create(properties) {\n        return new DecoderResult(properties);\n      };\n\n      /**\n       * Encodes the specified DecoderResult message. Does not implicitly {@link DecoderResult.verify|verify} messages.\n       * @function encode\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult} message DecoderResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DecoderResult.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.hypothesis != null && message.hypothesis.length) for (var i = 0; i < message.hypothesis.length; ++i) $root.Hypothesis.encode(message.hypothesis[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.chunkStart != null && Object.hasOwnProperty.call(message, \"chunkStart\")) writer.uint32( /* id 2, wireType 5 =*/21).float(message.chunkStart);\n        if (message.chunkEnd != null && Object.hasOwnProperty.call(message, \"chunkEnd\")) writer.uint32( /* id 3, wireType 5 =*/29).float(message.chunkEnd);\n        if (message.timeEndpointDetectionMs != null && Object.hasOwnProperty.call(message, \"timeEndpointDetectionMs\")) writer.uint32( /* id 4, wireType 5 =*/37).float(message.timeEndpointDetectionMs);\n        if (message.timeDecodingMs != null && Object.hasOwnProperty.call(message, \"timeDecodingMs\")) writer.uint32( /* id 5, wireType 5 =*/45).float(message.timeDecodingMs);\n        if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) $root.Variables.encode(message.variables, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\")) writer.uint32( /* id 7, wireType 0 =*/56).bool(message.isFinal);\n        if (message.emotionResult != null && message.emotionResult.length) for (var i = 0; i < message.emotionResult.length; ++i) $root.EmotionResult.encode(message.emotionResult[i], writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.contextAnswer != null && message.contextAnswer.length) for (var i = 0; i < message.contextAnswer.length; ++i) $root.DecoderResult.ContextAnswer.encode(message.contextAnswer[i], writer.uint32( /* id 9, wireType 2 =*/74).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link DecoderResult.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult} message DecoderResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a DecoderResult message from the specified reader or buffer.\n       * @function decode\n       * @memberof DecoderResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {DecoderResult} DecoderResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DecoderResult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.DecoderResult();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.hypothesis && message.hypothesis.length)) message.hypothesis = [];\n              message.hypothesis.push($root.Hypothesis.decode(reader, reader.uint32()));\n              break;\n            case 2:\n              message.chunkStart = reader.float();\n              break;\n            case 3:\n              message.chunkEnd = reader.float();\n              break;\n            case 4:\n              message.timeEndpointDetectionMs = reader.float();\n              break;\n            case 5:\n              message.timeDecodingMs = reader.float();\n              break;\n            case 6:\n              message.variables = $root.Variables.decode(reader, reader.uint32());\n              break;\n            case 7:\n              message.isFinal = reader.bool();\n              break;\n            case 8:\n              if (!(message.emotionResult && message.emotionResult.length)) message.emotionResult = [];\n              message.emotionResult.push($root.EmotionResult.decode(reader, reader.uint32()));\n              break;\n            case 9:\n              if (!(message.contextAnswer && message.contextAnswer.length)) message.contextAnswer = [];\n              message.contextAnswer.push($root.DecoderResult.ContextAnswer.decode(reader, reader.uint32()));\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof DecoderResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {DecoderResult} DecoderResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a DecoderResult message.\n       * @function verify\n       * @memberof DecoderResult\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      DecoderResult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.hypothesis != null && message.hasOwnProperty(\"hypothesis\")) {\n          if (!Array.isArray(message.hypothesis)) return \"hypothesis: array expected\";\n          for (var i = 0; i < message.hypothesis.length; ++i) {\n            var error = $root.Hypothesis.verify(message.hypothesis[i]);\n            if (error) return \"hypothesis.\" + error;\n          }\n        }\n        if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\")) if (typeof message.chunkStart !== \"number\") return \"chunkStart: number expected\";\n        if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\")) if (typeof message.chunkEnd !== \"number\") return \"chunkEnd: number expected\";\n        if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\")) if (typeof message.timeEndpointDetectionMs !== \"number\") return \"timeEndpointDetectionMs: number expected\";\n        if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\")) if (typeof message.timeDecodingMs !== \"number\") return \"timeDecodingMs: number expected\";\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n          var error = $root.Variables.verify(message.variables);\n          if (error) return \"variables.\" + error;\n        }\n        if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) if (typeof message.isFinal !== \"boolean\") return \"isFinal: boolean expected\";\n        if (message.emotionResult != null && message.hasOwnProperty(\"emotionResult\")) {\n          if (!Array.isArray(message.emotionResult)) return \"emotionResult: array expected\";\n          for (var i = 0; i < message.emotionResult.length; ++i) {\n            var error = $root.EmotionResult.verify(message.emotionResult[i]);\n            if (error) return \"emotionResult.\" + error;\n          }\n        }\n        if (message.contextAnswer != null && message.hasOwnProperty(\"contextAnswer\")) {\n          if (!Array.isArray(message.contextAnswer)) return \"contextAnswer: array expected\";\n          for (var i = 0; i < message.contextAnswer.length; ++i) {\n            var error = $root.DecoderResult.ContextAnswer.verify(message.contextAnswer[i]);\n            if (error) return \"contextAnswer.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof DecoderResult\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {DecoderResult} DecoderResult\n       */\n      DecoderResult.fromObject = function fromObject(object) {\n        if (object instanceof $root.DecoderResult) return object;\n        var message = new $root.DecoderResult();\n        if (object.hypothesis) {\n          if (!Array.isArray(object.hypothesis)) throw TypeError(\".DecoderResult.hypothesis: array expected\");\n          message.hypothesis = [];\n          for (var i = 0; i < object.hypothesis.length; ++i) {\n            if (typeof object.hypothesis[i] !== \"object\") throw TypeError(\".DecoderResult.hypothesis: object expected\");\n            message.hypothesis[i] = $root.Hypothesis.fromObject(object.hypothesis[i]);\n          }\n        }\n        if (object.chunkStart != null) message.chunkStart = Number(object.chunkStart);\n        if (object.chunkEnd != null) message.chunkEnd = Number(object.chunkEnd);\n        if (object.timeEndpointDetectionMs != null) message.timeEndpointDetectionMs = Number(object.timeEndpointDetectionMs);\n        if (object.timeDecodingMs != null) message.timeDecodingMs = Number(object.timeDecodingMs);\n        if (object.variables != null) {\n          if (typeof object.variables !== \"object\") throw TypeError(\".DecoderResult.variables: object expected\");\n          message.variables = $root.Variables.fromObject(object.variables);\n        }\n        if (object.isFinal != null) message.isFinal = Boolean(object.isFinal);\n        if (object.emotionResult) {\n          if (!Array.isArray(object.emotionResult)) throw TypeError(\".DecoderResult.emotionResult: array expected\");\n          message.emotionResult = [];\n          for (var i = 0; i < object.emotionResult.length; ++i) {\n            if (typeof object.emotionResult[i] !== \"object\") throw TypeError(\".DecoderResult.emotionResult: object expected\");\n            message.emotionResult[i] = $root.EmotionResult.fromObject(object.emotionResult[i]);\n          }\n        }\n        if (object.contextAnswer) {\n          if (!Array.isArray(object.contextAnswer)) throw TypeError(\".DecoderResult.contextAnswer: array expected\");\n          message.contextAnswer = [];\n          for (var i = 0; i < object.contextAnswer.length; ++i) {\n            if (typeof object.contextAnswer[i] !== \"object\") throw TypeError(\".DecoderResult.contextAnswer: object expected\");\n            message.contextAnswer[i] = $root.DecoderResult.ContextAnswer.fromObject(object.contextAnswer[i]);\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof DecoderResult\n       * @static\n       * @param {DecoderResult} message DecoderResult\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      DecoderResult.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n          object.hypothesis = [];\n          object.emotionResult = [];\n          object.contextAnswer = [];\n        }\n        if (options.defaults) {\n          object.chunkStart = 0;\n          object.chunkEnd = 0;\n          object.timeEndpointDetectionMs = 0;\n          object.timeDecodingMs = 0;\n          object.variables = null;\n          object.isFinal = false;\n        }\n        if (message.hypothesis && message.hypothesis.length) {\n          object.hypothesis = [];\n          for (var j = 0; j < message.hypothesis.length; ++j) object.hypothesis[j] = $root.Hypothesis.toObject(message.hypothesis[j], options);\n        }\n        if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\")) object.chunkStart = options.json && !isFinite(message.chunkStart) ? String(message.chunkStart) : message.chunkStart;\n        if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\")) object.chunkEnd = options.json && !isFinite(message.chunkEnd) ? String(message.chunkEnd) : message.chunkEnd;\n        if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\")) object.timeEndpointDetectionMs = options.json && !isFinite(message.timeEndpointDetectionMs) ? String(message.timeEndpointDetectionMs) : message.timeEndpointDetectionMs;\n        if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\")) object.timeDecodingMs = options.json && !isFinite(message.timeDecodingMs) ? String(message.timeDecodingMs) : message.timeDecodingMs;\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) object.variables = $root.Variables.toObject(message.variables, options);\n        if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) object.isFinal = message.isFinal;\n        if (message.emotionResult && message.emotionResult.length) {\n          object.emotionResult = [];\n          for (var j = 0; j < message.emotionResult.length; ++j) object.emotionResult[j] = $root.EmotionResult.toObject(message.emotionResult[j], options);\n        }\n        if (message.contextAnswer && message.contextAnswer.length) {\n          object.contextAnswer = [];\n          for (var j = 0; j < message.contextAnswer.length; ++j) object.contextAnswer[j] = $root.DecoderResult.ContextAnswer.toObject(message.contextAnswer[j], options);\n        }\n        return object;\n      };\n\n      /**\n       * Converts this DecoderResult to JSON.\n       * @function toJSON\n       * @memberof DecoderResult\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      DecoderResult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      DecoderResult.ContextAnswer = function () {\n        /**\n         * Properties of a ContextAnswer.\n         * @memberof DecoderResult\n         * @interface IContextAnswer\n         * @property {Array.<DecoderResult.ContextAnswer.IContextRef>|null} [contextResult] ContextAnswer contextResult\n         */\n\n        /**\n         * Constructs a new ContextAnswer.\n         * @memberof DecoderResult\n         * @classdesc Represents a ContextAnswer.\n         * @implements IContextAnswer\n         * @constructor\n         * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n         */\n        function ContextAnswer(properties) {\n          this.contextResult = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ContextAnswer contextResult.\n         * @member {Array.<DecoderResult.ContextAnswer.IContextRef>} contextResult\n         * @memberof DecoderResult.ContextAnswer\n         * @instance\n         */\n        ContextAnswer.prototype.contextResult = $util.emptyArray;\n\n        /**\n         * Creates a new ContextAnswer instance using the specified properties.\n         * @function create\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer instance\n         */\n        ContextAnswer.create = function create(properties) {\n          return new ContextAnswer(properties);\n        };\n\n        /**\n         * Encodes the specified ContextAnswer message. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n         * @function encode\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContextAnswer.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.contextResult != null && message.contextResult.length) for (var i = 0; i < message.contextResult.length; ++i) $root.DecoderResult.ContextAnswer.ContextRef.encode(message.contextResult[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified ContextAnswer message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContextAnswer.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ContextAnswer message from the specified reader or buffer.\n         * @function decode\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContextAnswer.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.DecoderResult.ContextAnswer();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                if (!(message.contextResult && message.contextResult.length)) message.contextResult = [];\n                message.contextResult.push($root.DecoderResult.ContextAnswer.ContextRef.decode(reader, reader.uint32()));\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a ContextAnswer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContextAnswer.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ContextAnswer message.\n         * @function verify\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ContextAnswer.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.contextResult != null && message.hasOwnProperty(\"contextResult\")) {\n            if (!Array.isArray(message.contextResult)) return \"contextResult: array expected\";\n            for (var i = 0; i < message.contextResult.length; ++i) {\n              var error = $root.DecoderResult.ContextAnswer.ContextRef.verify(message.contextResult[i]);\n              if (error) return \"contextResult.\" + error;\n            }\n          }\n          return null;\n        };\n\n        /**\n         * Creates a ContextAnswer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         */\n        ContextAnswer.fromObject = function fromObject(object) {\n          if (object instanceof $root.DecoderResult.ContextAnswer) return object;\n          var message = new $root.DecoderResult.ContextAnswer();\n          if (object.contextResult) {\n            if (!Array.isArray(object.contextResult)) throw TypeError(\".DecoderResult.ContextAnswer.contextResult: array expected\");\n            message.contextResult = [];\n            for (var i = 0; i < object.contextResult.length; ++i) {\n              if (typeof object.contextResult[i] !== \"object\") throw TypeError(\".DecoderResult.ContextAnswer.contextResult: object expected\");\n              message.contextResult[i] = $root.DecoderResult.ContextAnswer.ContextRef.fromObject(object.contextResult[i]);\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a ContextAnswer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.ContextAnswer} message ContextAnswer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ContextAnswer.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.contextResult = [];\n          if (message.contextResult && message.contextResult.length) {\n            object.contextResult = [];\n            for (var j = 0; j < message.contextResult.length; ++j) object.contextResult[j] = $root.DecoderResult.ContextAnswer.ContextRef.toObject(message.contextResult[j], options);\n          }\n          return object;\n        };\n\n        /**\n         * Converts this ContextAnswer to JSON.\n         * @function toJSON\n         * @memberof DecoderResult.ContextAnswer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ContextAnswer.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        ContextAnswer.ContextRef = function () {\n          /**\n           * Properties of a ContextRef.\n           * @memberof DecoderResult.ContextAnswer\n           * @interface IContextRef\n           * @property {string|null} [id] ContextRef id\n           * @property {number|null} [index] ContextRef index\n           * @property {string|null} [originalValue] ContextRef originalValue\n           * @property {string|null} [predictedValue] ContextRef predictedValue\n           * @property {number|null} [score] ContextRef score\n           */\n\n          /**\n           * Constructs a new ContextRef.\n           * @memberof DecoderResult.ContextAnswer\n           * @classdesc Represents a ContextRef.\n           * @implements IContextRef\n           * @constructor\n           * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n           */\n          function ContextRef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * ContextRef id.\n           * @member {string} id\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.id = \"\";\n\n          /**\n           * ContextRef index.\n           * @member {number} index\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.index = 0;\n\n          /**\n           * ContextRef originalValue.\n           * @member {string} originalValue\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.originalValue = \"\";\n\n          /**\n           * ContextRef predictedValue.\n           * @member {string} predictedValue\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.predictedValue = \"\";\n\n          /**\n           * ContextRef score.\n           * @member {number} score\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.score = 0;\n\n          /**\n           * Creates a new ContextRef instance using the specified properties.\n           * @function create\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef instance\n           */\n          ContextRef.create = function create(properties) {\n            return new ContextRef(properties);\n          };\n\n          /**\n           * Encodes the specified ContextRef message. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n           * @function encode\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          ContextRef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.id);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.index);\n            if (message.originalValue != null && Object.hasOwnProperty.call(message, \"originalValue\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.originalValue);\n            if (message.predictedValue != null && Object.hasOwnProperty.call(message, \"predictedValue\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.predictedValue);\n            if (message.score != null && Object.hasOwnProperty.call(message, \"score\")) writer.uint32( /* id 5, wireType 5 =*/45).float(message.score);\n            return writer;\n          };\n\n          /**\n           * Encodes the specified ContextRef message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n           * @function encodeDelimited\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          ContextRef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n\n          /**\n           * Decodes a ContextRef message from the specified reader or buffer.\n           * @function decode\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          ContextRef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.DecoderResult.ContextAnswer.ContextRef();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  message.id = reader.string();\n                  break;\n                case 2:\n                  message.index = reader.int32();\n                  break;\n                case 3:\n                  message.originalValue = reader.string();\n                  break;\n                case 4:\n                  message.predictedValue = reader.string();\n                  break;\n                case 5:\n                  message.score = reader.float();\n                  break;\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n\n          /**\n           * Decodes a ContextRef message from the specified reader or buffer, length delimited.\n           * @function decodeDelimited\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          ContextRef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n\n          /**\n           * Verifies a ContextRef message.\n           * @function verify\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {Object.<string,*>} message Plain object to verify\n           * @returns {string|null} `null` if valid, otherwise the reason why it is not\n           */\n          ContextRef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isString(message.id)) return \"id: string expected\";\n            if (message.index != null && message.hasOwnProperty(\"index\")) if (!$util.isInteger(message.index)) return \"index: integer expected\";\n            if (message.originalValue != null && message.hasOwnProperty(\"originalValue\")) if (!$util.isString(message.originalValue)) return \"originalValue: string expected\";\n            if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\")) if (!$util.isString(message.predictedValue)) return \"predictedValue: string expected\";\n            if (message.score != null && message.hasOwnProperty(\"score\")) if (typeof message.score !== \"number\") return \"score: number expected\";\n            return null;\n          };\n\n          /**\n           * Creates a ContextRef message from a plain object. Also converts values to their respective internal types.\n           * @function fromObject\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {Object.<string,*>} object Plain object\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           */\n          ContextRef.fromObject = function fromObject(object) {\n            if (object instanceof $root.DecoderResult.ContextAnswer.ContextRef) return object;\n            var message = new $root.DecoderResult.ContextAnswer.ContextRef();\n            if (object.id != null) message.id = String(object.id);\n            if (object.index != null) message.index = object.index | 0;\n            if (object.originalValue != null) message.originalValue = String(object.originalValue);\n            if (object.predictedValue != null) message.predictedValue = String(object.predictedValue);\n            if (object.score != null) message.score = Number(object.score);\n            return message;\n          };\n\n          /**\n           * Creates a plain object from a ContextRef message. Also converts values to other types if specified.\n           * @function toObject\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.ContextRef} message ContextRef\n           * @param {$protobuf.IConversionOptions} [options] Conversion options\n           * @returns {Object.<string,*>} Plain object\n           */\n          ContextRef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n              object.id = \"\";\n              object.index = 0;\n              object.originalValue = \"\";\n              object.predictedValue = \"\";\n              object.score = 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n            if (message.index != null && message.hasOwnProperty(\"index\")) object.index = message.index;\n            if (message.originalValue != null && message.hasOwnProperty(\"originalValue\")) object.originalValue = message.originalValue;\n            if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\")) object.predictedValue = message.predictedValue;\n            if (message.score != null && message.hasOwnProperty(\"score\")) object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;\n            return object;\n          };\n\n          /**\n           * Converts this ContextRef to JSON.\n           * @function toJSON\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           * @returns {Object.<string,*>} JSON object\n           */\n          ContextRef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n          };\n          return ContextRef;\n        }();\n        return ContextAnswer;\n      }();\n      return DecoderResult;\n    }();\n    $root.ErrorResponse = function () {\n      /**\n       * Properties of an ErrorResponse.\n       * @exports IErrorResponse\n       * @interface IErrorResponse\n       * @property {string|null} [errorMessage] ErrorResponse errorMessage\n       */\n\n      /**\n       * Constructs a new ErrorResponse.\n       * @exports ErrorResponse\n       * @classdesc Represents an ErrorResponse.\n       * @implements IErrorResponse\n       * @constructor\n       * @param {IErrorResponse=} [properties] Properties to set\n       */\n      function ErrorResponse(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ErrorResponse errorMessage.\n       * @member {string} errorMessage\n       * @memberof ErrorResponse\n       * @instance\n       */\n      ErrorResponse.prototype.errorMessage = \"\";\n\n      /**\n       * Creates a new ErrorResponse instance using the specified properties.\n       * @function create\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse=} [properties] Properties to set\n       * @returns {ErrorResponse} ErrorResponse instance\n       */\n      ErrorResponse.create = function create(properties) {\n        return new ErrorResponse(properties);\n      };\n\n      /**\n       * Encodes the specified ErrorResponse message. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n       * @function encode\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ErrorResponse.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.errorMessage);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an ErrorResponse message from the specified reader or buffer.\n       * @function decode\n       * @memberof ErrorResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {ErrorResponse} ErrorResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ErrorResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ErrorResponse();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.errorMessage = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof ErrorResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {ErrorResponse} ErrorResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an ErrorResponse message.\n       * @function verify\n       * @memberof ErrorResponse\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      ErrorResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) if (!$util.isString(message.errorMessage)) return \"errorMessage: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof ErrorResponse\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {ErrorResponse} ErrorResponse\n       */\n      ErrorResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ErrorResponse) return object;\n        var message = new $root.ErrorResponse();\n        if (object.errorMessage != null) message.errorMessage = String(object.errorMessage);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof ErrorResponse\n       * @static\n       * @param {ErrorResponse} message ErrorResponse\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      ErrorResponse.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.errorMessage = \"\";\n        if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) object.errorMessage = message.errorMessage;\n        return object;\n      };\n\n      /**\n       * Converts this ErrorResponse to JSON.\n       * @function toJSON\n       * @memberof ErrorResponse\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      ErrorResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return ErrorResponse;\n    }();\n    $root.PacketWrapperFromServer = function () {\n      /**\n       * Properties of a PacketWrapperFromServer.\n       * @exports IPacketWrapperFromServer\n       * @interface IPacketWrapperFromServer\n       * @property {IUndecodedSeconds|null} [undecodedSecondsField] PacketWrapperFromServer undecodedSecondsField\n       * @property {IFullyFinalized|null} [fullyFinalizedField] PacketWrapperFromServer fullyFinalizedField\n       * @property {IDecoderResult|null} [decoderResultField] PacketWrapperFromServer decoderResultField\n       * @property {IErrorResponse|null} [errorResponse] PacketWrapperFromServer errorResponse\n       */\n\n      /**\n       * Constructs a new PacketWrapperFromServer.\n       * @exports PacketWrapperFromServer\n       * @classdesc Represents a PacketWrapperFromServer.\n       * @implements IPacketWrapperFromServer\n       * @constructor\n       * @param {IPacketWrapperFromServer=} [properties] Properties to set\n       */\n      function PacketWrapperFromServer(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * PacketWrapperFromServer undecodedSecondsField.\n       * @member {IUndecodedSeconds|null|undefined} undecodedSecondsField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.undecodedSecondsField = null;\n\n      /**\n       * PacketWrapperFromServer fullyFinalizedField.\n       * @member {IFullyFinalized|null|undefined} fullyFinalizedField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.fullyFinalizedField = null;\n\n      /**\n       * PacketWrapperFromServer decoderResultField.\n       * @member {IDecoderResult|null|undefined} decoderResultField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.decoderResultField = null;\n\n      /**\n       * PacketWrapperFromServer errorResponse.\n       * @member {IErrorResponse|null|undefined} errorResponse\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.errorResponse = null;\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * PacketWrapperFromServer MessageType.\n       * @member {\"undecodedSecondsField\"|\"fullyFinalizedField\"|\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      Object.defineProperty(PacketWrapperFromServer.prototype, \"MessageType\", {\n        get: $util.oneOfGetter($oneOfFields = [\"undecodedSecondsField\", \"fullyFinalizedField\", \"decoderResultField\", \"errorResponse\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n\n      /**\n       * Creates a new PacketWrapperFromServer instance using the specified properties.\n       * @function create\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer=} [properties] Properties to set\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer instance\n       */\n      PacketWrapperFromServer.create = function create(properties) {\n        return new PacketWrapperFromServer(properties);\n      };\n\n      /**\n       * Encodes the specified PacketWrapperFromServer message. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n       * @function encode\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      PacketWrapperFromServer.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.undecodedSecondsField != null && Object.hasOwnProperty.call(message, \"undecodedSecondsField\")) $root.UndecodedSeconds.encode(message.undecodedSecondsField, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.fullyFinalizedField != null && Object.hasOwnProperty.call(message, \"fullyFinalizedField\")) $root.FullyFinalized.encode(message.fullyFinalizedField, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\")) $root.DecoderResult.encode(message.decoderResultField, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\")) $root.ErrorResponse.encode(message.errorResponse, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified PacketWrapperFromServer message, length delimited. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      PacketWrapperFromServer.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a PacketWrapperFromServer message from the specified reader or buffer.\n       * @function decode\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      PacketWrapperFromServer.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.PacketWrapperFromServer();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.undecodedSecondsField = $root.UndecodedSeconds.decode(reader, reader.uint32());\n              break;\n            case 2:\n              message.fullyFinalizedField = $root.FullyFinalized.decode(reader, reader.uint32());\n              break;\n            case 4:\n              message.decoderResultField = $root.DecoderResult.decode(reader, reader.uint32());\n              break;\n            case 8:\n              message.errorResponse = $root.ErrorResponse.decode(reader, reader.uint32());\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a PacketWrapperFromServer message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      PacketWrapperFromServer.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a PacketWrapperFromServer message.\n       * @function verify\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      PacketWrapperFromServer.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n        if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n          properties.MessageType = 1;\n          {\n            var error = $root.UndecodedSeconds.verify(message.undecodedSecondsField);\n            if (error) return \"undecodedSecondsField.\" + error;\n          }\n        }\n        if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.FullyFinalized.verify(message.fullyFinalizedField);\n            if (error) return \"fullyFinalizedField.\" + error;\n          }\n        }\n        if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.DecoderResult.verify(message.decoderResultField);\n            if (error) return \"decoderResultField.\" + error;\n          }\n        }\n        if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.ErrorResponse.verify(message.errorResponse);\n            if (error) return \"errorResponse.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates a PacketWrapperFromServer message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       */\n      PacketWrapperFromServer.fromObject = function fromObject(object) {\n        if (object instanceof $root.PacketWrapperFromServer) return object;\n        var message = new $root.PacketWrapperFromServer();\n        if (object.undecodedSecondsField != null) {\n          if (typeof object.undecodedSecondsField !== \"object\") throw TypeError(\".PacketWrapperFromServer.undecodedSecondsField: object expected\");\n          message.undecodedSecondsField = $root.UndecodedSeconds.fromObject(object.undecodedSecondsField);\n        }\n        if (object.fullyFinalizedField != null) {\n          if (typeof object.fullyFinalizedField !== \"object\") throw TypeError(\".PacketWrapperFromServer.fullyFinalizedField: object expected\");\n          message.fullyFinalizedField = $root.FullyFinalized.fromObject(object.fullyFinalizedField);\n        }\n        if (object.decoderResultField != null) {\n          if (typeof object.decoderResultField !== \"object\") throw TypeError(\".PacketWrapperFromServer.decoderResultField: object expected\");\n          message.decoderResultField = $root.DecoderResult.fromObject(object.decoderResultField);\n        }\n        if (object.errorResponse != null) {\n          if (typeof object.errorResponse !== \"object\") throw TypeError(\".PacketWrapperFromServer.errorResponse: object expected\");\n          message.errorResponse = $root.ErrorResponse.fromObject(object.errorResponse);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a PacketWrapperFromServer message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {PacketWrapperFromServer} message PacketWrapperFromServer\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      PacketWrapperFromServer.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n          object.undecodedSecondsField = $root.UndecodedSeconds.toObject(message.undecodedSecondsField, options);\n          if (options.oneofs) object.MessageType = \"undecodedSecondsField\";\n        }\n        if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n          object.fullyFinalizedField = $root.FullyFinalized.toObject(message.fullyFinalizedField, options);\n          if (options.oneofs) object.MessageType = \"fullyFinalizedField\";\n        }\n        if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n          object.decoderResultField = $root.DecoderResult.toObject(message.decoderResultField, options);\n          if (options.oneofs) object.MessageType = \"decoderResultField\";\n        }\n        if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n          object.errorResponse = $root.ErrorResponse.toObject(message.errorResponse, options);\n          if (options.oneofs) object.MessageType = \"errorResponse\";\n        }\n        return object;\n      };\n\n      /**\n       * Converts this PacketWrapperFromServer to JSON.\n       * @function toJSON\n       * @memberof PacketWrapperFromServer\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      PacketWrapperFromServer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return PacketWrapperFromServer;\n    }();\n    return $root;\n  });\n});\nvar createSpeechRecognizer = function createSpeechRecognizer(voiceListener) {\n  var _a = createNanoEvents(),\n    emit = _a.emit,\n    on = _a.on;\n  var off;\n  var status = 'inactive';\n  var currentMessageId;\n  var stop = function stop() {\n    if (voiceListener.status !== 'stopped') {\n      status = 'inactive';\n      voiceListener.stop();\n    }\n  };\n  var start = function start(_a) {\n    var sendVoice = _a.sendVoice,\n      messageId = _a.messageId,\n      onMessage = _a.onMessage;\n    return voiceListener.listen(sendVoice).then(function () {\n      status = 'active';\n      currentMessageId = messageId;\n      off = onMessage(function (message) {\n        var _a, _b;\n        if (message.status && message.status.code != null && message.status.code < 0) {\n          off();\n          stop();\n        }\n        if (message.messageId === messageId && message.messageName === MessageNames.STT) {\n          if (message.text) {\n            emit('hypotesis', message.text.data || '', message.last === 1, message.messageId);\n            if (message.last === 1) {\n              off();\n              stop();\n            }\n          }\n          if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n            var decoderResultField = asr.PacketWrapperFromServer.decode(message.bytes.data).decoderResultField;\n            if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n              emit('hypotesis', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal, message.messageId);\n              if (decoderResultField.isFinal) {\n                off();\n                stop();\n              }\n            }\n          }\n        }\n      });\n    });\n  };\n  return {\n    start: start,\n    stop: stop,\n    on: on,\n    get status() {\n      return status;\n    },\n    get messageId() {\n      return currentMessageId;\n    }\n  };\n};\nvar isAudioSupported = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n/**\n * Возвращает новый инстанс AudioContext или ошибку\n * @param options AudioContextOptions\n * @returns AudioContext\n */\nvar createAudioContext = function createAudioContext(options) {\n  if (window.AudioContext) {\n    return new AudioContext(options);\n  }\n  if (window.webkitAudioContext) {\n    // eslint-disable-next-line new-cap\n    return new window.webkitAudioContext();\n  }\n  throw new Error('Audio not supported');\n};\nvar _a = createNanoEvents(),\n  on = _a.on,\n  emit = _a.emit;\nvar audioContext;\n/**\n * При помощи вызова функции из аргумента, возвращает, готовый к воспроизведению звука, AudioContext.\n * Всегда возвращает один и тот же AudioContext\n * @param onReady Функция, в аргумент которой будет возвращен AudioContext\n */\nvar resolveAudioContext = function resolveAudioContext(onReady) {\n  if (!audioContext) {\n    var isSafari_1 = navigator.vendor.search('Apple') >= 0;\n    var context_1 = createAudioContext();\n    audioContext = {\n      context: context_1,\n      ready: !isSafari_1 && context_1.state === 'running',\n      on: on\n    };\n    /// Контекст может быть не готов для использования сразу после создания\n    /// Если попробовать что-то воспроизвести в этом контексте - звука не будет\n    if (!audioContext.ready) {\n      var handleClick_1 = function handleClick_1() {\n        document.removeEventListener('click', handleClick_1);\n        document.removeEventListener('touchstart', handleClick_1);\n        if (isSafari_1) {\n          /// проигрываем тишину, т.к нужно что-то проиграть,\n          /// чтобы сафари разрешил воспроизводить звуки в любой момент в этом контексте\n          var oscillator = audioContext.context.createOscillator();\n          oscillator.frequency.value = 0;\n          oscillator.connect(audioContext.context.destination);\n          oscillator.start(0);\n          oscillator.stop(0.5);\n        }\n        if (audioContext.context.state === 'suspended') {\n          /// Developers who write games, WebRTC applications, or other websites that use the Web Audio API\n          /// should call context.resume() after the first user gesture (e.g. a click, or tap)\n          /// https://sites.google.com/a/chromium.org/dev/audio-video/autoplay\n          audioContext.context.resume();\n        }\n        audioContext.ready = true;\n        emit('ready');\n      };\n      /// чтобы сделать контекст готовым к использованию (воспроизведению звука),\n      /// необходимо событие от пользователя\n      // для пк\n      document.addEventListener('click', handleClick_1);\n      // для мобильных устройств\n      document.addEventListener('touchstart', handleClick_1);\n    }\n  }\n  if (audioContext.ready) {\n    onReady && onReady(audioContext.context);\n  } else {\n    var unsubscribe_1 = on('ready', function () {\n      onReady(audioContext.context);\n      unsubscribe_1();\n    });\n  }\n};\n\n/**\n * Понижает sample rate c inSampleRate до значения outSampleRate и преобразует Float32Array в ArrayBuffer\n * @param buffer Аудио\n * @param inSampleRate текущий sample rate\n * @param outSampleRate требуемый sample rate\n * @returns Аудио со значением sample rate = outSampleRate\n */\nvar downsampleBuffer = function downsampleBuffer(buffer, inSampleRate, outSampleRate) {\n  if (outSampleRate > inSampleRate) {\n    throw new Error('downsampling rate show be smaller than original sample rate');\n  }\n  var sampleRateRatio = inSampleRate / outSampleRate;\n  var newLength = Math.round(buffer.length / sampleRateRatio);\n  var result = new Int16Array(newLength);\n  var offsetResult = 0;\n  var offsetBuffer = 0;\n  while (offsetResult < result.length) {\n    var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n    var accum = 0;\n    var count = 0;\n    for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n      accum += buffer[i];\n      count++;\n    }\n    result[offsetResult] = Math.min(1, accum / count) * 0x7fff;\n    offsetResult++;\n    offsetBuffer = nextOffsetBuffer;\n  }\n  return result.buffer;\n};\nvar TARGET_SAMPLE_RATE = 16000;\nvar IS_FIREFOX = typeof window !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar context;\nvar processor;\n/**\n * Преобразует stream в чанки (кусочки), и передает их в cb,\n * будет это делать, пока не будет вызвана функция остановки\n * @param stream Аудио-поток\n * @param cb callback, куда будут переданы чанки из потока\n * @returns Функция, вызов которой остановит передачу чанков\n */\nvar createAudioRecorder = function createAudioRecorder(stream, cb) {\n  return new Promise(function (resolve) {\n    var state = 'inactive';\n    var input;\n    var stop = function stop() {\n      if (state === 'inactive') {\n        throw new Error(\"Can't stop inactive recorder\");\n      }\n      state = 'inactive';\n      stream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n      input.disconnect();\n    };\n    var start = function start() {\n      if (state !== 'inactive') {\n        throw new Error(\"Can't start not inactive recorder\");\n      }\n      state = 'recording';\n      if (!context) {\n        context = createAudioContext({\n          // firefox не умеет выравнивать samplerate, будем делать это самостоятельно\n          sampleRate: IS_FIREFOX ? undefined : TARGET_SAMPLE_RATE\n        });\n      }\n      input = context.createMediaStreamSource(stream);\n      if (!processor) {\n        processor = context.createScriptProcessor(2048, 1, 1);\n      }\n      var listener = function listener(e) {\n        var buffer = e.inputBuffer.getChannelData(0);\n        var data = downsampleBuffer(buffer, context.sampleRate, TARGET_SAMPLE_RATE);\n        var last = state === 'inactive';\n        cb(data, last);\n        if (last) {\n          processor.removeEventListener('audioprocess', listener);\n        }\n      };\n      processor.addEventListener('audioprocess', listener);\n      processor.addEventListener('audioprocess', function () {\n        return resolve(stop);\n      }, {\n        once: true\n      });\n      input.connect(processor);\n      processor.connect(context.destination);\n    };\n    start();\n  });\n};\n/**\n * Запрашивает у браузера доступ к микрофону и резолвит Promise, если разрешение получено.\n * После получения разрешения, чанки с голосом будут передаваться в cb - пока не будет вызвана функция из результата.\n * @param cb Callback, куда будут передаваться чанки с голосом пользователя\n * @returns Promise, который содержит функцию прерывающую слушание\n */\nvar createNavigatorAudioProvider = function createNavigatorAudioProvider(cb) {\n  return navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(function (stream) {\n    return createAudioRecorder(stream, cb);\n  });\n};\n\n/**\n * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.\n * @param createAudioProvider Источник голоса\n * @returns Api для запуска и остановки слушания\n */\nvar createVoiceListener = function createVoiceListener(createAudioProvider) {\n  if (createAudioProvider === void 0) {\n    createAudioProvider = createNavigatorAudioProvider;\n  }\n  var _a = createNanoEvents(),\n    emit = _a.emit,\n    on = _a.on;\n  var stopRecord;\n  var status = 'stopped';\n  var stop = function stop() {\n    status = 'stopped';\n    stopRecord();\n    emit('status', 'stopped');\n  };\n  var listen = function listen(handleVoice) {\n    status = 'started';\n    emit('status', 'started');\n    return createAudioProvider(function (data, last) {\n      return handleVoice(new Uint8Array(data), last);\n    }).then(function (recStop) {\n      stopRecord = recStop;\n    }).then(function () {\n      status = 'listen';\n      emit('status', 'listen');\n    }).catch(function (err) {\n      status = 'stopped';\n      emit('status', 'stopped');\n      throw err;\n    });\n  };\n  return {\n    listen: listen,\n    stop: stop,\n    on: on,\n    get status() {\n      return status;\n    }\n  };\n};\n\n/** Создает коллекцию треков  */\nvar createTrackCollection = function createTrackCollection() {\n  var trackIds;\n  var trackMap;\n  var clear = function clear() {\n    trackIds = new Array();\n    trackMap = new Map();\n  };\n  var push = function push(id, track) {\n    if (trackMap.has(id)) {\n      throw new Error('Track already exists');\n    }\n    trackMap.set(id, track);\n    trackIds.push(id);\n  };\n  var has = function has(id) {\n    return trackMap.has(id);\n  };\n  var getById = function getById(id) {\n    var track = trackMap.get(id);\n    if (track === undefined) {\n      throw new Error('Unknown track id');\n    }\n    return track;\n  };\n  var getByIndex = function getByIndex(index) {\n    if (index < 0 || index >= trackIds.length) {\n      throw new Error('Index out of bounds');\n    }\n    var track = trackMap.get(trackIds[index]);\n    if (track == null) {\n      throw new Error('Something wrong...');\n    }\n    return track;\n  };\n  var some = function some(predicate) {\n    return trackIds.some(function (id) {\n      return predicate(getById(id));\n    });\n  };\n  clear();\n  return {\n    clear: clear,\n    has: has,\n    get: getById,\n    getByIndex: getByIndex,\n    push: push,\n    some: some,\n    get length() {\n      return trackIds.length;\n    }\n  };\n};\n\n/** Создает структуру для хранения загружаемых и воспроизводимых частей трека */\nvar createChunkQueue = function createChunkQueue() {\n  var buffer = []; // очередь на воспроизведение\n  var chunks = []; // очередь воспроизведения\n  var duration = 0; // продолжительность очереди на воспроизведение, сек\n  var loaded = false; // флаг завершения загрузки\n  /** Добавить чанк в очередь на воспроизведение */\n  var push = function push(chunk) {\n    var _a;\n    buffer.push(chunk);\n    duration += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n  };\n  /** Добавить чанк в очередь воспроизведения */\n  var toPlay = function toPlay(chunk) {\n    chunks.push(chunk);\n  };\n  /** Удалить чанк из очереди воспроизведения */\n  var remove = function remove(chunk) {\n    chunks.splice(chunks.indexOf(chunk), 1);\n  };\n  /** Получить очередь на воспроизведение */\n  var popAll = function popAll() {\n    duration = 0;\n    return buffer.splice(0, buffer.length);\n  };\n  /** Проставляем признак окончания загрузки трека */\n  var allLoaded = function allLoaded() {\n    loaded = true;\n  };\n  return {\n    get bufferLen() {\n      return buffer.length;\n    },\n    get chunks() {\n      return chunks;\n    },\n    allLoaded: allLoaded,\n    toPlay: toPlay,\n    remove: remove,\n    push: push,\n    popAll: popAll,\n    get length() {\n      return chunks.length;\n    },\n    get duration() {\n      return duration;\n    },\n    get ended() {\n      // считаем трек законченным, когда все загружено и воспроизведено\n      return loaded && chunks.length === 0 && buffer.length === 0;\n    },\n    get loaded() {\n      return loaded;\n    }\n  };\n};\nvar from16BitToFloat32 = function from16BitToFloat32(incomingData) {\n  var l = incomingData.length;\n  var outputData = new Float32Array(l);\n  for (var i = 0; i < l; i += 1) {\n    outputData[i] = incomingData[i] / 32768.0;\n  }\n  return outputData;\n};\n/** Возвращает потоковый подгружаемый трек, который умеет себя проигрывать */\nvar createTrackStream = function createTrackStream(ctx, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.sampleRate,\n    sampleRate = _c === void 0 ? 24000 : _c,\n    _d = _b.numberOfChannels,\n    numberOfChannels = _d === void 0 ? 1 : _d,\n    _e = _b.delay,\n    delay = _e === void 0 ? 0 : _e,\n    onPlay = _b.onPlay,\n    onEnd = _b.onEnd,\n    trackStatus = _b.trackStatus;\n  // очередь загруженных чанков (кусочков) трека\n  var queue = createChunkQueue();\n  var extraByte = null;\n  var status = trackStatus || 'stop';\n  var lastChunkOffset = 0;\n  var startTime = 0;\n  var firstChunk = true;\n  var end = function end() {\n    // останавливаем воспроизведение чанков из очереди воспроизведения\n    queue.chunks.forEach(function (chunk) {\n      chunk.stop();\n    });\n    status = 'end';\n    onEnd && onEnd();\n    startTime = 0;\n    lastChunkOffset = 0;\n  };\n  var play = function play() {\n    if (status === 'end') {\n      return;\n    }\n    if (status !== 'play') {\n      status = 'play';\n      onPlay && onPlay();\n    }\n    if (queue.ended) {\n      end();\n      return;\n    }\n    // воспроизводим трек, если он полностью загрузился или длина загруженного больше задержки\n    if (queue.loaded || queue.duration >= delay) {\n      startTime = queue.length === 0 ? ctx.currentTime : startTime;\n      var chunks = queue.popAll();\n      chunks.forEach(function (chunk) {\n        var _a;\n        queue.toPlay(chunk);\n        chunk.start(startTime + lastChunkOffset);\n        lastChunkOffset += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n      });\n    }\n  };\n  var getExtraBytes = function getExtraBytes(data, bytesArraysSizes) {\n    if (extraByte == null && bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n      extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n      bytesArraysSizes.incomingMessageVoiceDataLength -= 1;\n      bytesArraysSizes.sourceLen -= 1;\n    } else if (extraByte != null) {\n      bytesArraysSizes.prepend = extraByte;\n      bytesArraysSizes.start = 1;\n      if (bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n        bytesArraysSizes.incomingMessageVoiceDataLength += 1;\n        extraByte = null;\n      } else {\n        extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n        bytesArraysSizes.sourceLen -= 1;\n      }\n    }\n  };\n  var createChunk = function createChunk(chunk) {\n    var audioBuffer = ctx.createBuffer(numberOfChannels, chunk.length / numberOfChannels, sampleRate);\n    for (var i = 0; i < numberOfChannels; i++) {\n      var channelChunk = new Float32Array(chunk.length / numberOfChannels);\n      var index = 0;\n      for (var j = i; j < chunk.length; j += numberOfChannels) {\n        channelChunk[index++] = chunk[j];\n      }\n      audioBuffer.getChannelData(i).set(channelChunk);\n    }\n    var source = ctx.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(ctx.destination);\n    source.onended = function () {\n      queue.remove(source);\n      if (queue.ended && status !== 'end') {\n        status = 'end';\n        onEnd && onEnd();\n      }\n    };\n    return source;\n  };\n  /** добавляет чанк в очередь на воспроизведение */\n  var write = function write(data) {\n    // 44 байта - заголовок трека\n    var slicePoint = firstChunk ? 44 : 0;\n    var bytesArraysSizes = {\n      incomingMessageVoiceDataLength: data.length,\n      sourceLen: data.length,\n      start: 0,\n      prepend: null\n    };\n    firstChunk = false;\n    if (slicePoint >= data.length) {\n      return;\n    }\n    getExtraBytes(data, bytesArraysSizes);\n    var dataBuffer = new ArrayBuffer(bytesArraysSizes.incomingMessageVoiceDataLength);\n    var bufferUi8 = new Uint8Array(dataBuffer);\n    var bufferI16 = new Int16Array(dataBuffer);\n    bufferUi8.set(data.slice(0, bytesArraysSizes.sourceLen), bytesArraysSizes.start);\n    if (bytesArraysSizes.prepend != null) {\n      bufferUi8[0] = bytesArraysSizes.prepend;\n    }\n    var chunk = createChunk(from16BitToFloat32(bufferI16.slice(slicePoint)));\n    queue.push(chunk);\n    if (status === 'play') {\n      play();\n    }\n  };\n  return {\n    get loaded() {\n      return queue.loaded;\n    },\n    setLoaded: function setLoaded() {\n      queue.allLoaded();\n      if (status === 'play') {\n        play();\n      }\n    },\n    write: write,\n    get status() {\n      return status;\n    },\n    play: play,\n    stop: end\n  };\n};\nvar createVoicePlayer = function createVoicePlayer(actx, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.startVoiceDelay,\n    startVoiceDelay = _c === void 0 ? 0.2 : _c,\n    sampleRate = _b.sampleRate,\n    numberOfChannels = _b.numberOfChannels;\n  var _d = createNanoEvents(),\n    on = _d.on,\n    emit = _d.emit;\n  var tracks = createTrackCollection();\n  // true - воспроизводим все треки в очереди (новые в том числе), false - скипаем всю очередь (новые в т.ч.)\n  var active = true;\n  // индекс текущего трека в tracks\n  var cursor = 0;\n  var play = function play() {\n    if (cursor >= tracks.length) {\n      if (tracks.some(function (track) {\n        return !track.loaded;\n      })) {\n        return;\n      }\n      // очищаем коллекцию, если все треки были воспроизведены\n      cursor = 0;\n      tracks.clear();\n      return;\n    }\n    // рекурсивно последовательно включаем треки из очереди\n    var current = tracks.getByIndex(cursor);\n    if (current.status === 'end') {\n      if (cursor < tracks.length) {\n        cursor++;\n        play();\n      }\n    } else {\n      current.play();\n    }\n  };\n  var append = function append(data, trackId, last) {\n    if (last === void 0) {\n      last = false;\n    }\n    var current = tracks.has(trackId) ? tracks.get(trackId) : undefined;\n    if (current == null) {\n      /// если trackId нет в коллекции - создаем трек\n      /// по окончании проигрывания - запускаем следующий трек, вызывая play\n      current = createTrackStream(actx, {\n        sampleRate: sampleRate,\n        numberOfChannels: numberOfChannels,\n        delay: startVoiceDelay,\n        onPlay: function onPlay() {\n          return emit('play', trackId);\n        },\n        onEnd: function onEnd() {\n          emit('end', trackId);\n          play();\n        },\n        trackStatus: active ? 'stop' : 'end'\n      });\n      tracks.push(trackId, current);\n    }\n    if (current.status !== 'end' && data.length) {\n      current.write(data);\n    }\n    if (last) {\n      // все чанки трека загружены\n      current.setLoaded();\n    }\n    play();\n  };\n  var stop = function stop() {\n    while (cursor < tracks.length) {\n      var cur = cursor;\n      cursor++;\n      tracks.getByIndex(cur).stop();\n    }\n  };\n  return {\n    append: append,\n    setActive: function setActive(value) {\n      active = value;\n      if (value) {\n        play();\n      } else {\n        stop();\n      }\n    },\n    on: on,\n    stop: stop\n  };\n};\nvar createVoiceSettings = function createVoiceSettings(listener) {\n  var settings = {\n    disableDubbing: false,\n    disableListening: false\n  };\n  var nextSettings = {};\n  var isVoicePlayerEnded = true;\n  var tryApply = function tryApply() {\n    if (listener.status === 'stopped' && isVoicePlayerEnded) {\n      settings = __assign(__assign({}, settings), nextSettings);\n    }\n  };\n  var change = function change(setts) {\n    nextSettings = __assign(__assign({}, nextSettings), setts);\n    tryApply();\n  };\n  /**\n   * Пытается применить настройки в момент завершения озвучки\n   * (или при прекращении слушания, если озвучка отключена).\n   */\n  var startAutoApplying = function startAutoApplying(voicePlayer) {\n    var subscribers = [];\n    subscribers.push(listener.on('status', function (status) {\n      if (status === 'stopped') {\n        tryApply();\n      }\n    }));\n    if (voicePlayer) {\n      subscribers.push(voicePlayer.on('play', function () {\n        isVoicePlayerEnded = false;\n      }));\n      subscribers.push(voicePlayer.on('end', function () {\n        isVoicePlayerEnded = true;\n        tryApply();\n      }));\n    }\n    return function () {\n      return subscribers.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n    };\n  };\n  return {\n    change: change,\n    startAutoApplying: startAutoApplying,\n    get disableDubbing() {\n      return settings.disableDubbing;\n    },\n    get disableListening() {\n      return settings.disableListening;\n    }\n  };\n};\nvar createVoice = function createVoice(client, emit,\n/// пока onReady не вызван, треки не воспроизводятся\n/// когда случится onReady, очередь треков начнет проигрываться\nonReady) {\n  var voicePlayer;\n  var listener = createVoiceListener();\n  var musicRecognizer = createMusicRecognizer(listener);\n  var speechRecognizer = createSpeechRecognizer(listener);\n  var subscriptions = [];\n  var settings = createVoiceSettings(listener);\n  var appInfoDict = {};\n  var mesIdQueue = [];\n  var isPlaying = false; // проигрывается/не проигрывается озвучка\n  var autolistenMesId = null; // id сообщения, после проигрывания которого, нужно активировать слушание\n  /** останавливает слушание голоса, возвращает true - если слушание было активно */\n  var stopListening = function stopListening() {\n    var result = speechRecognizer.status === 'active' || musicRecognizer.status === 'active';\n    autolistenMesId = null;\n    if (speechRecognizer.status === 'active') {\n      speechRecognizer.stop();\n      client.sendCancel(speechRecognizer.messageId);\n      return true;\n    }\n    if (musicRecognizer.status === 'active') {\n      musicRecognizer.stop();\n      client.sendCancel(musicRecognizer.messageId);\n      return true;\n    }\n    return result;\n  };\n  /** Останавливает слушание и воспроизведение */\n  var stop = function stop() {\n    // здесь важен порядок остановки голоса\n    stopListening();\n    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n  };\n  /** Активирует слушание голоса\n   * если было активно слушание или проигрывание - останавливает, слушание в этом случае не активируется\n   */\n  var listen = function listen(_a) {\n    var begin = (_a === void 0 ? {} : _a).begin;\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        if (stopListening()) {\n          return [2 /*return*/];\n        }\n\n        if (isPlaying) {\n          voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n          return [2 /*return*/];\n        }\n\n        if (settings.disableListening) {\n          return [2 /*return*/];\n        }\n        // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n        if (listener.status === 'stopped') {\n          return [2 /*return*/, client.init().then(function () {\n            return client.createVoiceStream(function (_a) {\n              var sendVoice = _a.sendVoice,\n                messageId = _a.messageId,\n                onMessage = _a.onMessage;\n              begin === null || begin === void 0 ? void 0 : begin.forEach(function (chunk) {\n                return sendVoice(new Uint8Array(chunk), false);\n              });\n              return speechRecognizer.start({\n                sendVoice: sendVoice,\n                messageId: messageId,\n                onMessage: onMessage\n              });\n            });\n          })];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  /** Активирует распознавание музыки\n   * если было активно слушание или проигрывание - останавливает, распознование музыки в этом случае не активируется\n   */\n  var shazam = function shazam() {\n    if (stopListening()) {\n      return;\n    }\n    if (isPlaying) {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    }\n    if (settings.disableListening) {\n      return;\n    }\n    // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n    if (listener.status === 'stopped') {\n      client.createVoiceStream(function (_a) {\n        var sendVoice = _a.sendVoice,\n          messageId = _a.messageId,\n          onMessage = _a.onMessage;\n        return musicRecognizer.start({\n          sendVoice: sendVoice,\n          messageId: messageId,\n          onMessage: onMessage\n        });\n      });\n    }\n  };\n  if (isAudioSupported) {\n    resolveAudioContext(function (context) {\n      /// создаем плеер только если поддерживается аудио\n      /// и только когда готов AudioContext\n      voicePlayer = createVoicePlayer(context, {\n        startVoiceDelay: 1\n      });\n      // начало проигрывания озвучки\n      subscriptions.push(voicePlayer.on('play', function (mesId) {\n        isPlaying = true;\n        emit({\n          emotion: 'talk'\n        });\n        emit({\n          tts: {\n            status: 'start',\n            messageId: Number(mesId),\n            appInfo: appInfoDict[mesId]\n          }\n        });\n      }));\n      // окончание проигрывания озвучки\n      subscriptions.push(voicePlayer.on('end', function (mesId) {\n        isPlaying = false;\n        emit({\n          emotion: 'idle'\n        });\n        emit({\n          tts: {\n            status: 'stop',\n            messageId: Number(mesId),\n            appInfo: appInfoDict[mesId]\n          }\n        });\n        if (mesId === autolistenMesId) {\n          listen();\n        }\n        // очистка сохраненных appInfo и messageId\n        var idx = 0;\n        do {\n          delete appInfoDict[mesIdQueue[0]];\n        } while (mesIdQueue[idx++] !== mesId && mesIdQueue.length > idx);\n        mesIdQueue.splice(0, idx);\n      }));\n      // запуск автоматического применения настроек\n      subscriptions.push(settings.startAutoApplying(voicePlayer));\n      // оповещаем о готовности к воспроизведению звука\n      onReady && onReady();\n    });\n  } else {\n    // запуск автоматического применения настроек (в случае, если озвучка не доступна)\n    subscriptions.push(settings.startAutoApplying());\n  }\n  // обработка входящей озвучки\n  subscriptions.push(client.on('voice', function (data, message) {\n    if (settings.disableDubbing) {\n      return;\n    }\n    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.append(data, message.messageId.toString(), message.last === 1);\n  }));\n  // гипотезы распознавания речи\n  subscriptions.push(speechRecognizer.on('hypotesis', function (text, isLast, mid) {\n    emit({\n      asr: {\n        text: listener.status === 'listen' && !settings.disableListening ? text : '',\n        last: isLast,\n        mid: mid\n      }\n    });\n  }));\n  // статусы слушания речи\n  subscriptions.push(listener.on('status', function (status) {\n    if (status === 'listen') {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n      emit({\n        emotion: 'listen'\n      });\n    } else if (status === 'stopped') {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!settings.disableDubbing);\n      emit({\n        asr: {\n          text: ''\n        },\n        emotion: 'idle'\n      });\n    }\n  }));\n  // активация автослушания\n  subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n    var autoListening = systemMessage.auto_listening;\n    var messageId = originalMessage.messageId.toString();\n    if (typeof systemMessage.app_info !== 'undefined') {\n      appInfoDict[messageId] = systemMessage.app_info;\n      mesIdQueue.push(messageId);\n    }\n    if (autoListening) {\n      /// если озвучка включена - сохраняем mesId чтобы включить слушание после озвучки\n      /// если озвучка выключена - включаем слушание сразу\n      if (!settings.disableDubbing) {\n        autolistenMesId = messageId;\n      } else {\n        listen();\n      }\n    }\n  }));\n  return {\n    destroy: function destroy() {\n      stopListening();\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    change: function change(nextSettings) {\n      var disableDubbing = nextSettings.disableDubbing,\n        disableListening = nextSettings.disableListening;\n      /// Важен порядок обработки флагов слушания и озвучки.\n      /// Сначала слушание, потом озвучка\n      disableListening && stopListening();\n      // Такой вызов необходим, чтобы включая озвучку она тут же проигралась (при её наличии), и наоборот\n      settings.disableDubbing !== disableDubbing && (voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!disableDubbing));\n      settings.change(nextSettings);\n    },\n    listen: listen,\n    shazam: shazam,\n    stop: stop,\n    stopPlaying: function stopPlaying() {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    }\n  };\n};\nvar STATE_UPDATE_TIMEOUT = 200;\nvar DEFAULT_PROJECT_ID = 'd929986a-611a-2ba0-6174-1928c99600a5';\nvar DEFAULT_APPLICATION_ID = '7c4e23bf-cd93-b57e-874b-d9fc1b35f93d';\nvar DEFAULT_APP_VERSION_ID = '26d0bb2e-45d6-a276-f70e-6c016d1f9cff';\nvar DEFAULT_APP = {\n  projectId: DEFAULT_PROJECT_ID,\n  applicationId: DEFAULT_APPLICATION_ID,\n  appversionId: DEFAULT_APP_VERSION_ID,\n  frontendStateId: [DEFAULT_PROJECT_ID, DEFAULT_APPLICATION_ID, DEFAULT_APP_VERSION_ID].join('_'),\n  frontendType: 'DIALOG',\n  systemName: 'assistant',\n  frontendEndpoint: 'None'\n};\nvar isDefaultApp = function isDefaultApp(appInfo) {\n  return appInfo.frontendStateId === DEFAULT_APP.frontendStateId;\n};\nvar promiseTimeout = function promiseTimeout(promise, timeout) {\n  var timeoutId;\n  return Promise.race([promise.then(function (v) {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    return v;\n  }), new Promise(function (_, reject) {\n    timeoutId = window.setTimeout(function () {\n      reject(new Error(\"Timed out in \" + timeout + \" ms.\"));\n    }, timeout);\n  })]);\n};\nvar createAssistant = function createAssistant(_a) {\n  var _b;\n  var getMeta = _a.getMeta,\n    configuration = __rest(_a, [\"getMeta\"]);\n  var _c = createNanoEvents(),\n    on = _c.on,\n    emit = _c.emit;\n  var subscriptions = [];\n  // хеш [messageId]: requestId, где requestId - пользовательский ид экшена\n  var requestIdMap = {};\n  // готов/не готов воспроизводить озвучку\n  var voiceReady = false;\n  // текущий апп\n  var app = {\n    info: DEFAULT_APP\n  };\n  var sdkMeta = {\n    theme: 'dark'\n  };\n  var settings = {\n    disableDubbing: configuration.settings.dubbing === -1,\n    disableListening: false,\n    sendTextAsSsml: false\n  };\n  var backgroundApps = {};\n  var metaProvider = function metaProvider() {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var appState, _a, current_app, getBackgroundAppsMeta, background_apps;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(app !== null && app.info.frontendType === 'WEB_APP' && app.getState)) return [3 /*break*/, 2];\n            return [4 /*yield*/, promiseTimeout(app.getState(), STATE_UPDATE_TIMEOUT).catch(function () {\n              // eslint-disable-next-line no-console\n              console.error('App-state wasn`t resolved, timeout had been expired');\n              return undefined;\n            })];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = undefined;\n            _b.label = 3;\n          case 3:\n            appState = _a;\n            current_app = {\n              app_info: app.info,\n              state: appState || {}\n            };\n            getBackgroundAppsMeta = function getBackgroundAppsMeta() {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var apps, backgroundAppsIds, backgroundAppsMeta;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      apps = __assign({}, backgroundApps);\n                      backgroundAppsIds = Object.keys(apps);\n                      backgroundAppsMeta = [];\n                      return [4 /*yield*/, Promise.all(backgroundAppsIds.map(function (applicationId) {\n                        return __awaiter(void 0, void 0, void 0, function () {\n                          var _a, getState;\n                          return __generator(this, function (_b) {\n                            _a = apps[applicationId].getState, getState = _a === void 0 ? function () {\n                              return Promise.resolve({});\n                            } : _a;\n                            return [2 /*return*/, promiseTimeout(getState(), STATE_UPDATE_TIMEOUT).then(function (state) {\n                              return state;\n                            }, function () {\n                              return {};\n                            })];\n                          });\n                        });\n                      })).then(function (results) {\n                        results.forEach(function (appResult, index) {\n                          var state = appResult;\n                          var applicationId = backgroundAppsIds[index];\n                          backgroundAppsMeta.push({\n                            app_info: apps[applicationId].appInfo,\n                            state: state\n                          });\n                        });\n                      })];\n                    case 1:\n                      _a.sent();\n                      return [2 /*return*/, backgroundAppsMeta];\n                  }\n                });\n              });\n            };\n            return [4 /*yield*/, getBackgroundAppsMeta()];\n          case 4:\n            background_apps = _b.sent();\n            return [2 /*return*/, __assign(__assign(__assign({}, sdkMeta), {\n              time: getTime(),\n              current_app: current_app,\n              background_apps: background_apps\n            }), getMeta ? getMeta() : {})];\n        }\n      });\n    });\n  };\n  var transport = createTransport((_b = configuration.fakeVps) === null || _b === void 0 ? void 0 : _b.createFakeWS);\n  var protocol = createProtocol(transport, __assign(__assign({}, configuration), {\n    // пока голос не готов, выключаем озвучку\n    settings: __assign(__assign({}, configuration.settings), {\n      dubbing: !voiceReady ? -1 : configuration.settings.dubbing\n    })\n  }));\n  var client = createClient(protocol, metaProvider);\n  var voice = createVoice(client, function (event) {\n    if (typeof event.tts !== 'undefined') {\n      emit('tts', event.tts);\n      return;\n    }\n    emit('assistant', event);\n  }, function () {\n    voiceReady = true;\n    // когда голос готов, обновляем настройки, если они отличаются от текущих\n    var currentDubbing = settings.disableDubbing === false ? 1 : -1;\n    if (protocol.configuration.settings.dubbing !== currentDubbing) {\n      protocol.changeSettings({\n        dubbing: currentDubbing\n      });\n    }\n  });\n  /** завершает текущий апп */\n  var closeApp = function closeApp() {\n    var current = app;\n    app = {\n      info: DEFAULT_APP\n    };\n    if (!isDefaultApp(current.info)) {\n      emit('app', {\n        type: 'close',\n        app: current.info\n      });\n    }\n  };\n  /** отправляет текст */\n  var sendText = function sendText(text, shouldSendDisableDubbing) {\n    if (shouldSendDisableDubbing === void 0) {\n      shouldSendDisableDubbing = false;\n    }\n    voice.stop();\n    client.sendText(text, settings.sendTextAsSsml, shouldSendDisableDubbing);\n  };\n  /** отправляет server_action */\n  var sendServerAction = function sendServerAction(serverAction, messageName, requestId, actionApp) {\n    if (messageName === void 0) {\n      messageName = 'SERVER_ACTION';\n    }\n    if (requestId === void 0) {\n      requestId = undefined;\n    }\n    if (actionApp === void 0) {\n      actionApp = app.info;\n    }\n    voice.stop();\n    client.sendServerAction(serverAction, actionApp, messageName).then(function (messageId) {\n      if (requestId && messageId) {\n        requestIdMap[messageId.toString()] = requestId;\n      }\n    });\n  };\n  /** отправляет ответ на запрос доступа к местоположению и пр. меты */\n  var sendMetaForPermissionRequest = function sendMetaForPermissionRequest(requestMessageId, appInfo, items) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a, props, data, meta;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, getAnswerForRequestPermissions(requestMessageId, appInfo, items)];\n          case 1:\n            _a = _b.sent(), props = __rest(_a.meta, []), data = __rest(_a, [\"meta\"]);\n            return [4 /*yield*/, metaProvider()];\n          case 2:\n            meta = _b.sent();\n            client.sendData(__assign({}, data), 'SERVER_ACTION', __assign(__assign({}, meta), props));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  subscriptions.push(protocol.on('ready', function () {\n    return emit('vps', {\n      type: 'ready'\n    });\n  }));\n  // при неудачном переподключении к сокету\n  subscriptions.push(transport.on('error', function (error) {\n    voice.stop();\n    protocol.clearQueue();\n    emit('vps', {\n      type: 'error',\n      error: error\n    });\n  }));\n  // обработка исходящих сообщений\n  subscriptions.push(protocol.on('outcoming', function (message) {\n    emit('vps', {\n      type: 'outcoming',\n      message: message\n    });\n  }));\n  // обработка ошибок\n  subscriptions.push(protocol.on('error', function (error) {\n    emit('error', error);\n  }));\n  // оповещение о статусах\n  subscriptions.push(client.on('status', function (status) {\n    emit('status', status);\n  }));\n  // история на запрос GetHistoryRequest\n  subscriptions.push(client.on('history', function (history) {\n    emit('history', history);\n  }));\n  // обработка входящих команд, и событий аппа\n  subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n    if (originalMessage.messageName === 'ANSWER_TO_USER') {\n      var activate_app_info = systemMessage.activate_app_info,\n        items = systemMessage.items,\n        mesAppInfo = systemMessage.app_info,\n        character = systemMessage.character;\n      if (character) {\n        emit('assistant', {\n          character: character.id\n        });\n      }\n      // по-умолчанию activate_app_info: true\n      if (mesAppInfo && activate_app_info !== false) {\n        emit('app', {\n          type: 'run',\n          app: mesAppInfo\n        });\n      }\n      if (items) {\n        var _loop_1 = function _loop_1(i) {\n          var command = items[i].command;\n          if (typeof command !== 'undefined') {\n            setTimeout(function () {\n              return emit('command', command);\n            });\n            if (command.type === 'start_music_recognition') {\n              voice.shazam();\n              return {\n                value: void 0\n              };\n            }\n            if (command.type === 'request_permissions' && mesAppInfo) {\n              sendMetaForPermissionRequest(originalMessage.messageId, mesAppInfo, command.permissions);\n              return {\n                value: void 0\n              };\n            }\n            if (command.type === 'action') {\n              emit('actionCommand', {\n                type: 'command',\n                command: command\n              });\n            }\n            if ((command.type === 'smart_app_data' || command.type === 'smart_app_error' || command.type === 'start_smart_search' || command.type === 'navigation') && mesAppInfo) {\n              // эмитим все команды, т.к бывают фоновые команды\n              emit('app', {\n                type: 'command',\n                command: __assign(__assign({}, command), {\n                  sdk_meta: {\n                    mid: originalMessage.messageId.toString(),\n                    requestId: requestIdMap[originalMessage.messageId.toString()]\n                  }\n                }),\n                app: mesAppInfo\n              });\n            }\n            if (command.type === 'close_app') {\n              closeApp();\n            }\n          }\n        };\n        for (var i = 0; i < (items || []).length; i++) {\n          var state_1 = _loop_1(i);\n          if (typeof state_1 === \"object\") return state_1.value;\n        }\n      }\n      emit('vps', {\n        type: 'incoming',\n        systemMessage: systemMessage,\n        originalMessage: originalMessage\n      });\n    }\n  }));\n  // прокидывает команды backgroundApp'ов в их подписчики\n  on('app', function (event) {\n    var _a;\n    if (event.type === 'command') {\n      var backgroundAppOnCommand = (_a = backgroundApps[event.app.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers;\n      if (Array.isArray(backgroundAppOnCommand)) {\n        backgroundAppOnCommand.forEach(function (onCommand) {\n          var _a;\n          onCommand(event.command, (_a = event.command.sdk_meta) === null || _a === void 0 ? void 0 : _a.mid);\n        });\n      }\n    }\n  });\n  /** уничтожает ассистент, очищает подписки */\n  var destroy = function destroy() {\n    voice.destroy();\n    client.destroy();\n    protocol.destroy();\n    subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n      return unsubscribe();\n    });\n  };\n  /** запускает ассистент (приветствие) */\n  var start = function start(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.disableGreetings,\n      disableGreetings = _c === void 0 ? false : _c,\n      _d = _b.initPhrase,\n      initPhrase = _d === void 0 ? undefined : _d,\n      _e = _b.isFirstSession,\n      isFirstSession = _e === void 0 ? false : _e;\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            if (!(!disableGreetings && isDefaultApp(app.info))) return [3 /*break*/, 2];\n            return [4 /*yield*/, client.sendOpenAssistant({\n              isFirstSession: isFirstSession\n            })];\n          case 1:\n            _f.sent();\n            _f.label = 2;\n          case 2:\n            if (initPhrase) {\n              return [2 /*return*/, client.sendText(initPhrase).then(function (messageId) {\n                return messageId ? client.waitForAnswer(messageId) : undefined;\n              })];\n            }\n            return [2 /*return*/, undefined];\n        }\n      });\n    });\n  };\n  return {\n    get activeApp() {\n      return !isDefaultApp(app.info) ? app.info : null;\n    },\n    get settings() {\n      return settings;\n    },\n    destroy: destroy,\n    closeApp: closeApp,\n    listen: voice.listen,\n    sendServerAction: sendServerAction,\n    getHistoryRequest: protocol.getHistoryRequest,\n    sendText: sendText,\n    start: start,\n    stop: function stop() {\n      voice.stop();\n      protocol.clearQueue();\n      transport.close();\n    },\n    stopTts: voice.stopPlaying,\n    stopVoice: voice.stop,\n    emit: emit,\n    on: on,\n    changeConfiguration: protocol.changeConfiguration,\n    changeSdkMeta: function changeSdkMeta(nextSdkMeta) {\n      sdkMeta = __assign(__assign({}, sdkMeta), nextSdkMeta);\n    },\n    changeSettings: function changeSettings(newSettings) {\n      var dubbingChanged = settings.disableDubbing !== !!newSettings.disableDubbing;\n      settings = __assign(__assign({}, settings), newSettings);\n      voice.change({\n        disableDubbing: settings.disableDubbing,\n        disableListening: settings.disableListening\n      });\n      if (!dubbingChanged) {\n        return;\n      }\n      protocol.changeSettings({\n        dubbing: settings.disableDubbing || !voiceReady ? -1 : 1\n      });\n    },\n    reconnect: protocol.reconnect,\n    get protocol() {\n      return protocol;\n    },\n    setActiveApp: function setActiveApp(info, getState) {\n      app = {\n        info: info,\n        getState: getState\n      };\n    },\n    addBackgroundApp: function addBackgroundApp(_a) {\n      var appInfo = _a.appInfo,\n        getState = _a.getState;\n      backgroundApps[appInfo.applicationId] = {\n        appInfo: appInfo,\n        getState: getState,\n        commandsSubscribers: []\n      };\n      var remove = function remove() {\n        delete backgroundApps[appInfo.applicationId];\n      };\n      var onCommand = function onCommand(subscriber) {\n        var _a;\n        (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers.push(subscriber);\n        return {\n          clearSubscribers: function clearSubscribers() {\n            if (backgroundApps[appInfo.applicationId]) {\n              backgroundApps[appInfo.applicationId].commandsSubscribers = [];\n            }\n          }\n        };\n      };\n      var sendServerActionToBackgroundApp = function sendServerActionToBackgroundApp(serverAction, messageName, requestId) {\n        var _a;\n        if (messageName === void 0) {\n          messageName = 'SERVER_ACTION';\n        }\n        if (requestId === void 0) {\n          requestId = undefined;\n        }\n        return sendServerAction(serverAction, messageName, requestId, (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.appInfo);\n      };\n      return {\n        remove: remove,\n        onCommand: onCommand,\n        sendServerAction: sendServerActionToBackgroundApp\n      };\n    }\n  };\n};\nexport { appendHeader as a, createNavigatorAudioProvider as b, createAssistant as c };","map":{"version":3,"names":["M","MessageNames","d","__awaiter","e","__generator","p","proto","b","__assign","c","createNanoEvents","a","__rest","_","__spreadArrays","f","createCommonjsModule","h","commonjsRequire","m","minimal","g","commonjsGlobal","convertFieldValuesToString","object","Object","keys","reduce","acc","key","JSON","stringify","createClient","protocol","provideMeta","undefined","_a","on","emit","waitForAnswer","messageId","Promise","resolve","off","systemMessageData","originalMessage","messageName","ANSWER_TO_USER","DO_NOTHING","sendData","data","meta","getMessageId","sendSystemMessage","sendCancel","sendOpenAssistant","isFirstSession","_b","_c","label","is_first_session","sent","sendMeta","sendServerAction","serverAction","appInfo","systemData","app_info","server_action","sendText","text","isSsml","shouldSendDisableDubbing","trim","batch","clientSendText","sendSettings","prevDubbing","sendDisableDubbing","isStillNeedReturnDubbing","configuration","settings","dubbing","createVoiceStream","callback","sendVoice","onMessage","cb","message","voice","Uint8Array","systemMessage","parse","status","bytes","history_1","GetHistoryResponse","decode","historyMessages","parsedHistory","map","historyMessage","content","destroy","init","createClientMethods","sendMessage","send","payload","other","sendDevice","last","device","Device","create","sendInitialSettings","params","initialSettings","InitialSettings","getHistoryRequest","uuid","historyClient","history","historyProto","messageTypes","app","entries","value","offset","toString","ChatHistoryRequest","cancel","Cancel","sendLegacyDevice","legacyDevice","LegacyDevice","Settings","type","Text","mesName","SystemMessage","Voice","batchingMessageId","lastMessageSent","checkLastMessageStatus","Error","upgradedSendText","_i","arguments","length","upgradedSendSystemMessage","upgradedSendVoice","upgradedSendSettings","safeJSONParse","str","defaultValue","err","compileBasePayload","userId","token","userChannel","version","vpsToken","appendHeader","uint8Array","arrayBuffer","ArrayBuffer","dataView","DataView","setInt32","newUint8Array","set","removeHeader","slice","createProtocol","transport","logger","getToken","url","locale","basePayload","subscriptions","messageQueue","initMessageId","currentSettings","currentMessageId","Date","now","destroyed","clearReadyTimer","cancelUpdatingSettingsWhenSocketReady","createdMessage","Message","encodedMessage","encode","finish","encodedMessageWithHeader","push","open","sendDeviceOriginal","sendInitialSettingsOriginal","getHistoryRequestOriginal","sendLegacyDeviceOriginal","sendSettingsOriginal","args","apply","updateDefaults","obj","assign","updateDevice","additionalInfo","deviceOptions","oldInfo","newInfo","updateSettings","isSocketReady","_d","e_1","_e","trys","concat","clearTimeout","window","setTimeout","shift","decodedMessage","close","clearQueue","splice","unsubscribe","changeConfiguration","changeDevice","changeSettings","reconnect","navigator","onLine","reject","subs","sub","RETRY_INTERVAL","defaultWSCreator","WebSocket","createTransport","createWS","retryTimeoutId","retries","webSocket","stopped","connect","binaryType","addEventListener","readyState","isOnline","convertToMetaPermissions","permission","getLocation","geolocation","getCurrentPosition","coords","timestamp","lat","latitude","lon","longitude","accuracy","timeout","getTime","timezone_id","Intl","DateTimeFormat","resolvedOptions","timeZone","timezone_offset_sec","getTimezoneOffset","getAnswerForRequestPermissions","requestMessageId","items","permissions","response","record_audio","geo","read_contacts","time","action_id","request_message_id","command_response","request_permissions","all","location_1","_f","location","then","mtt","module","global","factory","exports","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Music2TrackProtocol","DecoderResult","properties","i","prototype","result","isMusicFound","isFinal","writer","hasOwnProperty","call","uint32","string","bool","encodeDelimited","ldelim","reader","end","len","pos","tag","skipType","decodeDelimited","verify","isString","fromObject","String","Boolean","toObject","options","defaults","toJSON","constructor","toJSONOptions","ErrorResponse","errorMessage","errorCode","int32","isInteger","MttResponse","decoderResultField","errorResponse","$oneOfFields","defineProperty","get","oneOfGetter","oneOfSetter","fork","MessageType","error","TypeError","oneofs","createMusicRecognizer","voiceListener","stop","start","listen","MUSIC_RECOGNITION","code","toUpperCase","asr","Variables","variables","emptyObject","end2","tag2","isObject","objects","keys2","j","UndecodedSeconds","undecodedSeconds","float","Number","json","isFinite","FullyFinalized","EmotionResult","name","confidence","Hypothesis","words","acousticCost","linguisticCost","finalCost","phraseStart","phraseEnd","normalizedText","hypothesis","emotionResult","contextAnswer","emptyArray","chunkStart","chunkEnd","timeEndpointDetectionMs","timeDecodingMs","ContextAnswer","Array","isArray","arrays","contextResult","ContextRef","id","index","originalValue","predictedValue","score","PacketWrapperFromServer","undecodedSecondsField","fullyFinalizedField","createSpeechRecognizer","STT","isAudioSupported","AudioContext","webkitAudioContext","createAudioContext","audioContext","resolveAudioContext","onReady","isSafari_1","vendor","search","context_1","context","ready","state","handleClick_1","document","removeEventListener","oscillator","createOscillator","frequency","destination","resume","unsubscribe_1","downsampleBuffer","buffer","inSampleRate","outSampleRate","sampleRateRatio","newLength","Math","round","Int16Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","min","TARGET_SAMPLE_RATE","IS_FIREFOX","userAgent","toLowerCase","indexOf","processor","createAudioRecorder","stream","input","getTracks","forEach","track","disconnect","sampleRate","createMediaStreamSource","createScriptProcessor","listener","inputBuffer","getChannelData","once","createNavigatorAudioProvider","mediaDevices","getUserMedia","audio","createVoiceListener","createAudioProvider","stopRecord","handleVoice","recStop","catch","createTrackCollection","trackIds","trackMap","clear","Map","has","getById","getByIndex","some","predicate","createChunkQueue","chunks","duration","loaded","chunk","toPlay","remove","popAll","allLoaded","bufferLen","ended","from16BitToFloat32","incomingData","l","outputData","Float32Array","createTrackStream","ctx","numberOfChannels","delay","onPlay","onEnd","trackStatus","queue","extraByte","lastChunkOffset","startTime","firstChunk","play","currentTime","getExtraBytes","bytesArraysSizes","incomingMessageVoiceDataLength","sourceLen","prepend","createChunk","audioBuffer","createBuffer","channelChunk","source","createBufferSource","onended","write","slicePoint","dataBuffer","bufferUi8","bufferI16","setLoaded","createVoicePlayer","actx","startVoiceDelay","tracks","active","cursor","current","append","trackId","cur","setActive","createVoiceSettings","disableDubbing","disableListening","nextSettings","isVoicePlayerEnded","tryApply","change","setts","startAutoApplying","voicePlayer","subscribers","createVoice","client","musicRecognizer","speechRecognizer","appInfoDict","mesIdQueue","isPlaying","autolistenMesId","stopListening","begin","shazam","mesId","emotion","tts","idx","isLast","mid","autoListening","auto_listening","stopPlaying","STATE_UPDATE_TIMEOUT","DEFAULT_PROJECT_ID","DEFAULT_APPLICATION_ID","DEFAULT_APP_VERSION_ID","DEFAULT_APP","projectId","applicationId","appversionId","frontendStateId","join","frontendType","systemName","frontendEndpoint","isDefaultApp","promiseTimeout","promise","timeoutId","race","v","createAssistant","getMeta","requestIdMap","voiceReady","info","sdkMeta","theme","sendTextAsSsml","backgroundApps","metaProvider","appState","current_app","getBackgroundAppsMeta","background_apps","getState","console","apps","backgroundAppsIds","backgroundAppsMeta","results","appResult","fakeVps","createFakeWS","event","currentDubbing","closeApp","requestId","actionApp","sendMetaForPermissionRequest","props","activate_app_info","mesAppInfo","character","_loop_1","command","sdk_meta","state_1","backgroundAppOnCommand","commandsSubscribers","onCommand","disableGreetings","initPhrase","activeApp","stopTts","stopVoice","changeSdkMeta","nextSdkMeta","newSettings","dubbingChanged","setActiveApp","addBackgroundApp","subscriber","clearSubscribers","sendServerActionToBackgroundApp"],"sources":["/Users/polechkagadukina/Desktop/src/node_modules/@salutejs/client/esm/assistant-8cda143b.js"],"sourcesContent":["import { M as MessageNames, d as __awaiter, e as __generator, p as proto, b as __assign, c as createNanoEvents, a as __rest, _ as __spreadArrays, f as createCommonjsModule, h as commonjsRequire, m as minimal, g as commonjsGlobal } from './typings-56926c74.js';\n\nfunction convertFieldValuesToString(object) {\n    return Object.keys(object).reduce(function (acc, key) {\n        acc[key] = JSON.stringify(object[key]);\n        return acc;\n    }, {});\n}\nvar createClient = function (protocol, provideMeta) {\n    if (provideMeta === void 0) { provideMeta = undefined; }\n    var _a = createNanoEvents(), on = _a.on, emit = _a.emit;\n    /** ждет ответ бека и возвращает данные из этого ответа */\n    var waitForAnswer = function (messageId) {\n        return new Promise(function (resolve) {\n            var off = on('systemMessage', function (systemMessageData, originalMessage) {\n                if (originalMessage.messageId === messageId &&\n                    (originalMessage.messageName === MessageNames.ANSWER_TO_USER ||\n                        originalMessage.messageName === MessageNames.DO_NOTHING)) {\n                    off();\n                    resolve(systemMessageData);\n                }\n            });\n        });\n    };\n    /** отправляет произвольный systemMessage, не подкладывает мету */\n    var sendData = function (data, messageName, meta) {\n        if (messageName === void 0) { messageName = ''; }\n        var messageId = protocol.getMessageId();\n        protocol.sendSystemMessage({\n            data: data,\n            messageName: messageName,\n        }, true, messageId, { meta: convertFieldValuesToString(meta || {}) });\n        return messageId;\n    };\n    /** отправляет cancel на сообщение */\n    var sendCancel = function (messageId) {\n        protocol.sendCancel({}, true, messageId);\n    };\n    /** отправляет приветствие */\n    var sendOpenAssistant = function (_a) {\n        var isFirstSession = (_a === void 0 ? { isFirstSession: false } : _a).isFirstSession;\n        return __awaiter(void 0, void 0, void 0, function () {\n            var data, meta, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        data = isFirstSession ? { is_first_session: true } : {};\n                        if (!provideMeta) return [3 /*break*/, 2];\n                        return [4 /*yield*/, provideMeta()];\n                    case 1:\n                        _b = _c.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        _b = undefined;\n                        _c.label = 3;\n                    case 3:\n                        meta = _b;\n                        return [2 /*return*/, waitForAnswer(sendData(data, 'OPEN_ASSISTANT', meta))];\n                }\n            });\n        });\n    };\n    /** вызывает sendSystemMessage, куда подкладывает мету */\n    var sendMeta = function (sendSystemMessage) { return __awaiter(void 0, void 0, void 0, function () {\n        var meta, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!provideMeta) return [3 /*break*/, 2];\n                    return [4 /*yield*/, provideMeta()];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    _a = undefined;\n                    _b.label = 3;\n                case 3:\n                    meta = _a;\n                    if (typeof meta !== 'undefined') {\n                        sendSystemMessage({\n                            data: {},\n                            messageName: '',\n                        }, false, {\n                            meta: convertFieldValuesToString(meta || {}),\n                        });\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    /** отправляет server_action и мету */\n    var sendServerAction = function (serverAction, appInfo, messageName) {\n        if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n        return __awaiter(void 0, void 0, void 0, function () {\n            var messageId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        messageId = protocol.getMessageId();\n                        // мету и server_action отправляем в одном systemMessage\n                        return [4 /*yield*/, sendMeta(function (data, _, _a) {\n                                var meta = (_a === void 0 ? {} : _a).meta;\n                                var systemData = __rest(data, []);\n                                protocol.sendSystemMessage({\n                                    // eslint-disable-next-line @typescript-eslint/camelcase\n                                    data: __assign(__assign({}, systemData), { app_info: appInfo, server_action: serverAction }),\n                                    messageName: messageName || 'SERVER_ACTION',\n                                }, true, messageId, { meta: meta });\n                            })];\n                    case 1:\n                        // мету и server_action отправляем в одном systemMessage\n                        _a.sent();\n                        return [2 /*return*/, messageId];\n                }\n            });\n        });\n    };\n    /** отправляет текст и текущую мету */\n    var sendText = function (text, isSsml, shouldSendDisableDubbing) {\n        if (isSsml === void 0) { isSsml = false; }\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (text.trim() === '') {\n                    return [2 /*return*/, undefined];\n                }\n                return [2 /*return*/, protocol.batch(function (_a) {\n                        var sendSystemMessage = _a.sendSystemMessage, clientSendText = _a.sendText, sendSettings = _a.sendSettings, messageId = _a.messageId;\n                        return __awaiter(void 0, void 0, void 0, function () {\n                            var prevDubbing, sendDisableDubbing, isStillNeedReturnDubbing;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0: return [4 /*yield*/, sendMeta(sendSystemMessage)];\n                                    case 1:\n                                        _b.sent();\n                                        prevDubbing = protocol.configuration.settings.dubbing;\n                                        sendDisableDubbing = prevDubbing !== -1 && shouldSendDisableDubbing;\n                                        if (!sendDisableDubbing) return [3 /*break*/, 3];\n                                        return [4 /*yield*/, sendSettings({ dubbing: -1 }, false)];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3:\n                                        isSsml ? clientSendText(text, {}, 'application/ssml') : clientSendText(text, {});\n                                        isStillNeedReturnDubbing = prevDubbing === protocol.configuration.settings.dubbing;\n                                        if (sendDisableDubbing && isStillNeedReturnDubbing) {\n                                            sendSettings({ dubbing: prevDubbing });\n                                        }\n                                        return [2 /*return*/, messageId];\n                                }\n                            });\n                        });\n                    })];\n            });\n        });\n    };\n    /** инициализирует исходящий голосовой поток, факт. передает в callback параметры для отправки голоса,\n     * отправляет мету */\n    var createVoiceStream = function (callback) {\n        return protocol.batch(function (_a) {\n            var sendSystemMessage = _a.sendSystemMessage, sendVoice = _a.sendVoice, messageId = _a.messageId;\n            return __awaiter(void 0, void 0, void 0, function () {\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, sendMeta(sendSystemMessage)];\n                        case 1:\n                            _b.sent();\n                            return [4 /*yield*/, callback({\n                                    sendVoice: sendVoice,\n                                    messageId: messageId,\n                                    onMessage: function (cb) { return protocol.on('incoming', cb); },\n                                })];\n                        case 2:\n                            _b.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        });\n    };\n    var off = protocol.on('incoming', function (message) {\n        var _a, _b, _c;\n        if (message.voice) {\n            emit('voice', message.voice.data || new Uint8Array(), message);\n        }\n        if ((_a = message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n            emit('systemMessage', JSON.parse(message.systemMessage.data), message);\n        }\n        if (message.status) {\n            emit('status', message.status, message);\n        }\n        if (message.messageName === 'TAKE_HISTORY' && ((_b = message.bytes) === null || _b === void 0 ? void 0 : _b.data)) {\n            var history_1 = proto.GetHistoryResponse.decode((_c = message.bytes) === null || _c === void 0 ? void 0 : _c.data).historyMessages;\n            var parsedHistory = history_1.map(function (historyMessage) { return (__assign(__assign({}, historyMessage), { content: JSON.parse(historyMessage.content || '') })); });\n            emit('history', parsedHistory, message);\n        }\n    });\n    return {\n        destroy: function () {\n            off();\n        },\n        init: protocol.init,\n        createVoiceStream: createVoiceStream,\n        sendData: sendData,\n        sendMeta: sendMeta,\n        sendOpenAssistant: sendOpenAssistant,\n        sendServerAction: sendServerAction,\n        sendText: sendText,\n        sendCancel: sendCancel,\n        on: on,\n        waitForAnswer: waitForAnswer,\n    };\n};\n\nvar createClientMethods = function (_a) {\n    var getMessageId = _a.getMessageId, sendMessage = _a.sendMessage;\n    var send = function (_a) {\n        var payload = _a.payload, messageId = _a.messageId, other = __rest(_a, [\"payload\", \"messageId\"]);\n        sendMessage(__assign(__assign(__assign({ messageName: '' }, payload), { messageId: messageId }), other));\n    };\n    var sendDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                device: proto.Device.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendInitialSettings = function (data, last, messageId, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ initialSettings: proto.InitialSettings.create(data), last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var getHistoryRequest = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        var uuid = data.uuid, device = data.device, historyClient = data.history;\n        var historyProto = { messageTypes: historyClient === null || historyClient === void 0 ? void 0 : historyClient.messageTypes };\n        // Мапим объект настроек от пользователя в формат объекта протобафа\n        if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.app) {\n            historyProto.app = Object.entries(historyClient.app).reduce(function (acc, _a) {\n                var _b;\n                var key = _a[0], value = _a[1];\n                return (__assign(__assign({}, acc), (_b = {}, _b[key] = { value: value }, _b)));\n            }, {});\n        }\n        if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.offset) {\n            historyProto.offset = Object.entries(historyClient.offset).reduce(function (acc, _a) {\n                var _b;\n                var key = _a[0], value = _a[1];\n                return (__assign(__assign({}, acc), (_b = {}, _b[key] = { value: value.toString() }, _b)));\n            }, {});\n        }\n        return send({\n            payload: __assign(__assign({}, proto.ChatHistoryRequest.create({\n                uuid: uuid,\n                device: device,\n                getHistoryRequest: historyProto,\n            })), { messageName: 'GET_HISTORY', last: last ? 1 : -1 }),\n            messageId: messageId,\n        });\n    };\n    var sendCancel = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                cancel: proto.Cancel.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendLegacyDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                legacyDevice: proto.LegacyDevice.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendSettings = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                settings: proto.Settings.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendText = function (data, params, type, messageId) {\n        var _a;\n        if (params === void 0) { params = {}; }\n        if (type === void 0) { type = ''; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        var text = type ? { data: data, type: type } : { data: data };\n        send(__assign({ payload: {\n                text: proto.Text.create(text),\n                last: (_a = params.last) !== null && _a !== void 0 ? _a : 1,\n            }, messageId: messageId }, params));\n    };\n    var sendSystemMessage = function (_a, last, messageId, params) {\n        var data = _a.data, _b = _a.messageName, mesName = _b === void 0 ? '' : _b;\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        send({\n            payload: __assign({ systemMessage: proto.SystemMessage.create({\n                    data: JSON.stringify(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var sendVoice = function (data, last, messageId, mesName, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ voice: proto.Voice.create({\n                    data: new Uint8Array(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var batch = function (cb) {\n        var batchingMessageId = getMessageId();\n        var lastMessageSent = false;\n        var checkLastMessageStatus = function (last) {\n            if (lastMessageSent) {\n                if (last) {\n                    throw new Error(\"Can't send two last items in batch\");\n                }\n                else {\n                    throw new Error(\"Can't send messages in batch after last message have been sent\");\n                }\n            }\n            else if (last) {\n                lastMessageSent = true;\n            }\n        };\n        var upgradedSendText = function () {\n            var _a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                _a[_i] = arguments[_i];\n            }\n            var data = _a[0], params = _a[1], type = _a[2];\n            checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n            return sendText(data, params, type, batchingMessageId);\n        };\n        var upgradedSendSystemMessage = function (data, last, params) {\n            checkLastMessageStatus(last);\n            return sendSystemMessage(data, last, batchingMessageId, params);\n        };\n        var upgradedSendVoice = function (data, last, mesName, params) {\n            checkLastMessageStatus(last);\n            return sendVoice(data, last, batchingMessageId, mesName, params);\n        };\n        var upgradedSendSettings = function (data, last, messageId) {\n            checkLastMessageStatus(last);\n            return sendSettings(data, last, messageId);\n        };\n        return cb({\n            sendText: upgradedSendText,\n            sendSystemMessage: upgradedSendSystemMessage,\n            sendVoice: upgradedSendVoice,\n            sendSettings: upgradedSendSettings,\n            messageId: batchingMessageId,\n        });\n    };\n    return {\n        sendDevice: sendDevice,\n        sendInitialSettings: sendInitialSettings,\n        getHistoryRequest: getHistoryRequest,\n        sendCancel: sendCancel,\n        sendLegacyDevice: sendLegacyDevice,\n        sendSettings: sendSettings,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        batch: batch,\n    };\n};\n\nvar safeJSONParse = function (str, defaultValue) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (err) {\n        return defaultValue;\n    }\n};\nvar compileBasePayload = function (_a) {\n    var userId = _a.userId, token = _a.token, userChannel = _a.userChannel, version = _a.version, messageName = _a.messageName, vpsToken = _a.vpsToken;\n    if (version < 3) {\n        return {\n            userId: userId,\n            token: token,\n            userChannel: userChannel,\n            messageName: messageName,\n            vpsToken: vpsToken,\n            version: version,\n        };\n    }\n    return {\n        token: token,\n        messageName: messageName,\n        version: version,\n    };\n};\nvar appendHeader = function (uint8Array) {\n    // Добавляем 4 байта в начало с длинной сообщения\n    var arrayBuffer = new ArrayBuffer(4);\n    var dataView = new DataView(arrayBuffer, 0);\n    dataView.setInt32(0, uint8Array.length, true);\n    var newUint8Array = new Uint8Array(4 + uint8Array.length);\n    newUint8Array.set(new Uint8Array(arrayBuffer));\n    newUint8Array.set(uint8Array, 4);\n    return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n    // Убираем 4 байта в начале с длинной сообщения\n    var newUint8Array = new Uint8Array(uint8Array).slice(4);\n    return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n    var logger = _a.logger, getToken = _a.getToken, params = __rest(_a, [\"logger\", \"getToken\"]);\n    var configuration = __assign(__assign({}, params), { token: '' });\n    var url = configuration.url, userId = configuration.userId, userChannel = configuration.userChannel, locale = configuration.locale, device = configuration.device, settings = configuration.settings, legacyDevice = configuration.legacyDevice, version = configuration.version, messageName = configuration.messageName, vpsToken = configuration.vpsToken, meta = configuration.meta;\n    var basePayload = compileBasePayload({ userId: userId, token: '', messageName: messageName, vpsToken: vpsToken, userChannel: userChannel, version: version });\n    var _b = createNanoEvents(), on = _b.on, emit = _b.emit;\n    var subscriptions = [];\n    var messageQueue = [];\n    var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n    var currentSettings = { device: device, legacyDevice: legacyDevice, settings: settings, locale: locale };\n    var currentMessageId = Date.now();\n    var status = 'closed';\n    var destroyed = false;\n    var clearReadyTimer; // ид таймера установки состояния ready\n    var cancelUpdatingSettingsWhenSocketReady = function () { }; // отменяет обновление настроек VPS при готовности сокета\n    var getMessageId = function () {\n        return currentMessageId++;\n    };\n    var send = function (message) {\n        var createdMessage = proto.Message.create(__assign(__assign({}, basePayload), message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'outcoming', message: createdMessage });\n        var encodedMessage = proto.Message.encode(createdMessage).finish();\n        var encodedMessageWithHeader = appendHeader(encodedMessage);\n        transport.send(encodedMessageWithHeader);\n        emit('outcoming', createdMessage);\n    };\n    var sendMessage = function (message) {\n        // отправляем инициализационные сообщения или все, когда сессия = ready\n        if (status === 'ready' || (typeof initMessageId !== undefined && message.messageId === initMessageId)) {\n            send(message);\n            return;\n        }\n        // накапливаем сообщения, отправим после успешного коннекта\n        messageQueue.push(message);\n        if (status === 'closed' && !destroyed) {\n            transport.open(url);\n        }\n    };\n    var _c = createClientMethods({ getMessageId: getMessageId, sendMessage: sendMessage }), sendDeviceOriginal = _c.sendDevice, sendInitialSettingsOriginal = _c.sendInitialSettings, getHistoryRequestOriginal = _c.getHistoryRequest, sendCancel = _c.sendCancel, sendLegacyDeviceOriginal = _c.sendLegacyDevice, sendSettingsOriginal = _c.sendSettings, sendText = _c.sendText, sendSystemMessage = _c.sendSystemMessage, sendVoice = _c.sendVoice, batch = _c.batch;\n    var sendDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { device: data });\n        return sendDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var sendInitialSettings = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (data.device && data.settings) {\n            currentSettings = __assign(__assign({}, currentSettings), { device: data.device, settings: data.settings, locale: data.locale || undefined });\n        }\n        return sendInitialSettingsOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var getHistoryRequest = function (data) {\n        var _a, _b;\n        return getHistoryRequestOriginal({\n            device: currentSettings.device || null,\n            uuid: {\n                userId: ((_a = data.uuid) === null || _a === void 0 ? void 0 : _a.userId) || userId,\n                userChannel: ((_b = data.uuid) === null || _b === void 0 ? void 0 : _b.userChannel) || userChannel,\n            },\n            history: __assign({}, (data.history || {})),\n        });\n    };\n    var sendLegacyDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { legacyDevice: data });\n        return sendLegacyDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var updateDefaults = function (obj) {\n        Object.assign(basePayload, obj);\n        Object.assign(configuration, obj);\n    };\n    var updateDevice = function (obj) {\n        var _a, _b;\n        if (obj) {\n            var additionalInfo = obj.additionalInfo, deviceOptions = __rest(obj, [\"additionalInfo\"]);\n            var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {})\n                : {};\n            var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n            currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), { additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo)) });\n        }\n    };\n    var updateSettings = function (obj) {\n        var isSocketReady = status === 'connected' || status === 'ready';\n        cancelUpdatingSettingsWhenSocketReady();\n        Object.assign(currentSettings.settings, obj);\n        if (!isSocketReady) {\n            cancelUpdatingSettingsWhenSocketReady = on('ready', function () { return updateSettings(obj); });\n            return;\n        }\n        sendSettingsOriginal(obj);\n    };\n    subscriptions.push(transport.on('connecting', function () {\n        status = 'connecting';\n    }));\n    subscriptions.push(transport.on('close', function () {\n        status = 'closed';\n    }));\n    subscriptions.push(transport.on('open', function () { return __awaiter(void 0, void 0, void 0, function () {\n        var _a, _b, _c, _d, e_1;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _e.trys.push([0, 2, , 3]);\n                    _b = (_a = Object).assign;\n                    _c = [basePayload];\n                    _d = {};\n                    return [4 /*yield*/, getToken()];\n                case 1:\n                    _b.apply(_a, _c.concat([(_d.token = _e.sent(), _d)]));\n                    return [3 /*break*/, 3];\n                case 2:\n                    e_1 = _e.sent();\n                    emit('error', {\n                        type: 'GET_TOKEN_ERROR',\n                        message: e_1 === null || e_1 === void 0 ? void 0 : e_1.message,\n                    });\n                    return [2 /*return*/];\n                case 3:\n                    Object.assign(configuration, { token: basePayload.token });\n                    initMessageId = getMessageId();\n                    if (version < 3) {\n                        if (version === 1 && currentSettings.legacyDevice) {\n                            sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n                        }\n                        else if (version === 2 && currentSettings.device) {\n                            sendDevice(currentSettings.device, false, initMessageId);\n                        }\n                        sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n                    }\n                    else {\n                        sendInitialSettings({\n                            userId: userId,\n                            userChannel: userChannel,\n                            device: currentSettings.device,\n                            settings: currentSettings.settings,\n                            locale: version > 3 ? currentSettings.locale : undefined,\n                        }, true, initMessageId, meta);\n                    }\n                    status = 'connected';\n                    clearTimeout(clearReadyTimer);\n                    /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n                    /// т.к бек может разрывать сокет, если с settings что-то не так\n                    clearReadyTimer = window.setTimeout(function () {\n                        if (status !== 'connected') {\n                            return;\n                        }\n                        while (messageQueue.length > 0) {\n                            var message = messageQueue.shift();\n                            if (message) {\n                                send(message);\n                            }\n                        }\n                        status = 'ready';\n                        emit('ready');\n                    }, 500);\n                    logger === null || logger === void 0 ? void 0 : logger({ type: 'init', params: __assign(__assign({}, configuration), currentSettings) });\n                    return [2 /*return*/];\n            }\n        });\n    }); }));\n    subscriptions.push(transport.on('message', function (message) {\n        var decodedMessage = proto.Message.decode(removeHeader(message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'incoming', message: decodedMessage });\n        emit('incoming', decodedMessage);\n        if (decodedMessage.status) {\n            transport.close();\n        }\n    }));\n    return {\n        clearQueue: function () {\n            messageQueue.splice(0, messageQueue.length);\n        },\n        destroy: function () {\n            destroyed = true;\n            transport.close();\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        on: on,\n        getHistoryRequest: getHistoryRequest,\n        getMessageId: getMessageId,\n        sendCancel: sendCancel,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        send: sendMessage,\n        batch: batch,\n        changeConfiguration: updateDefaults,\n        changeDevice: updateDevice,\n        changeSettings: updateSettings,\n        reconnect: function () {\n            if (status !== 'closed') {\n                transport.reconnect(url); // даем время случиться close\n            }\n            else {\n                transport.open(url);\n            }\n        },\n        init: function () {\n            // в отличии от reconnect не обрывает коннект если он в порядке\n            if (status === 'ready' && window.navigator.onLine) {\n                return Promise.resolve();\n            }\n            return new Promise(function (resolve, reject) {\n                var subs = [];\n                subs.push(transport.on('open', function () {\n                    subs.map(function (sub) { return sub(); });\n                    resolve();\n                }));\n                subs.push(transport.on('error', function () {\n                    subs.map(function (sub) { return sub(); });\n                    reject(new Error('Network error'));\n                }));\n                transport.reconnect(url);\n            });\n        },\n        get currentMessageId() {\n            return currentMessageId;\n        },\n        get configuration() {\n            return configuration;\n        },\n    };\n};\n\nvar RETRY_INTERVAL = 300; // ms\nvar defaultWSCreator = function (url) { return new WebSocket(url); };\nvar createTransport = function (createWS) {\n    if (createWS === void 0) { createWS = defaultWSCreator; }\n    var _a = createNanoEvents(), on = _a.on, emit = _a.emit;\n    var retryTimeoutId = -1;\n    var retries = 0;\n    var status = 'closed';\n    var webSocket;\n    var stopped = true;\n    var close = function () {\n        stopped = true;\n        if (status === 'closing' || status === 'closed') {\n            return;\n        }\n        status = 'closing';\n        webSocket === null || webSocket === void 0 ? void 0 : webSocket.close();\n    };\n    var connect = function (url) {\n        status = 'connecting';\n        emit('connecting');\n        webSocket = createWS(url);\n        webSocket.binaryType = 'arraybuffer';\n        webSocket.addEventListener('open', function () {\n            if (webSocket.readyState !== 1) {\n                return;\n            }\n            clearTimeout(retryTimeoutId);\n            retries = 0;\n            status = 'open';\n            emit('open');\n        });\n        webSocket.addEventListener('close', function () {\n            status = 'closed';\n            emit('close');\n        });\n        webSocket.addEventListener('error', function (e) {\n            if (status !== 'connecting') {\n                throw e;\n            }\n            // пробуем переподключаться, если возникла ошибка при коннекте\n            if (!webSocket || (webSocket.readyState === 3 && !stopped)) {\n                clearTimeout(retryTimeoutId);\n                if (retries < 2) {\n                    retryTimeoutId = window.setTimeout(function () {\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                        open(url);\n                        retries++;\n                    }, RETRY_INTERVAL * retries);\n                }\n                else {\n                    retries = 0;\n                    emit('error', e);\n                }\n            }\n        });\n        webSocket.addEventListener('message', function (_a) {\n            var data = _a.data;\n            emit('message', data);\n        });\n    };\n    var open = function (url) {\n        if (status === 'connecting' || status === 'open') {\n            return;\n        }\n        stopped = false;\n        connect(url);\n    };\n    var reconnect = function (url) {\n        if (status === 'closed') {\n            open(url);\n            return;\n        }\n        setTimeout(function () { return reconnect(url); });\n        close();\n    };\n    var send = function (data) {\n        webSocket.send(data);\n    };\n    return {\n        close: close,\n        get isOnline() {\n            return window.navigator.onLine;\n        },\n        on: on,\n        open: open,\n        reconnect: reconnect,\n        send: send,\n    };\n};\n\nvar convertToMetaPermissions = function (permission) {\n    return Object.keys(permission).map(function (key) { return ({\n        type: key,\n        status: permission[key],\n    }); });\n};\nvar getLocation = function () { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(function (_a) {\n                    var coords = _a.coords, timestamp = _a.timestamp;\n                    resolve({\n                        lat: coords.latitude,\n                        lon: coords.longitude,\n                        accuracy: coords.accuracy,\n                        timestamp: timestamp,\n                    });\n                }, reject, { timeout: 5000 });\n            })];\n    });\n}); };\nvar getTime = function () { return ({\n    // Здесь нужен полифилл, т.к. `Intl.DateTimeFormat().resolvedOptions().timeZone` - возвращает пустую строку\n    timezone_id: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    timezone_offset_sec: -new Date().getTimezoneOffset() * 60,\n    timestamp: Date.now(),\n}); };\nvar getAnswerForRequestPermissions = function (requestMessageId, appInfo, items) { return __awaiter(void 0, void 0, void 0, function () {\n    var permissions, response;\n    return __generator(this, function (_a) {\n        permissions = {\n            record_audio: 'denied_once',\n            geo: 'denied_once',\n            read_contacts: 'denied_permanently',\n            push: 'denied_once',\n        };\n        response = {\n            app_info: appInfo,\n            meta: {\n                time: getTime(),\n                permissions: [],\n            },\n            server_action: {\n                action_id: 'command_response',\n                request_message_id: requestMessageId,\n                command_response: {\n                    request_permissions: {\n                        permissions: [],\n                    },\n                },\n            },\n        };\n        return [2 /*return*/, Promise.all(items.map(function (permission) { return __awaiter(void 0, void 0, void 0, function () {\n                var _a, location_1, _b;\n                var _c, _d, _e;\n                return __generator(this, function (_f) {\n                    switch (_f.label) {\n                        case 0:\n                            _a = permission;\n                            switch (_a) {\n                                case 'geo': return [3 /*break*/, 1];\n                            }\n                            return [3 /*break*/, 5];\n                        case 1:\n                            _f.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, getLocation()];\n                        case 2:\n                            location_1 = _f.sent();\n                            permissions.geo = 'granted';\n                            response.meta.location = location_1;\n                            (_c = response.server_action.command_response.request_permissions) === null || _c === void 0 ? void 0 : _c.permissions.push({\n                                type: 'geo',\n                                status: 'granted',\n                            });\n                            return [3 /*break*/, 4];\n                        case 3:\n                            _b = _f.sent();\n                            permissions.geo = 'denied_permanently';\n                            (_d = response.server_action.command_response.request_permissions) === null || _d === void 0 ? void 0 : _d.permissions.push({\n                                type: 'geo',\n                                status: 'denied_permanently',\n                            });\n                            return [3 /*break*/, 4];\n                        case 4: return [3 /*break*/, 6];\n                        case 5:\n                            // остальные доступы не поддерживаем\n                            (_e = response.server_action.command_response.request_permissions) === null || _e === void 0 ? void 0 : _e.permissions.push({\n                                type: permission,\n                                status: 'denied_permanently',\n                            });\n                            return [3 /*break*/, 6];\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            }); })).then(function () {\n                response.meta.permissions = convertToMetaPermissions(permissions);\n                return response;\n            })];\n    });\n}); };\n\nvar mtt = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Music2TrackProtocol = (function() {\n    \n        /**\n         * Namespace Music2TrackProtocol.\n         * @exports Music2TrackProtocol\n         * @namespace\n         */\n        var Music2TrackProtocol = {};\n    \n        Music2TrackProtocol.DecoderResult = (function() {\n    \n            /**\n             * Properties of a DecoderResult.\n             * @memberof Music2TrackProtocol\n             * @interface IDecoderResult\n             * @property {string|null} [result] DecoderResult result\n             * @property {boolean|null} [isMusicFound] DecoderResult isMusicFound\n             * @property {boolean|null} [isFinal] DecoderResult isFinal\n             */\n    \n            /**\n             * Constructs a new DecoderResult.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents a DecoderResult.\n             * @implements IDecoderResult\n             * @constructor\n             * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n             */\n            function DecoderResult(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * DecoderResult result.\n             * @member {string} result\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.result = \"\";\n    \n            /**\n             * DecoderResult isMusicFound.\n             * @member {boolean} isMusicFound\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.isMusicFound = false;\n    \n            /**\n             * DecoderResult isFinal.\n             * @member {boolean} isFinal\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.isFinal = false;\n    \n            /**\n             * Creates a new DecoderResult instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult instance\n             */\n            DecoderResult.create = function create(properties) {\n                return new DecoderResult(properties);\n            };\n    \n            /**\n             * Encodes the specified DecoderResult message. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DecoderResult.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.result);\n                if (message.isMusicFound != null && Object.hasOwnProperty.call(message, \"isMusicFound\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isMusicFound);\n                if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isFinal);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a DecoderResult message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DecoderResult.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.DecoderResult();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.result = reader.string();\n                        break;\n                    case 2:\n                        message.isMusicFound = reader.bool();\n                        break;\n                    case 3:\n                        message.isFinal = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a DecoderResult message.\n             * @function verify\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DecoderResult.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    if (!$util.isString(message.result))\n                        return \"result: string expected\";\n                if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\"))\n                    if (typeof message.isMusicFound !== \"boolean\")\n                        return \"isMusicFound: boolean expected\";\n                if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                    if (typeof message.isFinal !== \"boolean\")\n                        return \"isFinal: boolean expected\";\n                return null;\n            };\n    \n            /**\n             * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             */\n            DecoderResult.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.DecoderResult)\n                    return object;\n                var message = new $root.Music2TrackProtocol.DecoderResult();\n                if (object.result != null)\n                    message.result = String(object.result);\n                if (object.isMusicFound != null)\n                    message.isMusicFound = Boolean(object.isMusicFound);\n                if (object.isFinal != null)\n                    message.isFinal = Boolean(object.isFinal);\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.DecoderResult} message DecoderResult\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DecoderResult.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.result = \"\";\n                    object.isMusicFound = false;\n                    object.isFinal = false;\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    object.result = message.result;\n                if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\"))\n                    object.isMusicFound = message.isMusicFound;\n                if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                    object.isFinal = message.isFinal;\n                return object;\n            };\n    \n            /**\n             * Converts this DecoderResult to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DecoderResult.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return DecoderResult;\n        })();\n    \n        Music2TrackProtocol.ErrorResponse = (function() {\n    \n            /**\n             * Properties of an ErrorResponse.\n             * @memberof Music2TrackProtocol\n             * @interface IErrorResponse\n             * @property {string|null} [errorMessage] ErrorResponse errorMessage\n             * @property {number|null} [errorCode] ErrorResponse errorCode\n             */\n    \n            /**\n             * Constructs a new ErrorResponse.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents an ErrorResponse.\n             * @implements IErrorResponse\n             * @constructor\n             * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n             */\n            function ErrorResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * ErrorResponse errorMessage.\n             * @member {string} errorMessage\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             */\n            ErrorResponse.prototype.errorMessage = \"\";\n    \n            /**\n             * ErrorResponse errorCode.\n             * @member {number} errorCode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             */\n            ErrorResponse.prototype.errorCode = 0;\n    \n            /**\n             * Creates a new ErrorResponse instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse instance\n             */\n            ErrorResponse.create = function create(properties) {\n                return new ErrorResponse(properties);\n            };\n    \n            /**\n             * Encodes the specified ErrorResponse message. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ErrorResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);\n                if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorCode);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes an ErrorResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ErrorResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.ErrorResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.errorMessage = reader.string();\n                        break;\n                    case 2:\n                        message.errorCode = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies an ErrorResponse message.\n             * @function verify\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ErrorResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                    if (!$util.isString(message.errorMessage))\n                        return \"errorMessage: string expected\";\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    if (!$util.isInteger(message.errorCode))\n                        return \"errorCode: integer expected\";\n                return null;\n            };\n    \n            /**\n             * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             */\n            ErrorResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.ErrorResponse)\n                    return object;\n                var message = new $root.Music2TrackProtocol.ErrorResponse();\n                if (object.errorMessage != null)\n                    message.errorMessage = String(object.errorMessage);\n                if (object.errorCode != null)\n                    message.errorCode = object.errorCode | 0;\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.ErrorResponse} message ErrorResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ErrorResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.errorMessage = \"\";\n                    object.errorCode = 0;\n                }\n                if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                    object.errorMessage = message.errorMessage;\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    object.errorCode = message.errorCode;\n                return object;\n            };\n    \n            /**\n             * Converts this ErrorResponse to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ErrorResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ErrorResponse;\n        })();\n    \n        Music2TrackProtocol.MttResponse = (function() {\n    \n            /**\n             * Properties of a MttResponse.\n             * @memberof Music2TrackProtocol\n             * @interface IMttResponse\n             * @property {Music2TrackProtocol.IDecoderResult|null} [decoderResultField] MttResponse decoderResultField\n             * @property {Music2TrackProtocol.IErrorResponse|null} [errorResponse] MttResponse errorResponse\n             */\n    \n            /**\n             * Constructs a new MttResponse.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents a MttResponse.\n             * @implements IMttResponse\n             * @constructor\n             * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n             */\n            function MttResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * MttResponse decoderResultField.\n             * @member {Music2TrackProtocol.IDecoderResult|null|undefined} decoderResultField\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            MttResponse.prototype.decoderResultField = null;\n    \n            /**\n             * MttResponse errorResponse.\n             * @member {Music2TrackProtocol.IErrorResponse|null|undefined} errorResponse\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            MttResponse.prototype.errorResponse = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * MttResponse MessageType.\n             * @member {\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            Object.defineProperty(MttResponse.prototype, \"MessageType\", {\n                get: $util.oneOfGetter($oneOfFields = [\"decoderResultField\", \"errorResponse\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Creates a new MttResponse instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse instance\n             */\n            MttResponse.create = function create(properties) {\n                return new MttResponse(properties);\n            };\n    \n            /**\n             * Encodes the specified MttResponse message. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MttResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\"))\n                    $root.Music2TrackProtocol.DecoderResult.encode(message.decoderResultField, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\"))\n                    $root.Music2TrackProtocol.ErrorResponse.encode(message.errorResponse, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified MttResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MttResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a MttResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MttResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.MttResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a MttResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MttResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a MttResponse message.\n             * @function verify\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MttResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                    properties.MessageType = 1;\n                    {\n                        var error = $root.Music2TrackProtocol.DecoderResult.verify(message.decoderResultField);\n                        if (error)\n                            return \"decoderResultField.\" + error;\n                    }\n                }\n                if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                    if (properties.MessageType === 1)\n                        return \"MessageType: multiple values\";\n                    properties.MessageType = 1;\n                    {\n                        var error = $root.Music2TrackProtocol.ErrorResponse.verify(message.errorResponse);\n                        if (error)\n                            return \"errorResponse.\" + error;\n                    }\n                }\n                return null;\n            };\n    \n            /**\n             * Creates a MttResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             */\n            MttResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.MttResponse)\n                    return object;\n                var message = new $root.Music2TrackProtocol.MttResponse();\n                if (object.decoderResultField != null) {\n                    if (typeof object.decoderResultField !== \"object\")\n                        throw TypeError(\".Music2TrackProtocol.MttResponse.decoderResultField: object expected\");\n                    message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.fromObject(object.decoderResultField);\n                }\n                if (object.errorResponse != null) {\n                    if (typeof object.errorResponse !== \"object\")\n                        throw TypeError(\".Music2TrackProtocol.MttResponse.errorResponse: object expected\");\n                    message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.fromObject(object.errorResponse);\n                }\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a MttResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.MttResponse} message MttResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MttResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                    object.decoderResultField = $root.Music2TrackProtocol.DecoderResult.toObject(message.decoderResultField, options);\n                    if (options.oneofs)\n                        object.MessageType = \"decoderResultField\";\n                }\n                if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                    object.errorResponse = $root.Music2TrackProtocol.ErrorResponse.toObject(message.errorResponse, options);\n                    if (options.oneofs)\n                        object.MessageType = \"errorResponse\";\n                }\n                return object;\n            };\n    \n            /**\n             * Converts this MttResponse to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MttResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return MttResponse;\n        })();\n    \n        return Music2TrackProtocol;\n    })();\n\n    return $root;\n});\n});\n\nvar createMusicRecognizer = function (voiceListener) {\n    var off;\n    var status = 'inactive';\n    var currentMessageId;\n    var stop = function () {\n        if (voiceListener.status !== 'stopped') {\n            status = 'inactive';\n            voiceListener.stop();\n        }\n    };\n    var start = function (_a) {\n        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n        return voiceListener\n            .listen(function (data, last) { return !last && sendVoice(data, last, MessageNames.MUSIC_RECOGNITION); })\n            .then(function () {\n            status = 'active';\n            currentMessageId = messageId;\n            off = onMessage(function (message) {\n                var _a, _b;\n                if (message.status && message.status.code != null && message.status.code < 0) {\n                    off();\n                    stop();\n                }\n                if (message.messageId === messageId &&\n                    message.messageName.toUpperCase() === MessageNames.MUSIC_RECOGNITION) {\n                    if (!((_b = (_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {\n                        return;\n                    }\n                    var _c = mtt.Music2TrackProtocol.MttResponse.decode(message.bytes.data), decoderResultField = _c.decoderResultField, errorResponse = _c.errorResponse;\n                    if ((decoderResultField === null || decoderResultField === void 0 ? void 0 : decoderResultField.isFinal) || errorResponse) {\n                        off();\n                        stop();\n                    }\n                }\n            });\n        });\n    };\n    return {\n        start: start,\n        stop: stop,\n        get status() {\n            return status;\n        },\n        get messageId() {\n            return currentMessageId;\n        },\n    };\n};\n\nvar asr = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Variables = (function() {\n    \n        /**\n         * Properties of a Variables.\n         * @exports IVariables\n         * @interface IVariables\n         * @property {Object.<string,string>|null} [variables] Variables variables\n         */\n    \n        /**\n         * Constructs a new Variables.\n         * @exports Variables\n         * @classdesc Represents a Variables.\n         * @implements IVariables\n         * @constructor\n         * @param {IVariables=} [properties] Properties to set\n         */\n        function Variables(properties) {\n            this.variables = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Variables variables.\n         * @member {Object.<string,string>} variables\n         * @memberof Variables\n         * @instance\n         */\n        Variables.prototype.variables = $util.emptyObject;\n    \n        /**\n         * Creates a new Variables instance using the specified properties.\n         * @function create\n         * @memberof Variables\n         * @static\n         * @param {IVariables=} [properties] Properties to set\n         * @returns {Variables} Variables instance\n         */\n        Variables.create = function create(properties) {\n            return new Variables(properties);\n        };\n    \n        /**\n         * Encodes the specified Variables message. Does not implicitly {@link Variables.verify|verify} messages.\n         * @function encode\n         * @memberof Variables\n         * @static\n         * @param {IVariables} message Variables message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Variables.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Variables message, length delimited. Does not implicitly {@link Variables.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Variables\n         * @static\n         * @param {IVariables} message Variables message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Variables.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Variables message from the specified reader or buffer.\n         * @function decode\n         * @memberof Variables\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Variables} Variables\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Variables.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Variables(), key, value;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (message.variables === $util.emptyObject)\n                        message.variables = {};\n                    var end2 = reader.uint32() + reader.pos;\n                    key = \"\";\n                    value = \"\";\n                    while (reader.pos < end2) {\n                        var tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.string();\n                            break;\n                        case 2:\n                            value = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.variables[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Variables message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Variables\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Variables} Variables\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Variables.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Variables message.\n         * @function verify\n         * @memberof Variables\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Variables.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                if (!$util.isObject(message.variables))\n                    return \"variables: object expected\";\n                var key = Object.keys(message.variables);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variables[key[i]]))\n                        return \"variables: string{k:string} expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Variables message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Variables\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Variables} Variables\n         */\n        Variables.fromObject = function fromObject(object) {\n            if (object instanceof $root.Variables)\n                return object;\n            var message = new $root.Variables();\n            if (object.variables) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".Variables.variables: object expected\");\n                message.variables = {};\n                for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i)\n                    message.variables[keys[i]] = String(object.variables[keys[i]]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Variables message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Variables\n         * @static\n         * @param {Variables} message Variables\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Variables.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.variables = {};\n            var keys2;\n            if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n                object.variables = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variables[keys2[j]] = message.variables[keys2[j]];\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this Variables to JSON.\n         * @function toJSON\n         * @memberof Variables\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Variables.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Variables;\n    })();\n    \n    $root.UndecodedSeconds = (function() {\n    \n        /**\n         * Properties of an UndecodedSeconds.\n         * @exports IUndecodedSeconds\n         * @interface IUndecodedSeconds\n         * @property {number|null} [undecodedSeconds] UndecodedSeconds undecodedSeconds\n         */\n    \n        /**\n         * Constructs a new UndecodedSeconds.\n         * @exports UndecodedSeconds\n         * @classdesc Represents an UndecodedSeconds.\n         * @implements IUndecodedSeconds\n         * @constructor\n         * @param {IUndecodedSeconds=} [properties] Properties to set\n         */\n        function UndecodedSeconds(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * UndecodedSeconds undecodedSeconds.\n         * @member {number} undecodedSeconds\n         * @memberof UndecodedSeconds\n         * @instance\n         */\n        UndecodedSeconds.prototype.undecodedSeconds = 0;\n    \n        /**\n         * Creates a new UndecodedSeconds instance using the specified properties.\n         * @function create\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds=} [properties] Properties to set\n         * @returns {UndecodedSeconds} UndecodedSeconds instance\n         */\n        UndecodedSeconds.create = function create(properties) {\n            return new UndecodedSeconds(properties);\n        };\n    \n        /**\n         * Encodes the specified UndecodedSeconds message. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n         * @function encode\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UndecodedSeconds.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.undecodedSeconds != null && Object.hasOwnProperty.call(message, \"undecodedSeconds\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.undecodedSeconds);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified UndecodedSeconds message, length delimited. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UndecodedSeconds.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an UndecodedSeconds message from the specified reader or buffer.\n         * @function decode\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UndecodedSeconds.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UndecodedSeconds();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.undecodedSeconds = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an UndecodedSeconds message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UndecodedSeconds.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an UndecodedSeconds message.\n         * @function verify\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UndecodedSeconds.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\"))\n                if (typeof message.undecodedSeconds !== \"number\")\n                    return \"undecodedSeconds: number expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an UndecodedSeconds message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         */\n        UndecodedSeconds.fromObject = function fromObject(object) {\n            if (object instanceof $root.UndecodedSeconds)\n                return object;\n            var message = new $root.UndecodedSeconds();\n            if (object.undecodedSeconds != null)\n                message.undecodedSeconds = Number(object.undecodedSeconds);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an UndecodedSeconds message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {UndecodedSeconds} message UndecodedSeconds\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UndecodedSeconds.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.undecodedSeconds = 0;\n            if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\"))\n                object.undecodedSeconds = options.json && !isFinite(message.undecodedSeconds) ? String(message.undecodedSeconds) : message.undecodedSeconds;\n            return object;\n        };\n    \n        /**\n         * Converts this UndecodedSeconds to JSON.\n         * @function toJSON\n         * @memberof UndecodedSeconds\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UndecodedSeconds.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return UndecodedSeconds;\n    })();\n    \n    $root.FullyFinalized = (function() {\n    \n        /**\n         * Properties of a FullyFinalized.\n         * @exports IFullyFinalized\n         * @interface IFullyFinalized\n         */\n    \n        /**\n         * Constructs a new FullyFinalized.\n         * @exports FullyFinalized\n         * @classdesc Represents a FullyFinalized.\n         * @implements IFullyFinalized\n         * @constructor\n         * @param {IFullyFinalized=} [properties] Properties to set\n         */\n        function FullyFinalized(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Creates a new FullyFinalized instance using the specified properties.\n         * @function create\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized=} [properties] Properties to set\n         * @returns {FullyFinalized} FullyFinalized instance\n         */\n        FullyFinalized.create = function create(properties) {\n            return new FullyFinalized(properties);\n        };\n    \n        /**\n         * Encodes the specified FullyFinalized message. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n         * @function encode\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FullyFinalized.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified FullyFinalized message, length delimited. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FullyFinalized.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a FullyFinalized message from the specified reader or buffer.\n         * @function decode\n         * @memberof FullyFinalized\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {FullyFinalized} FullyFinalized\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FullyFinalized.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FullyFinalized();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a FullyFinalized message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof FullyFinalized\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {FullyFinalized} FullyFinalized\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FullyFinalized.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a FullyFinalized message.\n         * @function verify\n         * @memberof FullyFinalized\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FullyFinalized.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a FullyFinalized message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof FullyFinalized\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {FullyFinalized} FullyFinalized\n         */\n        FullyFinalized.fromObject = function fromObject(object) {\n            if (object instanceof $root.FullyFinalized)\n                return object;\n            return new $root.FullyFinalized();\n        };\n    \n        /**\n         * Creates a plain object from a FullyFinalized message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof FullyFinalized\n         * @static\n         * @param {FullyFinalized} message FullyFinalized\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FullyFinalized.toObject = function toObject() {\n            return {};\n        };\n    \n        /**\n         * Converts this FullyFinalized to JSON.\n         * @function toJSON\n         * @memberof FullyFinalized\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FullyFinalized.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return FullyFinalized;\n    })();\n    \n    $root.EmotionResult = (function() {\n    \n        /**\n         * Properties of an EmotionResult.\n         * @exports IEmotionResult\n         * @interface IEmotionResult\n         * @property {string|null} [name] EmotionResult name\n         * @property {number|null} [confidence] EmotionResult confidence\n         */\n    \n        /**\n         * Constructs a new EmotionResult.\n         * @exports EmotionResult\n         * @classdesc Represents an EmotionResult.\n         * @implements IEmotionResult\n         * @constructor\n         * @param {IEmotionResult=} [properties] Properties to set\n         */\n        function EmotionResult(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * EmotionResult name.\n         * @member {string} name\n         * @memberof EmotionResult\n         * @instance\n         */\n        EmotionResult.prototype.name = \"\";\n    \n        /**\n         * EmotionResult confidence.\n         * @member {number} confidence\n         * @memberof EmotionResult\n         * @instance\n         */\n        EmotionResult.prototype.confidence = 0;\n    \n        /**\n         * Creates a new EmotionResult instance using the specified properties.\n         * @function create\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult=} [properties] Properties to set\n         * @returns {EmotionResult} EmotionResult instance\n         */\n        EmotionResult.create = function create(properties) {\n            return new EmotionResult(properties);\n        };\n    \n        /**\n         * Encodes the specified EmotionResult message. Does not implicitly {@link EmotionResult.verify|verify} messages.\n         * @function encode\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult} message EmotionResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmotionResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.confidence != null && Object.hasOwnProperty.call(message, \"confidence\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified EmotionResult message, length delimited. Does not implicitly {@link EmotionResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult} message EmotionResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmotionResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an EmotionResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof EmotionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {EmotionResult} EmotionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmotionResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EmotionResult();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.confidence = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an EmotionResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof EmotionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {EmotionResult} EmotionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmotionResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an EmotionResult message.\n         * @function verify\n         * @memberof EmotionResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EmotionResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.confidence != null && message.hasOwnProperty(\"confidence\"))\n                if (typeof message.confidence !== \"number\")\n                    return \"confidence: number expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an EmotionResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof EmotionResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {EmotionResult} EmotionResult\n         */\n        EmotionResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.EmotionResult)\n                return object;\n            var message = new $root.EmotionResult();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.confidence != null)\n                message.confidence = Number(object.confidence);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an EmotionResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof EmotionResult\n         * @static\n         * @param {EmotionResult} message EmotionResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmotionResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.confidence = 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.confidence != null && message.hasOwnProperty(\"confidence\"))\n                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;\n            return object;\n        };\n    \n        /**\n         * Converts this EmotionResult to JSON.\n         * @function toJSON\n         * @memberof EmotionResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmotionResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return EmotionResult;\n    })();\n    \n    $root.Hypothesis = (function() {\n    \n        /**\n         * Properties of a Hypothesis.\n         * @exports IHypothesis\n         * @interface IHypothesis\n         * @property {string|null} [words] Hypothesis words\n         * @property {number|null} [acousticCost] Hypothesis acousticCost\n         * @property {number|null} [linguisticCost] Hypothesis linguisticCost\n         * @property {number|null} [finalCost] Hypothesis finalCost\n         * @property {number|null} [phraseStart] Hypothesis phraseStart\n         * @property {number|null} [phraseEnd] Hypothesis phraseEnd\n         * @property {string|null} [normalizedText] Hypothesis normalizedText\n         */\n    \n        /**\n         * Constructs a new Hypothesis.\n         * @exports Hypothesis\n         * @classdesc Represents a Hypothesis.\n         * @implements IHypothesis\n         * @constructor\n         * @param {IHypothesis=} [properties] Properties to set\n         */\n        function Hypothesis(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Hypothesis words.\n         * @member {string} words\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.words = \"\";\n    \n        /**\n         * Hypothesis acousticCost.\n         * @member {number} acousticCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.acousticCost = 0;\n    \n        /**\n         * Hypothesis linguisticCost.\n         * @member {number} linguisticCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.linguisticCost = 0;\n    \n        /**\n         * Hypothesis finalCost.\n         * @member {number} finalCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.finalCost = 0;\n    \n        /**\n         * Hypothesis phraseStart.\n         * @member {number} phraseStart\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.phraseStart = 0;\n    \n        /**\n         * Hypothesis phraseEnd.\n         * @member {number} phraseEnd\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.phraseEnd = 0;\n    \n        /**\n         * Hypothesis normalizedText.\n         * @member {string} normalizedText\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.normalizedText = \"\";\n    \n        /**\n         * Creates a new Hypothesis instance using the specified properties.\n         * @function create\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis=} [properties] Properties to set\n         * @returns {Hypothesis} Hypothesis instance\n         */\n        Hypothesis.create = function create(properties) {\n            return new Hypothesis(properties);\n        };\n    \n        /**\n         * Encodes the specified Hypothesis message. Does not implicitly {@link Hypothesis.verify|verify} messages.\n         * @function encode\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis} message Hypothesis message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Hypothesis.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.words != null && Object.hasOwnProperty.call(message, \"words\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.words);\n            if (message.acousticCost != null && Object.hasOwnProperty.call(message, \"acousticCost\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.acousticCost);\n            if (message.linguisticCost != null && Object.hasOwnProperty.call(message, \"linguisticCost\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.linguisticCost);\n            if (message.finalCost != null && Object.hasOwnProperty.call(message, \"finalCost\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.finalCost);\n            if (message.phraseStart != null && Object.hasOwnProperty.call(message, \"phraseStart\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.phraseStart);\n            if (message.phraseEnd != null && Object.hasOwnProperty.call(message, \"phraseEnd\"))\n                writer.uint32(/* id 6, wireType 5 =*/53).float(message.phraseEnd);\n            if (message.normalizedText != null && Object.hasOwnProperty.call(message, \"normalizedText\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.normalizedText);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Hypothesis message, length delimited. Does not implicitly {@link Hypothesis.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis} message Hypothesis message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Hypothesis.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Hypothesis message from the specified reader or buffer.\n         * @function decode\n         * @memberof Hypothesis\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Hypothesis} Hypothesis\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Hypothesis.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Hypothesis();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.words = reader.string();\n                    break;\n                case 2:\n                    message.acousticCost = reader.float();\n                    break;\n                case 3:\n                    message.linguisticCost = reader.float();\n                    break;\n                case 4:\n                    message.finalCost = reader.float();\n                    break;\n                case 5:\n                    message.phraseStart = reader.float();\n                    break;\n                case 6:\n                    message.phraseEnd = reader.float();\n                    break;\n                case 7:\n                    message.normalizedText = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Hypothesis message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Hypothesis\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Hypothesis} Hypothesis\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Hypothesis.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Hypothesis message.\n         * @function verify\n         * @memberof Hypothesis\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Hypothesis.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.words != null && message.hasOwnProperty(\"words\"))\n                if (!$util.isString(message.words))\n                    return \"words: string expected\";\n            if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\"))\n                if (typeof message.acousticCost !== \"number\")\n                    return \"acousticCost: number expected\";\n            if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\"))\n                if (typeof message.linguisticCost !== \"number\")\n                    return \"linguisticCost: number expected\";\n            if (message.finalCost != null && message.hasOwnProperty(\"finalCost\"))\n                if (typeof message.finalCost !== \"number\")\n                    return \"finalCost: number expected\";\n            if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\"))\n                if (typeof message.phraseStart !== \"number\")\n                    return \"phraseStart: number expected\";\n            if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\"))\n                if (typeof message.phraseEnd !== \"number\")\n                    return \"phraseEnd: number expected\";\n            if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\"))\n                if (!$util.isString(message.normalizedText))\n                    return \"normalizedText: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Hypothesis message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Hypothesis\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Hypothesis} Hypothesis\n         */\n        Hypothesis.fromObject = function fromObject(object) {\n            if (object instanceof $root.Hypothesis)\n                return object;\n            var message = new $root.Hypothesis();\n            if (object.words != null)\n                message.words = String(object.words);\n            if (object.acousticCost != null)\n                message.acousticCost = Number(object.acousticCost);\n            if (object.linguisticCost != null)\n                message.linguisticCost = Number(object.linguisticCost);\n            if (object.finalCost != null)\n                message.finalCost = Number(object.finalCost);\n            if (object.phraseStart != null)\n                message.phraseStart = Number(object.phraseStart);\n            if (object.phraseEnd != null)\n                message.phraseEnd = Number(object.phraseEnd);\n            if (object.normalizedText != null)\n                message.normalizedText = String(object.normalizedText);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Hypothesis message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Hypothesis\n         * @static\n         * @param {Hypothesis} message Hypothesis\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Hypothesis.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.words = \"\";\n                object.acousticCost = 0;\n                object.linguisticCost = 0;\n                object.finalCost = 0;\n                object.phraseStart = 0;\n                object.phraseEnd = 0;\n                object.normalizedText = \"\";\n            }\n            if (message.words != null && message.hasOwnProperty(\"words\"))\n                object.words = message.words;\n            if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\"))\n                object.acousticCost = options.json && !isFinite(message.acousticCost) ? String(message.acousticCost) : message.acousticCost;\n            if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\"))\n                object.linguisticCost = options.json && !isFinite(message.linguisticCost) ? String(message.linguisticCost) : message.linguisticCost;\n            if (message.finalCost != null && message.hasOwnProperty(\"finalCost\"))\n                object.finalCost = options.json && !isFinite(message.finalCost) ? String(message.finalCost) : message.finalCost;\n            if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\"))\n                object.phraseStart = options.json && !isFinite(message.phraseStart) ? String(message.phraseStart) : message.phraseStart;\n            if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\"))\n                object.phraseEnd = options.json && !isFinite(message.phraseEnd) ? String(message.phraseEnd) : message.phraseEnd;\n            if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\"))\n                object.normalizedText = message.normalizedText;\n            return object;\n        };\n    \n        /**\n         * Converts this Hypothesis to JSON.\n         * @function toJSON\n         * @memberof Hypothesis\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Hypothesis.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Hypothesis;\n    })();\n    \n    $root.DecoderResult = (function() {\n    \n        /**\n         * Properties of a DecoderResult.\n         * @exports IDecoderResult\n         * @interface IDecoderResult\n         * @property {Array.<IHypothesis>|null} [hypothesis] DecoderResult hypothesis\n         * @property {number|null} [chunkStart] DecoderResult chunkStart\n         * @property {number|null} [chunkEnd] DecoderResult chunkEnd\n         * @property {number|null} [timeEndpointDetectionMs] DecoderResult timeEndpointDetectionMs\n         * @property {number|null} [timeDecodingMs] DecoderResult timeDecodingMs\n         * @property {IVariables|null} [variables] DecoderResult variables\n         * @property {boolean|null} [isFinal] DecoderResult isFinal\n         * @property {Array.<IEmotionResult>|null} [emotionResult] DecoderResult emotionResult\n         * @property {Array.<DecoderResult.IContextAnswer>|null} [contextAnswer] DecoderResult contextAnswer\n         */\n    \n        /**\n         * Constructs a new DecoderResult.\n         * @exports DecoderResult\n         * @classdesc Represents a DecoderResult.\n         * @implements IDecoderResult\n         * @constructor\n         * @param {IDecoderResult=} [properties] Properties to set\n         */\n        function DecoderResult(properties) {\n            this.hypothesis = [];\n            this.emotionResult = [];\n            this.contextAnswer = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * DecoderResult hypothesis.\n         * @member {Array.<IHypothesis>} hypothesis\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.hypothesis = $util.emptyArray;\n    \n        /**\n         * DecoderResult chunkStart.\n         * @member {number} chunkStart\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.chunkStart = 0;\n    \n        /**\n         * DecoderResult chunkEnd.\n         * @member {number} chunkEnd\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.chunkEnd = 0;\n    \n        /**\n         * DecoderResult timeEndpointDetectionMs.\n         * @member {number} timeEndpointDetectionMs\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.timeEndpointDetectionMs = 0;\n    \n        /**\n         * DecoderResult timeDecodingMs.\n         * @member {number} timeDecodingMs\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.timeDecodingMs = 0;\n    \n        /**\n         * DecoderResult variables.\n         * @member {IVariables|null|undefined} variables\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.variables = null;\n    \n        /**\n         * DecoderResult isFinal.\n         * @member {boolean} isFinal\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isFinal = false;\n    \n        /**\n         * DecoderResult emotionResult.\n         * @member {Array.<IEmotionResult>} emotionResult\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.emotionResult = $util.emptyArray;\n    \n        /**\n         * DecoderResult contextAnswer.\n         * @member {Array.<DecoderResult.IContextAnswer>} contextAnswer\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.contextAnswer = $util.emptyArray;\n    \n        /**\n         * Creates a new DecoderResult instance using the specified properties.\n         * @function create\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult=} [properties] Properties to set\n         * @returns {DecoderResult} DecoderResult instance\n         */\n        DecoderResult.create = function create(properties) {\n            return new DecoderResult(properties);\n        };\n    \n        /**\n         * Encodes the specified DecoderResult message. Does not implicitly {@link DecoderResult.verify|verify} messages.\n         * @function encode\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hypothesis != null && message.hypothesis.length)\n                for (var i = 0; i < message.hypothesis.length; ++i)\n                    $root.Hypothesis.encode(message.hypothesis[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.chunkStart != null && Object.hasOwnProperty.call(message, \"chunkStart\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.chunkStart);\n            if (message.chunkEnd != null && Object.hasOwnProperty.call(message, \"chunkEnd\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.chunkEnd);\n            if (message.timeEndpointDetectionMs != null && Object.hasOwnProperty.call(message, \"timeEndpointDetectionMs\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.timeEndpointDetectionMs);\n            if (message.timeDecodingMs != null && Object.hasOwnProperty.call(message, \"timeDecodingMs\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.timeDecodingMs);\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                $root.Variables.encode(message.variables, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isFinal);\n            if (message.emotionResult != null && message.emotionResult.length)\n                for (var i = 0; i < message.emotionResult.length; ++i)\n                    $root.EmotionResult.encode(message.emotionResult[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.contextAnswer != null && message.contextAnswer.length)\n                for (var i = 0; i < message.contextAnswer.length; ++i)\n                    $root.DecoderResult.ContextAnswer.encode(message.contextAnswer[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link DecoderResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.hypothesis && message.hypothesis.length))\n                        message.hypothesis = [];\n                    message.hypothesis.push($root.Hypothesis.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.chunkStart = reader.float();\n                    break;\n                case 3:\n                    message.chunkEnd = reader.float();\n                    break;\n                case 4:\n                    message.timeEndpointDetectionMs = reader.float();\n                    break;\n                case 5:\n                    message.timeDecodingMs = reader.float();\n                    break;\n                case 6:\n                    message.variables = $root.Variables.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.isFinal = reader.bool();\n                    break;\n                case 8:\n                    if (!(message.emotionResult && message.emotionResult.length))\n                        message.emotionResult = [];\n                    message.emotionResult.push($root.EmotionResult.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    if (!(message.contextAnswer && message.contextAnswer.length))\n                        message.contextAnswer = [];\n                    message.contextAnswer.push($root.DecoderResult.ContextAnswer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a DecoderResult message.\n         * @function verify\n         * @memberof DecoderResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecoderResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hypothesis != null && message.hasOwnProperty(\"hypothesis\")) {\n                if (!Array.isArray(message.hypothesis))\n                    return \"hypothesis: array expected\";\n                for (var i = 0; i < message.hypothesis.length; ++i) {\n                    var error = $root.Hypothesis.verify(message.hypothesis[i]);\n                    if (error)\n                        return \"hypothesis.\" + error;\n                }\n            }\n            if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\"))\n                if (typeof message.chunkStart !== \"number\")\n                    return \"chunkStart: number expected\";\n            if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\"))\n                if (typeof message.chunkEnd !== \"number\")\n                    return \"chunkEnd: number expected\";\n            if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\"))\n                if (typeof message.timeEndpointDetectionMs !== \"number\")\n                    return \"timeEndpointDetectionMs: number expected\";\n            if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\"))\n                if (typeof message.timeDecodingMs !== \"number\")\n                    return \"timeDecodingMs: number expected\";\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                var error = $root.Variables.verify(message.variables);\n                if (error)\n                    return \"variables.\" + error;\n            }\n            if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                if (typeof message.isFinal !== \"boolean\")\n                    return \"isFinal: boolean expected\";\n            if (message.emotionResult != null && message.hasOwnProperty(\"emotionResult\")) {\n                if (!Array.isArray(message.emotionResult))\n                    return \"emotionResult: array expected\";\n                for (var i = 0; i < message.emotionResult.length; ++i) {\n                    var error = $root.EmotionResult.verify(message.emotionResult[i]);\n                    if (error)\n                        return \"emotionResult.\" + error;\n                }\n            }\n            if (message.contextAnswer != null && message.hasOwnProperty(\"contextAnswer\")) {\n                if (!Array.isArray(message.contextAnswer))\n                    return \"contextAnswer: array expected\";\n                for (var i = 0; i < message.contextAnswer.length; ++i) {\n                    var error = $root.DecoderResult.ContextAnswer.verify(message.contextAnswer[i]);\n                    if (error)\n                        return \"contextAnswer.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DecoderResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DecoderResult} DecoderResult\n         */\n        DecoderResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.DecoderResult)\n                return object;\n            var message = new $root.DecoderResult();\n            if (object.hypothesis) {\n                if (!Array.isArray(object.hypothesis))\n                    throw TypeError(\".DecoderResult.hypothesis: array expected\");\n                message.hypothesis = [];\n                for (var i = 0; i < object.hypothesis.length; ++i) {\n                    if (typeof object.hypothesis[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.hypothesis: object expected\");\n                    message.hypothesis[i] = $root.Hypothesis.fromObject(object.hypothesis[i]);\n                }\n            }\n            if (object.chunkStart != null)\n                message.chunkStart = Number(object.chunkStart);\n            if (object.chunkEnd != null)\n                message.chunkEnd = Number(object.chunkEnd);\n            if (object.timeEndpointDetectionMs != null)\n                message.timeEndpointDetectionMs = Number(object.timeEndpointDetectionMs);\n            if (object.timeDecodingMs != null)\n                message.timeDecodingMs = Number(object.timeDecodingMs);\n            if (object.variables != null) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".DecoderResult.variables: object expected\");\n                message.variables = $root.Variables.fromObject(object.variables);\n            }\n            if (object.isFinal != null)\n                message.isFinal = Boolean(object.isFinal);\n            if (object.emotionResult) {\n                if (!Array.isArray(object.emotionResult))\n                    throw TypeError(\".DecoderResult.emotionResult: array expected\");\n                message.emotionResult = [];\n                for (var i = 0; i < object.emotionResult.length; ++i) {\n                    if (typeof object.emotionResult[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.emotionResult: object expected\");\n                    message.emotionResult[i] = $root.EmotionResult.fromObject(object.emotionResult[i]);\n                }\n            }\n            if (object.contextAnswer) {\n                if (!Array.isArray(object.contextAnswer))\n                    throw TypeError(\".DecoderResult.contextAnswer: array expected\");\n                message.contextAnswer = [];\n                for (var i = 0; i < object.contextAnswer.length; ++i) {\n                    if (typeof object.contextAnswer[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.contextAnswer: object expected\");\n                    message.contextAnswer[i] = $root.DecoderResult.ContextAnswer.fromObject(object.contextAnswer[i]);\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DecoderResult\n         * @static\n         * @param {DecoderResult} message DecoderResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecoderResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.hypothesis = [];\n                object.emotionResult = [];\n                object.contextAnswer = [];\n            }\n            if (options.defaults) {\n                object.chunkStart = 0;\n                object.chunkEnd = 0;\n                object.timeEndpointDetectionMs = 0;\n                object.timeDecodingMs = 0;\n                object.variables = null;\n                object.isFinal = false;\n            }\n            if (message.hypothesis && message.hypothesis.length) {\n                object.hypothesis = [];\n                for (var j = 0; j < message.hypothesis.length; ++j)\n                    object.hypothesis[j] = $root.Hypothesis.toObject(message.hypothesis[j], options);\n            }\n            if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\"))\n                object.chunkStart = options.json && !isFinite(message.chunkStart) ? String(message.chunkStart) : message.chunkStart;\n            if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\"))\n                object.chunkEnd = options.json && !isFinite(message.chunkEnd) ? String(message.chunkEnd) : message.chunkEnd;\n            if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\"))\n                object.timeEndpointDetectionMs = options.json && !isFinite(message.timeEndpointDetectionMs) ? String(message.timeEndpointDetectionMs) : message.timeEndpointDetectionMs;\n            if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\"))\n                object.timeDecodingMs = options.json && !isFinite(message.timeDecodingMs) ? String(message.timeDecodingMs) : message.timeDecodingMs;\n            if (message.variables != null && message.hasOwnProperty(\"variables\"))\n                object.variables = $root.Variables.toObject(message.variables, options);\n            if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                object.isFinal = message.isFinal;\n            if (message.emotionResult && message.emotionResult.length) {\n                object.emotionResult = [];\n                for (var j = 0; j < message.emotionResult.length; ++j)\n                    object.emotionResult[j] = $root.EmotionResult.toObject(message.emotionResult[j], options);\n            }\n            if (message.contextAnswer && message.contextAnswer.length) {\n                object.contextAnswer = [];\n                for (var j = 0; j < message.contextAnswer.length; ++j)\n                    object.contextAnswer[j] = $root.DecoderResult.ContextAnswer.toObject(message.contextAnswer[j], options);\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this DecoderResult to JSON.\n         * @function toJSON\n         * @memberof DecoderResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecoderResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        DecoderResult.ContextAnswer = (function() {\n    \n            /**\n             * Properties of a ContextAnswer.\n             * @memberof DecoderResult\n             * @interface IContextAnswer\n             * @property {Array.<DecoderResult.ContextAnswer.IContextRef>|null} [contextResult] ContextAnswer contextResult\n             */\n    \n            /**\n             * Constructs a new ContextAnswer.\n             * @memberof DecoderResult\n             * @classdesc Represents a ContextAnswer.\n             * @implements IContextAnswer\n             * @constructor\n             * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n             */\n            function ContextAnswer(properties) {\n                this.contextResult = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * ContextAnswer contextResult.\n             * @member {Array.<DecoderResult.ContextAnswer.IContextRef>} contextResult\n             * @memberof DecoderResult.ContextAnswer\n             * @instance\n             */\n            ContextAnswer.prototype.contextResult = $util.emptyArray;\n    \n            /**\n             * Creates a new ContextAnswer instance using the specified properties.\n             * @function create\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer instance\n             */\n            ContextAnswer.create = function create(properties) {\n                return new ContextAnswer(properties);\n            };\n    \n            /**\n             * Encodes the specified ContextAnswer message. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n             * @function encode\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContextAnswer.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.contextResult != null && message.contextResult.length)\n                    for (var i = 0; i < message.contextResult.length; ++i)\n                        $root.DecoderResult.ContextAnswer.ContextRef.encode(message.contextResult[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified ContextAnswer message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContextAnswer.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a ContextAnswer message from the specified reader or buffer.\n             * @function decode\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContextAnswer.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult.ContextAnswer();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.contextResult && message.contextResult.length))\n                            message.contextResult = [];\n                        message.contextResult.push($root.DecoderResult.ContextAnswer.ContextRef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a ContextAnswer message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContextAnswer.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a ContextAnswer message.\n             * @function verify\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ContextAnswer.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.contextResult != null && message.hasOwnProperty(\"contextResult\")) {\n                    if (!Array.isArray(message.contextResult))\n                        return \"contextResult: array expected\";\n                    for (var i = 0; i < message.contextResult.length; ++i) {\n                        var error = $root.DecoderResult.ContextAnswer.ContextRef.verify(message.contextResult[i]);\n                        if (error)\n                            return \"contextResult.\" + error;\n                    }\n                }\n                return null;\n            };\n    \n            /**\n             * Creates a ContextAnswer message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             */\n            ContextAnswer.fromObject = function fromObject(object) {\n                if (object instanceof $root.DecoderResult.ContextAnswer)\n                    return object;\n                var message = new $root.DecoderResult.ContextAnswer();\n                if (object.contextResult) {\n                    if (!Array.isArray(object.contextResult))\n                        throw TypeError(\".DecoderResult.ContextAnswer.contextResult: array expected\");\n                    message.contextResult = [];\n                    for (var i = 0; i < object.contextResult.length; ++i) {\n                        if (typeof object.contextResult[i] !== \"object\")\n                            throw TypeError(\".DecoderResult.ContextAnswer.contextResult: object expected\");\n                        message.contextResult[i] = $root.DecoderResult.ContextAnswer.ContextRef.fromObject(object.contextResult[i]);\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a ContextAnswer message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.ContextAnswer} message ContextAnswer\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ContextAnswer.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.contextResult = [];\n                if (message.contextResult && message.contextResult.length) {\n                    object.contextResult = [];\n                    for (var j = 0; j < message.contextResult.length; ++j)\n                        object.contextResult[j] = $root.DecoderResult.ContextAnswer.ContextRef.toObject(message.contextResult[j], options);\n                }\n                return object;\n            };\n    \n            /**\n             * Converts this ContextAnswer to JSON.\n             * @function toJSON\n             * @memberof DecoderResult.ContextAnswer\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ContextAnswer.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            ContextAnswer.ContextRef = (function() {\n    \n                /**\n                 * Properties of a ContextRef.\n                 * @memberof DecoderResult.ContextAnswer\n                 * @interface IContextRef\n                 * @property {string|null} [id] ContextRef id\n                 * @property {number|null} [index] ContextRef index\n                 * @property {string|null} [originalValue] ContextRef originalValue\n                 * @property {string|null} [predictedValue] ContextRef predictedValue\n                 * @property {number|null} [score] ContextRef score\n                 */\n    \n                /**\n                 * Constructs a new ContextRef.\n                 * @memberof DecoderResult.ContextAnswer\n                 * @classdesc Represents a ContextRef.\n                 * @implements IContextRef\n                 * @constructor\n                 * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n                 */\n                function ContextRef(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n    \n                /**\n                 * ContextRef id.\n                 * @member {string} id\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.id = \"\";\n    \n                /**\n                 * ContextRef index.\n                 * @member {number} index\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.index = 0;\n    \n                /**\n                 * ContextRef originalValue.\n                 * @member {string} originalValue\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.originalValue = \"\";\n    \n                /**\n                 * ContextRef predictedValue.\n                 * @member {string} predictedValue\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.predictedValue = \"\";\n    \n                /**\n                 * ContextRef score.\n                 * @member {number} score\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.score = 0;\n    \n                /**\n                 * Creates a new ContextRef instance using the specified properties.\n                 * @function create\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef instance\n                 */\n                ContextRef.create = function create(properties) {\n                    return new ContextRef(properties);\n                };\n    \n                /**\n                 * Encodes the specified ContextRef message. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n                 * @function encode\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContextRef.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);\n                    if (message.originalValue != null && Object.hasOwnProperty.call(message, \"originalValue\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originalValue);\n                    if (message.predictedValue != null && Object.hasOwnProperty.call(message, \"predictedValue\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.predictedValue);\n                    if (message.score != null && Object.hasOwnProperty.call(message, \"score\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).float(message.score);\n                    return writer;\n                };\n    \n                /**\n                 * Encodes the specified ContextRef message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContextRef.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n    \n                /**\n                 * Decodes a ContextRef message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContextRef.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult.ContextAnswer.ContextRef();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.index = reader.int32();\n                            break;\n                        case 3:\n                            message.originalValue = reader.string();\n                            break;\n                        case 4:\n                            message.predictedValue = reader.string();\n                            break;\n                        case 5:\n                            message.score = reader.float();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n    \n                /**\n                 * Decodes a ContextRef message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContextRef.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n    \n                /**\n                 * Verifies a ContextRef message.\n                 * @function verify\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ContextRef.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.index != null && message.hasOwnProperty(\"index\"))\n                        if (!$util.isInteger(message.index))\n                            return \"index: integer expected\";\n                    if (message.originalValue != null && message.hasOwnProperty(\"originalValue\"))\n                        if (!$util.isString(message.originalValue))\n                            return \"originalValue: string expected\";\n                    if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\"))\n                        if (!$util.isString(message.predictedValue))\n                            return \"predictedValue: string expected\";\n                    if (message.score != null && message.hasOwnProperty(\"score\"))\n                        if (typeof message.score !== \"number\")\n                            return \"score: number expected\";\n                    return null;\n                };\n    \n                /**\n                 * Creates a ContextRef message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 */\n                ContextRef.fromObject = function fromObject(object) {\n                    if (object instanceof $root.DecoderResult.ContextAnswer.ContextRef)\n                        return object;\n                    var message = new $root.DecoderResult.ContextAnswer.ContextRef();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.index != null)\n                        message.index = object.index | 0;\n                    if (object.originalValue != null)\n                        message.originalValue = String(object.originalValue);\n                    if (object.predictedValue != null)\n                        message.predictedValue = String(object.predictedValue);\n                    if (object.score != null)\n                        message.score = Number(object.score);\n                    return message;\n                };\n    \n                /**\n                 * Creates a plain object from a ContextRef message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.ContextRef} message ContextRef\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ContextRef.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.index = 0;\n                        object.originalValue = \"\";\n                        object.predictedValue = \"\";\n                        object.score = 0;\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.index != null && message.hasOwnProperty(\"index\"))\n                        object.index = message.index;\n                    if (message.originalValue != null && message.hasOwnProperty(\"originalValue\"))\n                        object.originalValue = message.originalValue;\n                    if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\"))\n                        object.predictedValue = message.predictedValue;\n                    if (message.score != null && message.hasOwnProperty(\"score\"))\n                        object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;\n                    return object;\n                };\n    \n                /**\n                 * Converts this ContextRef to JSON.\n                 * @function toJSON\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ContextRef.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n    \n                return ContextRef;\n            })();\n    \n            return ContextAnswer;\n        })();\n    \n        return DecoderResult;\n    })();\n    \n    $root.ErrorResponse = (function() {\n    \n        /**\n         * Properties of an ErrorResponse.\n         * @exports IErrorResponse\n         * @interface IErrorResponse\n         * @property {string|null} [errorMessage] ErrorResponse errorMessage\n         */\n    \n        /**\n         * Constructs a new ErrorResponse.\n         * @exports ErrorResponse\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * ErrorResponse errorMessage.\n         * @member {string} errorMessage\n         * @memberof ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorMessage = \"\";\n    \n        /**\n         * Creates a new ErrorResponse instance using the specified properties.\n         * @function create\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse=} [properties] Properties to set\n         * @returns {ErrorResponse} ErrorResponse instance\n         */\n        ErrorResponse.create = function create(properties) {\n            return new ErrorResponse(properties);\n        };\n    \n        /**\n         * Encodes the specified ErrorResponse message. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n         * @function encode\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ErrorResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.errorMessage = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an ErrorResponse message.\n         * @function verify\n         * @memberof ErrorResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ErrorResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                if (!$util.isString(message.errorMessage))\n                    return \"errorMessage: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ErrorResponse} ErrorResponse\n         */\n        ErrorResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.ErrorResponse)\n                return object;\n            var message = new $root.ErrorResponse();\n            if (object.errorMessage != null)\n                message.errorMessage = String(object.errorMessage);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ErrorResponse\n         * @static\n         * @param {ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrorResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.errorMessage = \"\";\n            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                object.errorMessage = message.errorMessage;\n            return object;\n        };\n    \n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrorResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return ErrorResponse;\n    })();\n    \n    $root.PacketWrapperFromServer = (function() {\n    \n        /**\n         * Properties of a PacketWrapperFromServer.\n         * @exports IPacketWrapperFromServer\n         * @interface IPacketWrapperFromServer\n         * @property {IUndecodedSeconds|null} [undecodedSecondsField] PacketWrapperFromServer undecodedSecondsField\n         * @property {IFullyFinalized|null} [fullyFinalizedField] PacketWrapperFromServer fullyFinalizedField\n         * @property {IDecoderResult|null} [decoderResultField] PacketWrapperFromServer decoderResultField\n         * @property {IErrorResponse|null} [errorResponse] PacketWrapperFromServer errorResponse\n         */\n    \n        /**\n         * Constructs a new PacketWrapperFromServer.\n         * @exports PacketWrapperFromServer\n         * @classdesc Represents a PacketWrapperFromServer.\n         * @implements IPacketWrapperFromServer\n         * @constructor\n         * @param {IPacketWrapperFromServer=} [properties] Properties to set\n         */\n        function PacketWrapperFromServer(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * PacketWrapperFromServer undecodedSecondsField.\n         * @member {IUndecodedSeconds|null|undefined} undecodedSecondsField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.undecodedSecondsField = null;\n    \n        /**\n         * PacketWrapperFromServer fullyFinalizedField.\n         * @member {IFullyFinalized|null|undefined} fullyFinalizedField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.fullyFinalizedField = null;\n    \n        /**\n         * PacketWrapperFromServer decoderResultField.\n         * @member {IDecoderResult|null|undefined} decoderResultField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.decoderResultField = null;\n    \n        /**\n         * PacketWrapperFromServer errorResponse.\n         * @member {IErrorResponse|null|undefined} errorResponse\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.errorResponse = null;\n    \n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n    \n        /**\n         * PacketWrapperFromServer MessageType.\n         * @member {\"undecodedSecondsField\"|\"fullyFinalizedField\"|\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        Object.defineProperty(PacketWrapperFromServer.prototype, \"MessageType\", {\n            get: $util.oneOfGetter($oneOfFields = [\"undecodedSecondsField\", \"fullyFinalizedField\", \"decoderResultField\", \"errorResponse\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n    \n        /**\n         * Creates a new PacketWrapperFromServer instance using the specified properties.\n         * @function create\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer=} [properties] Properties to set\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer instance\n         */\n        PacketWrapperFromServer.create = function create(properties) {\n            return new PacketWrapperFromServer(properties);\n        };\n    \n        /**\n         * Encodes the specified PacketWrapperFromServer message. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n         * @function encode\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PacketWrapperFromServer.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.undecodedSecondsField != null && Object.hasOwnProperty.call(message, \"undecodedSecondsField\"))\n                $root.UndecodedSeconds.encode(message.undecodedSecondsField, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.fullyFinalizedField != null && Object.hasOwnProperty.call(message, \"fullyFinalizedField\"))\n                $root.FullyFinalized.encode(message.fullyFinalizedField, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\"))\n                $root.DecoderResult.encode(message.decoderResultField, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\"))\n                $root.ErrorResponse.encode(message.errorResponse, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified PacketWrapperFromServer message, length delimited. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PacketWrapperFromServer.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a PacketWrapperFromServer message from the specified reader or buffer.\n         * @function decode\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PacketWrapperFromServer.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PacketWrapperFromServer();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.undecodedSecondsField = $root.UndecodedSeconds.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.fullyFinalizedField = $root.FullyFinalized.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.decoderResultField = $root.DecoderResult.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.errorResponse = $root.ErrorResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a PacketWrapperFromServer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PacketWrapperFromServer.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a PacketWrapperFromServer message.\n         * @function verify\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PacketWrapperFromServer.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n                properties.MessageType = 1;\n                {\n                    var error = $root.UndecodedSeconds.verify(message.undecodedSecondsField);\n                    if (error)\n                        return \"undecodedSecondsField.\" + error;\n                }\n            }\n            if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.FullyFinalized.verify(message.fullyFinalizedField);\n                    if (error)\n                        return \"fullyFinalizedField.\" + error;\n                }\n            }\n            if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.DecoderResult.verify(message.decoderResultField);\n                    if (error)\n                        return \"decoderResultField.\" + error;\n                }\n            }\n            if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.ErrorResponse.verify(message.errorResponse);\n                    if (error)\n                        return \"errorResponse.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a PacketWrapperFromServer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         */\n        PacketWrapperFromServer.fromObject = function fromObject(object) {\n            if (object instanceof $root.PacketWrapperFromServer)\n                return object;\n            var message = new $root.PacketWrapperFromServer();\n            if (object.undecodedSecondsField != null) {\n                if (typeof object.undecodedSecondsField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.undecodedSecondsField: object expected\");\n                message.undecodedSecondsField = $root.UndecodedSeconds.fromObject(object.undecodedSecondsField);\n            }\n            if (object.fullyFinalizedField != null) {\n                if (typeof object.fullyFinalizedField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.fullyFinalizedField: object expected\");\n                message.fullyFinalizedField = $root.FullyFinalized.fromObject(object.fullyFinalizedField);\n            }\n            if (object.decoderResultField != null) {\n                if (typeof object.decoderResultField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.decoderResultField: object expected\");\n                message.decoderResultField = $root.DecoderResult.fromObject(object.decoderResultField);\n            }\n            if (object.errorResponse != null) {\n                if (typeof object.errorResponse !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.errorResponse: object expected\");\n                message.errorResponse = $root.ErrorResponse.fromObject(object.errorResponse);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a PacketWrapperFromServer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {PacketWrapperFromServer} message PacketWrapperFromServer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PacketWrapperFromServer.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n                object.undecodedSecondsField = $root.UndecodedSeconds.toObject(message.undecodedSecondsField, options);\n                if (options.oneofs)\n                    object.MessageType = \"undecodedSecondsField\";\n            }\n            if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n                object.fullyFinalizedField = $root.FullyFinalized.toObject(message.fullyFinalizedField, options);\n                if (options.oneofs)\n                    object.MessageType = \"fullyFinalizedField\";\n            }\n            if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                object.decoderResultField = $root.DecoderResult.toObject(message.decoderResultField, options);\n                if (options.oneofs)\n                    object.MessageType = \"decoderResultField\";\n            }\n            if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                object.errorResponse = $root.ErrorResponse.toObject(message.errorResponse, options);\n                if (options.oneofs)\n                    object.MessageType = \"errorResponse\";\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this PacketWrapperFromServer to JSON.\n         * @function toJSON\n         * @memberof PacketWrapperFromServer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PacketWrapperFromServer.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return PacketWrapperFromServer;\n    })();\n\n    return $root;\n});\n});\n\nvar createSpeechRecognizer = function (voiceListener) {\n    var _a = createNanoEvents(), emit = _a.emit, on = _a.on;\n    var off;\n    var status = 'inactive';\n    var currentMessageId;\n    var stop = function () {\n        if (voiceListener.status !== 'stopped') {\n            status = 'inactive';\n            voiceListener.stop();\n        }\n    };\n    var start = function (_a) {\n        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n        return voiceListener.listen(sendVoice).then(function () {\n            status = 'active';\n            currentMessageId = messageId;\n            off = onMessage(function (message) {\n                var _a, _b;\n                if (message.status && message.status.code != null && message.status.code < 0) {\n                    off();\n                    stop();\n                }\n                if (message.messageId === messageId && message.messageName === MessageNames.STT) {\n                    if (message.text) {\n                        emit('hypotesis', message.text.data || '', message.last === 1, message.messageId);\n                        if (message.last === 1) {\n                            off();\n                            stop();\n                        }\n                    }\n                    if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n                        var decoderResultField = asr.PacketWrapperFromServer.decode(message.bytes.data).decoderResultField;\n                        if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n                            emit('hypotesis', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal, message.messageId);\n                            if (decoderResultField.isFinal) {\n                                off();\n                                stop();\n                            }\n                        }\n                    }\n                }\n            });\n        });\n    };\n    return {\n        start: start,\n        stop: stop,\n        on: on,\n        get status() {\n            return status;\n        },\n        get messageId() {\n            return currentMessageId;\n        },\n    };\n};\n\nvar isAudioSupported = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n/**\n * Возвращает новый инстанс AudioContext или ошибку\n * @param options AudioContextOptions\n * @returns AudioContext\n */\nvar createAudioContext = function (options) {\n    if (window.AudioContext) {\n        return new AudioContext(options);\n    }\n    if (window.webkitAudioContext) {\n        // eslint-disable-next-line new-cap\n        return new window.webkitAudioContext();\n    }\n    throw new Error('Audio not supported');\n};\nvar _a = createNanoEvents(), on = _a.on, emit = _a.emit;\nvar audioContext;\n/**\n * При помощи вызова функции из аргумента, возвращает, готовый к воспроизведению звука, AudioContext.\n * Всегда возвращает один и тот же AudioContext\n * @param onReady Функция, в аргумент которой будет возвращен AudioContext\n */\nvar resolveAudioContext = function (onReady) {\n    if (!audioContext) {\n        var isSafari_1 = navigator.vendor.search('Apple') >= 0;\n        var context_1 = createAudioContext();\n        audioContext = {\n            context: context_1,\n            ready: !isSafari_1 && context_1.state === 'running',\n            on: on,\n        };\n        /// Контекст может быть не готов для использования сразу после создания\n        /// Если попробовать что-то воспроизвести в этом контексте - звука не будет\n        if (!audioContext.ready) {\n            var handleClick_1 = function () {\n                document.removeEventListener('click', handleClick_1);\n                document.removeEventListener('touchstart', handleClick_1);\n                if (isSafari_1) {\n                    /// проигрываем тишину, т.к нужно что-то проиграть,\n                    /// чтобы сафари разрешил воспроизводить звуки в любой момент в этом контексте\n                    var oscillator = audioContext.context.createOscillator();\n                    oscillator.frequency.value = 0;\n                    oscillator.connect(audioContext.context.destination);\n                    oscillator.start(0);\n                    oscillator.stop(0.5);\n                }\n                if (audioContext.context.state === 'suspended') {\n                    /// Developers who write games, WebRTC applications, or other websites that use the Web Audio API\n                    /// should call context.resume() after the first user gesture (e.g. a click, or tap)\n                    /// https://sites.google.com/a/chromium.org/dev/audio-video/autoplay\n                    audioContext.context.resume();\n                }\n                audioContext.ready = true;\n                emit('ready');\n            };\n            /// чтобы сделать контекст готовым к использованию (воспроизведению звука),\n            /// необходимо событие от пользователя\n            // для пк\n            document.addEventListener('click', handleClick_1);\n            // для мобильных устройств\n            document.addEventListener('touchstart', handleClick_1);\n        }\n    }\n    if (audioContext.ready) {\n        onReady && onReady(audioContext.context);\n    }\n    else {\n        var unsubscribe_1 = on('ready', function () {\n            onReady(audioContext.context);\n            unsubscribe_1();\n        });\n    }\n};\n\n/**\n * Понижает sample rate c inSampleRate до значения outSampleRate и преобразует Float32Array в ArrayBuffer\n * @param buffer Аудио\n * @param inSampleRate текущий sample rate\n * @param outSampleRate требуемый sample rate\n * @returns Аудио со значением sample rate = outSampleRate\n */\nvar downsampleBuffer = function (buffer, inSampleRate, outSampleRate) {\n    if (outSampleRate > inSampleRate) {\n        throw new Error('downsampling rate show be smaller than original sample rate');\n    }\n    var sampleRateRatio = inSampleRate / outSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Int16Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n        var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n        var accum = 0;\n        var count = 0;\n        for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n            accum += buffer[i];\n            count++;\n        }\n        result[offsetResult] = Math.min(1, accum / count) * 0x7fff;\n        offsetResult++;\n        offsetBuffer = nextOffsetBuffer;\n    }\n    return result.buffer;\n};\nvar TARGET_SAMPLE_RATE = 16000;\nvar IS_FIREFOX = typeof window !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar context;\nvar processor;\n/**\n * Преобразует stream в чанки (кусочки), и передает их в cb,\n * будет это делать, пока не будет вызвана функция остановки\n * @param stream Аудио-поток\n * @param cb callback, куда будут переданы чанки из потока\n * @returns Функция, вызов которой остановит передачу чанков\n */\nvar createAudioRecorder = function (stream, cb) {\n    return new Promise(function (resolve) {\n        var state = 'inactive';\n        var input;\n        var stop = function () {\n            if (state === 'inactive') {\n                throw new Error(\"Can't stop inactive recorder\");\n            }\n            state = 'inactive';\n            stream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n            input.disconnect();\n        };\n        var start = function () {\n            if (state !== 'inactive') {\n                throw new Error(\"Can't start not inactive recorder\");\n            }\n            state = 'recording';\n            if (!context) {\n                context = createAudioContext({\n                    // firefox не умеет выравнивать samplerate, будем делать это самостоятельно\n                    sampleRate: IS_FIREFOX ? undefined : TARGET_SAMPLE_RATE,\n                });\n            }\n            input = context.createMediaStreamSource(stream);\n            if (!processor) {\n                processor = context.createScriptProcessor(2048, 1, 1);\n            }\n            var listener = function (e) {\n                var buffer = e.inputBuffer.getChannelData(0);\n                var data = downsampleBuffer(buffer, context.sampleRate, TARGET_SAMPLE_RATE);\n                var last = state === 'inactive';\n                cb(data, last);\n                if (last) {\n                    processor.removeEventListener('audioprocess', listener);\n                }\n            };\n            processor.addEventListener('audioprocess', listener);\n            processor.addEventListener('audioprocess', function () { return resolve(stop); }, { once: true });\n            input.connect(processor);\n            processor.connect(context.destination);\n        };\n        start();\n    });\n};\n/**\n * Запрашивает у браузера доступ к микрофону и резолвит Promise, если разрешение получено.\n * После получения разрешения, чанки с голосом будут передаваться в cb - пока не будет вызвана функция из результата.\n * @param cb Callback, куда будут передаваться чанки с голосом пользователя\n * @returns Promise, который содержит функцию прерывающую слушание\n */\nvar createNavigatorAudioProvider = function (cb) {\n    return navigator.mediaDevices\n        .getUserMedia({\n        audio: true,\n    })\n        .then(function (stream) { return createAudioRecorder(stream, cb); });\n};\n\n/**\n * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.\n * @param createAudioProvider Источник голоса\n * @returns Api для запуска и остановки слушания\n */\nvar createVoiceListener = function (createAudioProvider) {\n    if (createAudioProvider === void 0) { createAudioProvider = createNavigatorAudioProvider; }\n    var _a = createNanoEvents(), emit = _a.emit, on = _a.on;\n    var stopRecord;\n    var status = 'stopped';\n    var stop = function () {\n        status = 'stopped';\n        stopRecord();\n        emit('status', 'stopped');\n    };\n    var listen = function (handleVoice) {\n        status = 'started';\n        emit('status', 'started');\n        return createAudioProvider(function (data, last) { return handleVoice(new Uint8Array(data), last); })\n            .then(function (recStop) {\n            stopRecord = recStop;\n        })\n            .then(function () {\n            status = 'listen';\n            emit('status', 'listen');\n        })\n            .catch(function (err) {\n            status = 'stopped';\n            emit('status', 'stopped');\n            throw err;\n        });\n    };\n    return {\n        listen: listen,\n        stop: stop,\n        on: on,\n        get status() {\n            return status;\n        },\n    };\n};\n\n/** Создает коллекцию треков  */\nvar createTrackCollection = function () {\n    var trackIds;\n    var trackMap;\n    var clear = function () {\n        trackIds = new Array();\n        trackMap = new Map();\n    };\n    var push = function (id, track) {\n        if (trackMap.has(id)) {\n            throw new Error('Track already exists');\n        }\n        trackMap.set(id, track);\n        trackIds.push(id);\n    };\n    var has = function (id) { return trackMap.has(id); };\n    var getById = function (id) {\n        var track = trackMap.get(id);\n        if (track === undefined) {\n            throw new Error('Unknown track id');\n        }\n        return track;\n    };\n    var getByIndex = function (index) {\n        if (index < 0 || index >= trackIds.length) {\n            throw new Error('Index out of bounds');\n        }\n        var track = trackMap.get(trackIds[index]);\n        if (track == null) {\n            throw new Error('Something wrong...');\n        }\n        return track;\n    };\n    var some = function (predicate) { return trackIds.some(function (id) { return predicate(getById(id)); }); };\n    clear();\n    return {\n        clear: clear,\n        has: has,\n        get: getById,\n        getByIndex: getByIndex,\n        push: push,\n        some: some,\n        get length() {\n            return trackIds.length;\n        },\n    };\n};\n\n/** Создает структуру для хранения загружаемых и воспроизводимых частей трека */\nvar createChunkQueue = function () {\n    var buffer = []; // очередь на воспроизведение\n    var chunks = []; // очередь воспроизведения\n    var duration = 0; // продолжительность очереди на воспроизведение, сек\n    var loaded = false; // флаг завершения загрузки\n    /** Добавить чанк в очередь на воспроизведение */\n    var push = function (chunk) {\n        var _a;\n        buffer.push(chunk);\n        duration += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n    };\n    /** Добавить чанк в очередь воспроизведения */\n    var toPlay = function (chunk) {\n        chunks.push(chunk);\n    };\n    /** Удалить чанк из очереди воспроизведения */\n    var remove = function (chunk) {\n        chunks.splice(chunks.indexOf(chunk), 1);\n    };\n    /** Получить очередь на воспроизведение */\n    var popAll = function () {\n        duration = 0;\n        return buffer.splice(0, buffer.length);\n    };\n    /** Проставляем признак окончания загрузки трека */\n    var allLoaded = function () {\n        loaded = true;\n    };\n    return {\n        get bufferLen() {\n            return buffer.length;\n        },\n        get chunks() {\n            return chunks;\n        },\n        allLoaded: allLoaded,\n        toPlay: toPlay,\n        remove: remove,\n        push: push,\n        popAll: popAll,\n        get length() {\n            return chunks.length;\n        },\n        get duration() {\n            return duration;\n        },\n        get ended() {\n            // считаем трек законченным, когда все загружено и воспроизведено\n            return loaded && chunks.length === 0 && buffer.length === 0;\n        },\n        get loaded() {\n            return loaded;\n        },\n    };\n};\n\nvar from16BitToFloat32 = function (incomingData) {\n    var l = incomingData.length;\n    var outputData = new Float32Array(l);\n    for (var i = 0; i < l; i += 1) {\n        outputData[i] = incomingData[i] / 32768.0;\n    }\n    return outputData;\n};\n/** Возвращает потоковый подгружаемый трек, который умеет себя проигрывать */\nvar createTrackStream = function (ctx, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.sampleRate, sampleRate = _c === void 0 ? 24000 : _c, _d = _b.numberOfChannels, numberOfChannels = _d === void 0 ? 1 : _d, _e = _b.delay, delay = _e === void 0 ? 0 : _e, onPlay = _b.onPlay, onEnd = _b.onEnd, trackStatus = _b.trackStatus;\n    // очередь загруженных чанков (кусочков) трека\n    var queue = createChunkQueue();\n    var extraByte = null;\n    var status = trackStatus || 'stop';\n    var lastChunkOffset = 0;\n    var startTime = 0;\n    var firstChunk = true;\n    var end = function () {\n        // останавливаем воспроизведение чанков из очереди воспроизведения\n        queue.chunks.forEach(function (chunk) {\n            chunk.stop();\n        });\n        status = 'end';\n        onEnd && onEnd();\n        startTime = 0;\n        lastChunkOffset = 0;\n    };\n    var play = function () {\n        if (status === 'end') {\n            return;\n        }\n        if (status !== 'play') {\n            status = 'play';\n            onPlay && onPlay();\n        }\n        if (queue.ended) {\n            end();\n            return;\n        }\n        // воспроизводим трек, если он полностью загрузился или длина загруженного больше задержки\n        if (queue.loaded || queue.duration >= delay) {\n            startTime = queue.length === 0 ? ctx.currentTime : startTime;\n            var chunks = queue.popAll();\n            chunks.forEach(function (chunk) {\n                var _a;\n                queue.toPlay(chunk);\n                chunk.start(startTime + lastChunkOffset);\n                lastChunkOffset += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n            });\n        }\n    };\n    var getExtraBytes = function (data, bytesArraysSizes) {\n        if (extraByte == null && bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n            extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n            bytesArraysSizes.incomingMessageVoiceDataLength -= 1;\n            bytesArraysSizes.sourceLen -= 1;\n        }\n        else if (extraByte != null) {\n            bytesArraysSizes.prepend = extraByte;\n            bytesArraysSizes.start = 1;\n            if (bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n                bytesArraysSizes.incomingMessageVoiceDataLength += 1;\n                extraByte = null;\n            }\n            else {\n                extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n                bytesArraysSizes.sourceLen -= 1;\n            }\n        }\n    };\n    var createChunk = function (chunk) {\n        var audioBuffer = ctx.createBuffer(numberOfChannels, chunk.length / numberOfChannels, sampleRate);\n        for (var i = 0; i < numberOfChannels; i++) {\n            var channelChunk = new Float32Array(chunk.length / numberOfChannels);\n            var index = 0;\n            for (var j = i; j < chunk.length; j += numberOfChannels) {\n                channelChunk[index++] = chunk[j];\n            }\n            audioBuffer.getChannelData(i).set(channelChunk);\n        }\n        var source = ctx.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(ctx.destination);\n        source.onended = function () {\n            queue.remove(source);\n            if (queue.ended && status !== 'end') {\n                status = 'end';\n                onEnd && onEnd();\n            }\n        };\n        return source;\n    };\n    /** добавляет чанк в очередь на воспроизведение */\n    var write = function (data) {\n        // 44 байта - заголовок трека\n        var slicePoint = firstChunk ? 44 : 0;\n        var bytesArraysSizes = {\n            incomingMessageVoiceDataLength: data.length,\n            sourceLen: data.length,\n            start: 0,\n            prepend: null,\n        };\n        firstChunk = false;\n        if (slicePoint >= data.length) {\n            return;\n        }\n        getExtraBytes(data, bytesArraysSizes);\n        var dataBuffer = new ArrayBuffer(bytesArraysSizes.incomingMessageVoiceDataLength);\n        var bufferUi8 = new Uint8Array(dataBuffer);\n        var bufferI16 = new Int16Array(dataBuffer);\n        bufferUi8.set(data.slice(0, bytesArraysSizes.sourceLen), bytesArraysSizes.start);\n        if (bytesArraysSizes.prepend != null) {\n            bufferUi8[0] = bytesArraysSizes.prepend;\n        }\n        var chunk = createChunk(from16BitToFloat32(bufferI16.slice(slicePoint)));\n        queue.push(chunk);\n        if (status === 'play') {\n            play();\n        }\n    };\n    return {\n        get loaded() {\n            return queue.loaded;\n        },\n        setLoaded: function () {\n            queue.allLoaded();\n            if (status === 'play') {\n                play();\n            }\n        },\n        write: write,\n        get status() {\n            return status;\n        },\n        play: play,\n        stop: end,\n    };\n};\n\nvar createVoicePlayer = function (actx, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.startVoiceDelay, startVoiceDelay = _c === void 0 ? 0.2 : _c, sampleRate = _b.sampleRate, numberOfChannels = _b.numberOfChannels;\n    var _d = createNanoEvents(), on = _d.on, emit = _d.emit;\n    var tracks = createTrackCollection();\n    // true - воспроизводим все треки в очереди (новые в том числе), false - скипаем всю очередь (новые в т.ч.)\n    var active = true;\n    // индекс текущего трека в tracks\n    var cursor = 0;\n    var play = function () {\n        if (cursor >= tracks.length) {\n            if (tracks.some(function (track) { return !track.loaded; })) {\n                return;\n            }\n            // очищаем коллекцию, если все треки были воспроизведены\n            cursor = 0;\n            tracks.clear();\n            return;\n        }\n        // рекурсивно последовательно включаем треки из очереди\n        var current = tracks.getByIndex(cursor);\n        if (current.status === 'end') {\n            if (cursor < tracks.length) {\n                cursor++;\n                play();\n            }\n        }\n        else {\n            current.play();\n        }\n    };\n    var append = function (data, trackId, last) {\n        if (last === void 0) { last = false; }\n        var current = tracks.has(trackId) ? tracks.get(trackId) : undefined;\n        if (current == null) {\n            /// если trackId нет в коллекции - создаем трек\n            /// по окончании проигрывания - запускаем следующий трек, вызывая play\n            current = createTrackStream(actx, {\n                sampleRate: sampleRate,\n                numberOfChannels: numberOfChannels,\n                delay: startVoiceDelay,\n                onPlay: function () { return emit('play', trackId); },\n                onEnd: function () {\n                    emit('end', trackId);\n                    play();\n                },\n                trackStatus: active ? 'stop' : 'end',\n            });\n            tracks.push(trackId, current);\n        }\n        if (current.status !== 'end' && data.length) {\n            current.write(data);\n        }\n        if (last) {\n            // все чанки трека загружены\n            current.setLoaded();\n        }\n        play();\n    };\n    var stop = function () {\n        while (cursor < tracks.length) {\n            var cur = cursor;\n            cursor++;\n            tracks.getByIndex(cur).stop();\n        }\n    };\n    return {\n        append: append,\n        setActive: function (value) {\n            active = value;\n            if (value) {\n                play();\n            }\n            else {\n                stop();\n            }\n        },\n        on: on,\n        stop: stop,\n    };\n};\n\nvar createVoiceSettings = function (listener) {\n    var settings = { disableDubbing: false, disableListening: false };\n    var nextSettings = {};\n    var isVoicePlayerEnded = true;\n    var tryApply = function () {\n        if (listener.status === 'stopped' && isVoicePlayerEnded) {\n            settings = __assign(__assign({}, settings), nextSettings);\n        }\n    };\n    var change = function (setts) {\n        nextSettings = __assign(__assign({}, nextSettings), setts);\n        tryApply();\n    };\n    /**\n     * Пытается применить настройки в момент завершения озвучки\n     * (или при прекращении слушания, если озвучка отключена).\n     */\n    var startAutoApplying = function (voicePlayer) {\n        var subscribers = [];\n        subscribers.push(listener.on('status', function (status) {\n            if (status === 'stopped') {\n                tryApply();\n            }\n        }));\n        if (voicePlayer) {\n            subscribers.push(voicePlayer.on('play', function () {\n                isVoicePlayerEnded = false;\n            }));\n            subscribers.push(voicePlayer.on('end', function () {\n                isVoicePlayerEnded = true;\n                tryApply();\n            }));\n        }\n        return function () { return subscribers.forEach(function (unsubscribe) { return unsubscribe(); }); };\n    };\n    return {\n        change: change,\n        startAutoApplying: startAutoApplying,\n        get disableDubbing() {\n            return settings.disableDubbing;\n        },\n        get disableListening() {\n            return settings.disableListening;\n        },\n    };\n};\nvar createVoice = function (client, emit, \n/// пока onReady не вызван, треки не воспроизводятся\n/// когда случится onReady, очередь треков начнет проигрываться\nonReady) {\n    var voicePlayer;\n    var listener = createVoiceListener();\n    var musicRecognizer = createMusicRecognizer(listener);\n    var speechRecognizer = createSpeechRecognizer(listener);\n    var subscriptions = [];\n    var settings = createVoiceSettings(listener);\n    var appInfoDict = {};\n    var mesIdQueue = [];\n    var isPlaying = false; // проигрывается/не проигрывается озвучка\n    var autolistenMesId = null; // id сообщения, после проигрывания которого, нужно активировать слушание\n    /** останавливает слушание голоса, возвращает true - если слушание было активно */\n    var stopListening = function () {\n        var result = speechRecognizer.status === 'active' || musicRecognizer.status === 'active';\n        autolistenMesId = null;\n        if (speechRecognizer.status === 'active') {\n            speechRecognizer.stop();\n            client.sendCancel(speechRecognizer.messageId);\n            return true;\n        }\n        if (musicRecognizer.status === 'active') {\n            musicRecognizer.stop();\n            client.sendCancel(musicRecognizer.messageId);\n            return true;\n        }\n        return result;\n    };\n    /** Останавливает слушание и воспроизведение */\n    var stop = function () {\n        // здесь важен порядок остановки голоса\n        stopListening();\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    };\n    /** Активирует слушание голоса\n     * если было активно слушание или проигрывание - останавливает, слушание в этом случае не активируется\n     */\n    var listen = function (_a) {\n        var begin = (_a === void 0 ? {} : _a).begin;\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                if (stopListening()) {\n                    return [2 /*return*/];\n                }\n                if (isPlaying) {\n                    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n                    return [2 /*return*/];\n                }\n                if (settings.disableListening) {\n                    return [2 /*return*/];\n                }\n                // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n                if (listener.status === 'stopped') {\n                    return [2 /*return*/, client.init().then(function () {\n                            return client.createVoiceStream(function (_a) {\n                                var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n                                begin === null || begin === void 0 ? void 0 : begin.forEach(function (chunk) { return sendVoice(new Uint8Array(chunk), false); });\n                                return speechRecognizer.start({\n                                    sendVoice: sendVoice,\n                                    messageId: messageId,\n                                    onMessage: onMessage,\n                                });\n                            });\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /** Активирует распознавание музыки\n     * если было активно слушание или проигрывание - останавливает, распознование музыки в этом случае не активируется\n     */\n    var shazam = function () {\n        if (stopListening()) {\n            return;\n        }\n        if (isPlaying) {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n        }\n        if (settings.disableListening) {\n            return;\n        }\n        // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n        if (listener.status === 'stopped') {\n            client.createVoiceStream(function (_a) {\n                var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n                return musicRecognizer.start({\n                    sendVoice: sendVoice,\n                    messageId: messageId,\n                    onMessage: onMessage,\n                });\n            });\n        }\n    };\n    if (isAudioSupported) {\n        resolveAudioContext(function (context) {\n            /// создаем плеер только если поддерживается аудио\n            /// и только когда готов AudioContext\n            voicePlayer = createVoicePlayer(context, { startVoiceDelay: 1 });\n            // начало проигрывания озвучки\n            subscriptions.push(voicePlayer.on('play', function (mesId) {\n                isPlaying = true;\n                emit({ emotion: 'talk' });\n                emit({ tts: { status: 'start', messageId: Number(mesId), appInfo: appInfoDict[mesId] } });\n            }));\n            // окончание проигрывания озвучки\n            subscriptions.push(voicePlayer.on('end', function (mesId) {\n                isPlaying = false;\n                emit({ emotion: 'idle' });\n                emit({ tts: { status: 'stop', messageId: Number(mesId), appInfo: appInfoDict[mesId] } });\n                if (mesId === autolistenMesId) {\n                    listen();\n                }\n                // очистка сохраненных appInfo и messageId\n                var idx = 0;\n                do {\n                    delete appInfoDict[mesIdQueue[0]];\n                } while (mesIdQueue[idx++] !== mesId && mesIdQueue.length > idx);\n                mesIdQueue.splice(0, idx);\n            }));\n            // запуск автоматического применения настроек\n            subscriptions.push(settings.startAutoApplying(voicePlayer));\n            // оповещаем о готовности к воспроизведению звука\n            onReady && onReady();\n        });\n    }\n    else {\n        // запуск автоматического применения настроек (в случае, если озвучка не доступна)\n        subscriptions.push(settings.startAutoApplying());\n    }\n    // обработка входящей озвучки\n    subscriptions.push(client.on('voice', function (data, message) {\n        if (settings.disableDubbing) {\n            return;\n        }\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.append(data, message.messageId.toString(), message.last === 1);\n    }));\n    // гипотезы распознавания речи\n    subscriptions.push(speechRecognizer.on('hypotesis', function (text, isLast, mid) {\n        emit({\n            asr: {\n                text: listener.status === 'listen' && !settings.disableListening ? text : '',\n                last: isLast,\n                mid: mid,\n            },\n        });\n    }));\n    // статусы слушания речи\n    subscriptions.push(listener.on('status', function (status) {\n        if (status === 'listen') {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n            emit({ emotion: 'listen' });\n        }\n        else if (status === 'stopped') {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!settings.disableDubbing);\n            emit({ asr: { text: '' }, emotion: 'idle' });\n        }\n    }));\n    // активация автослушания\n    subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n        var autoListening = systemMessage.auto_listening;\n        var messageId = originalMessage.messageId.toString();\n        if (typeof systemMessage.app_info !== 'undefined') {\n            appInfoDict[messageId] = systemMessage.app_info;\n            mesIdQueue.push(messageId);\n        }\n        if (autoListening) {\n            /// если озвучка включена - сохраняем mesId чтобы включить слушание после озвучки\n            /// если озвучка выключена - включаем слушание сразу\n            if (!settings.disableDubbing) {\n                autolistenMesId = messageId;\n            }\n            else {\n                listen();\n            }\n        }\n    }));\n    return {\n        destroy: function () {\n            stopListening();\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        change: function (nextSettings) {\n            var disableDubbing = nextSettings.disableDubbing, disableListening = nextSettings.disableListening;\n            /// Важен порядок обработки флагов слушания и озвучки.\n            /// Сначала слушание, потом озвучка\n            disableListening && stopListening();\n            // Такой вызов необходим, чтобы включая озвучку она тут же проигралась (при её наличии), и наоборот\n            settings.disableDubbing !== disableDubbing && (voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!disableDubbing));\n            settings.change(nextSettings);\n        },\n        listen: listen,\n        shazam: shazam,\n        stop: stop,\n        stopPlaying: function () {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n        },\n    };\n};\n\nvar STATE_UPDATE_TIMEOUT = 200;\nvar DEFAULT_PROJECT_ID = 'd929986a-611a-2ba0-6174-1928c99600a5';\nvar DEFAULT_APPLICATION_ID = '7c4e23bf-cd93-b57e-874b-d9fc1b35f93d';\nvar DEFAULT_APP_VERSION_ID = '26d0bb2e-45d6-a276-f70e-6c016d1f9cff';\nvar DEFAULT_APP = {\n    projectId: DEFAULT_PROJECT_ID,\n    applicationId: DEFAULT_APPLICATION_ID,\n    appversionId: DEFAULT_APP_VERSION_ID,\n    frontendStateId: [DEFAULT_PROJECT_ID, DEFAULT_APPLICATION_ID, DEFAULT_APP_VERSION_ID].join('_'),\n    frontendType: 'DIALOG',\n    systemName: 'assistant',\n    frontendEndpoint: 'None',\n};\nvar isDefaultApp = function (appInfo) { return appInfo.frontendStateId === DEFAULT_APP.frontendStateId; };\nvar promiseTimeout = function (promise, timeout) {\n    var timeoutId;\n    return Promise.race([\n        promise.then(function (v) {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n            return v;\n        }),\n        new Promise(function (_, reject) {\n            timeoutId = window.setTimeout(function () {\n                reject(new Error(\"Timed out in \" + timeout + \" ms.\"));\n            }, timeout);\n        }),\n    ]);\n};\nvar createAssistant = function (_a) {\n    var _b;\n    var getMeta = _a.getMeta, configuration = __rest(_a, [\"getMeta\"]);\n    var _c = createNanoEvents(), on = _c.on, emit = _c.emit;\n    var subscriptions = [];\n    // хеш [messageId]: requestId, где requestId - пользовательский ид экшена\n    var requestIdMap = {};\n    // готов/не готов воспроизводить озвучку\n    var voiceReady = false;\n    // текущий апп\n    var app = { info: DEFAULT_APP };\n    var sdkMeta = { theme: 'dark' };\n    var settings = {\n        disableDubbing: configuration.settings.dubbing === -1,\n        disableListening: false,\n        sendTextAsSsml: false,\n    };\n    var backgroundApps = {};\n    var metaProvider = function () { return __awaiter(void 0, void 0, void 0, function () {\n        var appState, _a, current_app, getBackgroundAppsMeta, background_apps;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!(app !== null && app.info.frontendType === 'WEB_APP' && app.getState)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, promiseTimeout(app.getState(), STATE_UPDATE_TIMEOUT).catch(function () {\n                            // eslint-disable-next-line no-console\n                            console.error('App-state wasn`t resolved, timeout had been expired');\n                            return undefined;\n                        })];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    _a = undefined;\n                    _b.label = 3;\n                case 3:\n                    appState = _a;\n                    current_app = {\n                        app_info: app.info,\n                        state: appState || {},\n                    };\n                    getBackgroundAppsMeta = function () { return __awaiter(void 0, void 0, void 0, function () {\n                        var apps, backgroundAppsIds, backgroundAppsMeta;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    apps = __assign({}, backgroundApps);\n                                    backgroundAppsIds = Object.keys(apps);\n                                    backgroundAppsMeta = [];\n                                    return [4 /*yield*/, Promise.all(backgroundAppsIds.map(function (applicationId) { return __awaiter(void 0, void 0, void 0, function () {\n                                            var _a, getState;\n                                            return __generator(this, function (_b) {\n                                                _a = apps[applicationId].getState, getState = _a === void 0 ? function () { return Promise.resolve({}); } : _a;\n                                                return [2 /*return*/, promiseTimeout(getState(), STATE_UPDATE_TIMEOUT).then(function (state) { return state; }, function () { return ({}); })];\n                                            });\n                                        }); })).then(function (results) {\n                                            results.forEach(function (appResult, index) {\n                                                var state = appResult;\n                                                var applicationId = backgroundAppsIds[index];\n                                                backgroundAppsMeta.push({\n                                                    app_info: apps[applicationId].appInfo,\n                                                    state: state,\n                                                });\n                                            });\n                                        })];\n                                case 1:\n                                    _a.sent();\n                                    return [2 /*return*/, backgroundAppsMeta];\n                            }\n                        });\n                    }); };\n                    return [4 /*yield*/, getBackgroundAppsMeta()];\n                case 4:\n                    background_apps = _b.sent();\n                    return [2 /*return*/, __assign(__assign(__assign({}, sdkMeta), { time: getTime(), current_app: current_app,\n                            background_apps: background_apps }), (getMeta ? getMeta() : {}))];\n            }\n        });\n    }); };\n    var transport = createTransport((_b = configuration.fakeVps) === null || _b === void 0 ? void 0 : _b.createFakeWS);\n    var protocol = createProtocol(transport, __assign(__assign({}, configuration), { \n        // пока голос не готов, выключаем озвучку\n        settings: __assign(__assign({}, configuration.settings), { dubbing: !voiceReady ? -1 : configuration.settings.dubbing }) }));\n    var client = createClient(protocol, metaProvider);\n    var voice = createVoice(client, function (event) {\n        if (typeof event.tts !== 'undefined') {\n            emit('tts', event.tts);\n            return;\n        }\n        emit('assistant', event);\n    }, function () {\n        voiceReady = true;\n        // когда голос готов, обновляем настройки, если они отличаются от текущих\n        var currentDubbing = settings.disableDubbing === false ? 1 : -1;\n        if (protocol.configuration.settings.dubbing !== currentDubbing) {\n            protocol.changeSettings({ dubbing: currentDubbing });\n        }\n    });\n    /** завершает текущий апп */\n    var closeApp = function () {\n        var current = app;\n        app = {\n            info: DEFAULT_APP,\n        };\n        if (!isDefaultApp(current.info)) {\n            emit('app', { type: 'close', app: current.info });\n        }\n    };\n    /** отправляет текст */\n    var sendText = function (text, shouldSendDisableDubbing) {\n        if (shouldSendDisableDubbing === void 0) { shouldSendDisableDubbing = false; }\n        voice.stop();\n        client.sendText(text, settings.sendTextAsSsml, shouldSendDisableDubbing);\n    };\n    /** отправляет server_action */\n    var sendServerAction = function (serverAction, messageName, requestId, actionApp) {\n        if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n        if (requestId === void 0) { requestId = undefined; }\n        if (actionApp === void 0) { actionApp = app.info; }\n        voice.stop();\n        client.sendServerAction(serverAction, actionApp, messageName).then(function (messageId) {\n            if (requestId && messageId) {\n                requestIdMap[messageId.toString()] = requestId;\n            }\n        });\n    };\n    /** отправляет ответ на запрос доступа к местоположению и пр. меты */\n    var sendMetaForPermissionRequest = function (requestMessageId, appInfo, items) { return __awaiter(void 0, void 0, void 0, function () {\n        var _a, props, data, meta;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, getAnswerForRequestPermissions(requestMessageId, appInfo, items)];\n                case 1:\n                    _a = _b.sent(), props = __rest(_a.meta, []), data = __rest(_a, [\"meta\"]);\n                    return [4 /*yield*/, metaProvider()];\n                case 2:\n                    meta = _b.sent();\n                    client.sendData(__assign({}, data), 'SERVER_ACTION', __assign(__assign({}, meta), props));\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    subscriptions.push(protocol.on('ready', function () { return emit('vps', { type: 'ready' }); }));\n    // при неудачном переподключении к сокету\n    subscriptions.push(transport.on('error', function (error) {\n        voice.stop();\n        protocol.clearQueue();\n        emit('vps', { type: 'error', error: error });\n    }));\n    // обработка исходящих сообщений\n    subscriptions.push(protocol.on('outcoming', function (message) {\n        emit('vps', { type: 'outcoming', message: message });\n    }));\n    // обработка ошибок\n    subscriptions.push(protocol.on('error', function (error) {\n        emit('error', error);\n    }));\n    // оповещение о статусах\n    subscriptions.push(client.on('status', function (status) {\n        emit('status', status);\n    }));\n    // история на запрос GetHistoryRequest\n    subscriptions.push(client.on('history', function (history) {\n        emit('history', history);\n    }));\n    // обработка входящих команд, и событий аппа\n    subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n        if (originalMessage.messageName === 'ANSWER_TO_USER') {\n            var activate_app_info = systemMessage.activate_app_info, items = systemMessage.items, mesAppInfo = systemMessage.app_info, character = systemMessage.character;\n            if (character) {\n                emit('assistant', { character: character.id });\n            }\n            // по-умолчанию activate_app_info: true\n            if (mesAppInfo && activate_app_info !== false) {\n                emit('app', { type: 'run', app: mesAppInfo });\n            }\n            if (items) {\n                var _loop_1 = function (i) {\n                    var command = items[i].command;\n                    if (typeof command !== 'undefined') {\n                        setTimeout(function () { return emit('command', command); });\n                        if (command.type === 'start_music_recognition') {\n                            voice.shazam();\n                            return { value: void 0 };\n                        }\n                        if (command.type === 'request_permissions' && mesAppInfo) {\n                            sendMetaForPermissionRequest(originalMessage.messageId, mesAppInfo, command.permissions);\n                            return { value: void 0 };\n                        }\n                        if (command.type === 'action') {\n                            emit('actionCommand', {\n                                type: 'command',\n                                command: command,\n                            });\n                        }\n                        if ((command.type === 'smart_app_data' ||\n                            command.type === 'smart_app_error' ||\n                            command.type === 'start_smart_search' ||\n                            command.type === 'navigation') &&\n                            mesAppInfo) {\n                            // эмитим все команды, т.к бывают фоновые команды\n                            emit('app', {\n                                type: 'command',\n                                command: __assign(__assign({}, command), { sdk_meta: {\n                                        mid: originalMessage.messageId.toString(),\n                                        requestId: requestIdMap[originalMessage.messageId.toString()],\n                                    } }),\n                                app: mesAppInfo,\n                            });\n                        }\n                        if (command.type === 'close_app') {\n                            closeApp();\n                        }\n                    }\n                };\n                for (var i = 0; i < (items || []).length; i++) {\n                    var state_1 = _loop_1(i);\n                    if (typeof state_1 === \"object\")\n                        return state_1.value;\n                }\n            }\n            emit('vps', { type: 'incoming', systemMessage: systemMessage, originalMessage: originalMessage });\n        }\n    }));\n    // прокидывает команды backgroundApp'ов в их подписчики\n    on('app', function (event) {\n        var _a;\n        if (event.type === 'command') {\n            var backgroundAppOnCommand = (_a = backgroundApps[event.app.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers;\n            if (Array.isArray(backgroundAppOnCommand)) {\n                backgroundAppOnCommand.forEach(function (onCommand) {\n                    var _a;\n                    onCommand(event.command, (_a = event.command.sdk_meta) === null || _a === void 0 ? void 0 : _a.mid);\n                });\n            }\n        }\n    });\n    /** уничтожает ассистент, очищает подписки */\n    var destroy = function () {\n        voice.destroy();\n        client.destroy();\n        protocol.destroy();\n        subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n    };\n    /** запускает ассистент (приветствие) */\n    var start = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.disableGreetings, disableGreetings = _c === void 0 ? false : _c, _d = _b.initPhrase, initPhrase = _d === void 0 ? undefined : _d, _e = _b.isFirstSession, isFirstSession = _e === void 0 ? false : _e;\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        if (!(!disableGreetings && isDefaultApp(app.info))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, client.sendOpenAssistant({ isFirstSession: isFirstSession })];\n                    case 1:\n                        _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        if (initPhrase) {\n                            return [2 /*return*/, client\n                                    .sendText(initPhrase)\n                                    .then(function (messageId) { return (messageId ? client.waitForAnswer(messageId) : undefined); })];\n                        }\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    return {\n        get activeApp() {\n            return !isDefaultApp(app.info) ? app.info : null;\n        },\n        get settings() {\n            return settings;\n        },\n        destroy: destroy,\n        closeApp: closeApp,\n        listen: voice.listen,\n        sendServerAction: sendServerAction,\n        getHistoryRequest: protocol.getHistoryRequest,\n        sendText: sendText,\n        start: start,\n        stop: function () {\n            voice.stop();\n            protocol.clearQueue();\n            transport.close();\n        },\n        stopTts: voice.stopPlaying,\n        stopVoice: voice.stop,\n        emit: emit,\n        on: on,\n        changeConfiguration: protocol.changeConfiguration,\n        changeSdkMeta: function (nextSdkMeta) {\n            sdkMeta = __assign(__assign({}, sdkMeta), nextSdkMeta);\n        },\n        changeSettings: function (newSettings) {\n            var dubbingChanged = settings.disableDubbing !== !!newSettings.disableDubbing;\n            settings = __assign(__assign({}, settings), newSettings);\n            voice.change({ disableDubbing: settings.disableDubbing, disableListening: settings.disableListening });\n            if (!dubbingChanged) {\n                return;\n            }\n            protocol.changeSettings({ dubbing: settings.disableDubbing || !voiceReady ? -1 : 1 });\n        },\n        reconnect: protocol.reconnect,\n        get protocol() {\n            return protocol;\n        },\n        setActiveApp: function (info, getState) {\n            app = { info: info, getState: getState };\n        },\n        addBackgroundApp: function (_a) {\n            var appInfo = _a.appInfo, getState = _a.getState;\n            backgroundApps[appInfo.applicationId] = {\n                appInfo: appInfo,\n                getState: getState,\n                commandsSubscribers: [],\n            };\n            var remove = function () {\n                delete backgroundApps[appInfo.applicationId];\n            };\n            var onCommand = function (subscriber) {\n                var _a;\n                (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers.push(subscriber);\n                return {\n                    clearSubscribers: function () {\n                        if (backgroundApps[appInfo.applicationId]) {\n                            backgroundApps[appInfo.applicationId].commandsSubscribers = [];\n                        }\n                    },\n                };\n            };\n            var sendServerActionToBackgroundApp = function (serverAction, messageName, requestId) {\n                var _a;\n                if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n                if (requestId === void 0) { requestId = undefined; }\n                return sendServerAction(serverAction, messageName, requestId, (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.appInfo);\n            };\n            return {\n                remove: remove,\n                onCommand: onCommand,\n                sendServerAction: sendServerActionToBackgroundApp,\n            };\n        },\n    };\n};\n\nexport { appendHeader as a, createNavigatorAudioProvider as b, createAssistant as c };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}