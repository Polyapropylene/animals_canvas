{"ast":null,"code":"import React from 'react';\nimport { setRef } from '../utils';\n\n/**\n * Позволяет переиспользовать объект `ref` внутри forwardRef.\n * @param {React.Ref<T>} refOne\n * @param {React.Ref<T>} refTwo\n * @return {Function React.Ref}\n */\nexport var useForkRef = function useForkRef(refOne, refTwo) {\n  return React.useMemo(function () {\n    if (refOne == null && refTwo === null) {\n      return null;\n    }\n    return function (refOb) {\n      setRef(refOne, refOb);\n      setRef(refTwo, refOb);\n    };\n  }, [refOne, refTwo]);\n};","map":{"version":3,"names":["React","setRef","useForkRef","refOne","refTwo","useMemo","refOb"],"sources":["C:/Users/20618801/Desktop/src/node_modules/@salutejs/plasma-core/es/hooks/useForkRef.js"],"sourcesContent":["import React from 'react';\nimport { setRef } from '../utils';\n\n/**\n * Позволяет переиспользовать объект `ref` внутри forwardRef.\n * @param {React.Ref<T>} refOne\n * @param {React.Ref<T>} refTwo\n * @return {Function React.Ref}\n */\nexport var useForkRef = function useForkRef(refOne, refTwo) {\n  return React.useMemo(function () {\n    if (refOne == null && refTwo === null) {\n      return null;\n    }\n\n    return function (refOb) {\n      setRef(refOne, refOb);\n      setRef(refTwo, refOb);\n    };\n  }, [refOne, refTwo]);\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAEC,MAAM,EAAE;EAC1D,OAAOJ,KAAK,CAACK,OAAO,CAAC,YAAY;IAC/B,IAAIF,MAAM,IAAI,IAAI,IAAIC,MAAM,KAAK,IAAI,EAAE;MACrC,OAAO,IAAI;IACb;IAEA,OAAO,UAAUE,KAAK,EAAE;MACtBL,MAAM,CAACE,MAAM,EAAEG,KAAK,CAAC;MACrBL,MAAM,CAACG,MAAM,EAAEE,KAAK,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACH,MAAM,EAAEC,MAAM,CAAC,CAAC;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}